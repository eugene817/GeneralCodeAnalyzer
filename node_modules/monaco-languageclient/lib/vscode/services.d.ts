import * as monaco from '@codingame/monaco-vscode-editor-api';
import 'vscode/localExtensionHost';
import { type IWorkbenchConstructionOptions } from '@codingame/monaco-vscode-api';
import type { OpenEditor } from '@codingame/monaco-vscode-editor-service-override';
import type { LocalizationOptions } from '@codingame/monaco-vscode-localization-service-override';
import type { EnvironmentOverride } from '@codingame/monaco-vscode-api/workbench';
import type { Logger } from 'monaco-languageclient/tools';
export interface MonacoEnvironmentEnhanced extends monaco.Environment {
    vscodeInitialising?: boolean;
    vscodeApiInitialised?: boolean;
}
export interface UserConfiguration {
    json?: string;
}
export interface ViewsConfig {
    viewServiceType: 'EditorService' | 'ViewsService' | 'WorkspaceService';
    openEditorFunc?: OpenEditor;
    htmlAugmentationInstructions?: (htmlContainer: HTMLElement | null | undefined) => void;
    viewsInitFunc?: () => Promise<void>;
}
export interface VscodeApiConfig {
    vscodeApiInitPerformExternally?: boolean;
    loadThemes?: boolean;
    serviceOverrides?: monaco.editor.IEditorOverrideServices;
    enableExtHostWorker?: boolean;
    workspaceConfig?: IWorkbenchConstructionOptions;
    userConfiguration?: UserConfiguration;
    viewsConfig?: ViewsConfig;
    envOptions?: EnvironmentOverride;
}
export interface InitServicesInstructions {
    htmlContainer?: HTMLElement;
    caller?: string;
    performServiceConsistencyChecks?: () => boolean;
    logger?: Logger;
}
export declare const initEnhancedMonacoEnvironment: () => MonacoEnvironmentEnhanced;
export declare const getMonacoEnvironmentEnhanced: () => MonacoEnvironmentEnhanced;
export declare const supplyRequiredServices: () => Promise<{
    [x: string]: any;
}>;
export declare const reportServiceLoading: (services: monaco.editor.IEditorOverrideServices, logger?: Logger) => void;
export declare const mergeServices: (overrideServices: monaco.editor.IEditorOverrideServices, services?: monaco.editor.IEditorOverrideServices) => void;
export declare const initServices: (vscodeApiConfig: VscodeApiConfig, instructions?: InitServicesInstructions) => Promise<boolean | undefined>;
/**
 * monaco-vscode-api automatically loads the following services:
 *  - layout
 *  - environment
 *  - extension
 *  - files
 *  - quickAccess
 * monaco-languageclient always adds the following services:
 *   - languages
 *   - log
 *   - model
 */
export declare const importAllServices: (vscodeApiConfig: VscodeApiConfig, instructions?: InitServicesInstructions) => Promise<void>;
/**
 * Enable ext host to run in a worker
 */
export declare const configureExtHostWorker: (enableExtHostWorker: boolean, userServices: monaco.editor.IEditorOverrideServices) => Promise<void>;
export declare const createDefaultLocaleConfiguration: () => LocalizationOptions;
//# sourceMappingURL=services.d.ts.map