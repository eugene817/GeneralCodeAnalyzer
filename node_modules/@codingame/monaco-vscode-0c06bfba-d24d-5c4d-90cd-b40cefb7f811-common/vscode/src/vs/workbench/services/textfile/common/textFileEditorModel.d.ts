import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { EncodingMode, TextFileEditorModelState, ITextFileEditorModel, ITextFileResolveOptions, IResolvedTextFileEditorModel, TextFileResolveReason, ITextFileEditorModelSaveEvent, ITextFileSaveAsOptions } from "@codingame/monaco-vscode-aff8bc9b-c6f8-578f-9c8a-f70d14f9c13c-common/vscode/vs/workbench/services/textfile/common/textfiles";
import { ITextFileService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/textfile/common/textfiles.service";
import { IRevertOptions } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { BaseTextEditorModel } from "@codingame/monaco-vscode-aff8bc9b-c6f8-578f-9c8a-f70d14f9c13c-common/vscode/vs/workbench/common/editor/textEditorModel";
import { IWorkingCopyBackupService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/workingCopy/common/workingCopyBackup.service";
import { IFileStatWithMetadata } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { ILanguageService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages/language.service";
import { IModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/model.service";
import { ITextModel } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/model";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { IWorkingCopyService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/workingCopy/common/workingCopyService.service";
import { IWorkingCopyBackup, WorkingCopyCapabilities } from "@codingame/monaco-vscode-86d65fc6-30f9-5dca-9501-e249de688591-common/vscode/vs/workbench/services/workingCopy/common/workingCopy";
import { IFilesConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/filesConfiguration/common/filesConfigurationService.service";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { ILanguageDetectionService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/languageDetection/common/languageDetectionWorkerService.service";
import { IPathService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/path/common/pathService.service";
import { IAccessibilityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/accessibility/common/accessibility.service";
import { IExtensionService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/extensions/common/extensions.service";
import { IMarkdownString } from "@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent";
import { IProgressService } from "@codingame/monaco-vscode-api/vscode/vs/platform/progress/common/progress.service";
export declare class TextFileEditorModel extends BaseTextEditorModel implements ITextFileEditorModel {
    readonly resource: URI;
    private preferredEncoding;
    private preferredLanguageId;
    private readonly fileService;
    private readonly textFileService;
    private readonly workingCopyBackupService;
    private readonly logService;
    private readonly workingCopyService;
    private readonly filesConfigurationService;
    private readonly labelService;
    private readonly pathService;
    private readonly extensionService;
    private readonly progressService;
    private static readonly TEXTFILE_SAVE_ENCODING_SOURCE;
    private readonly _onDidChangeContent;
    readonly onDidChangeContent: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private readonly _onDidResolve;
    readonly onDidResolve: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<TextFileResolveReason>;
    private readonly _onDidChangeDirty;
    readonly onDidChangeDirty: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private readonly _onDidSaveError;
    readonly onDidSaveError: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private readonly _onDidSave;
    readonly onDidSave: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<ITextFileEditorModelSaveEvent>;
    private readonly _onDidRevert;
    readonly onDidRevert: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private readonly _onDidChangeEncoding;
    readonly onDidChangeEncoding: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private readonly _onDidChangeOrphaned;
    readonly onDidChangeOrphaned: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private readonly _onDidChangeReadonly;
    readonly onDidChangeReadonly: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    readonly typeId = "";
    readonly capabilities = WorkingCopyCapabilities.None;
    readonly name: string;
    private resourceHasExtension;
    private contentEncoding;
    private versionId;
    private bufferSavedVersionId;
    private ignoreDirtyOnModelContentChange;
    private ignoreSaveFromSaveParticipants;
    private static readonly UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD;
    private lastModelContentChangeFromUndoRedo;
    lastResolvedFileStat: IFileStatWithMetadata | undefined;
    private readonly saveSequentializer;
    private dirty;
    private inConflictMode;
    private inOrphanMode;
    private inErrorMode;
    constructor(resource: URI, preferredEncoding: string | undefined, preferredLanguageId: string | undefined, languageService: ILanguageService, modelService: IModelService, fileService: IFileService, textFileService: ITextFileService, workingCopyBackupService: IWorkingCopyBackupService, logService: ILogService, workingCopyService: IWorkingCopyService, filesConfigurationService: IFilesConfigurationService, labelService: ILabelService, languageDetectionService: ILanguageDetectionService, accessibilityService: IAccessibilityService, pathService: IPathService, extensionService: IExtensionService, progressService: IProgressService);
    private registerListeners;
    private onDidFilesChange;
    private setOrphaned;
    private onDidChangeFilesAssociation;
    setLanguageId(languageId: string, source?: string): void;
    backup(token: CancellationToken): Promise<IWorkingCopyBackup>;
    revert(options?: IRevertOptions): Promise<void>;
    resolve(options?: ITextFileResolveOptions): Promise<void>;
    private doResolve;
    private resolveFromBuffer;
    private resolveFromBackup;
    private doResolveFromBackup;
    private resolveFromFile;
    private resolveFromContent;
    private doCreateTextModel;
    private doUpdateTextModel;
    protected installModelListeners(model: ITextModel): void;
    private onModelContentChanged;
    protected autoDetectLanguage(): Promise<void>;
    private forceResolveFromFile;
    isDirty(): this is IResolvedTextFileEditorModel;
    isModified(): boolean;
    setDirty(dirty: boolean): void;
    private doSetDirty;
    save(options?: ITextFileSaveAsOptions): Promise<boolean>;
    private doSave;
    private doSaveSequential;
    private handleSaveSuccess;
    private handleSaveError;
    private updateSavedVersionId;
    private updateLastResolvedFileStat;
    hasState(state: TextFileEditorModelState): boolean;
    joinState(state: TextFileEditorModelState.PENDING_SAVE): Promise<void>;
    getLanguageId(this: IResolvedTextFileEditorModel): string;
    getLanguageId(): string | undefined;
    private onMaybeShouldChangeEncoding;
    private hasEncodingSetExplicitly;
    setEncoding(encoding: string, mode: EncodingMode): Promise<void>;
    private setEncodingInternal;
    updatePreferredEncoding(encoding: string | undefined): void;
    private isNewEncoding;
    getEncoding(): string | undefined;
    private trace;
    isResolved(): this is IResolvedTextFileEditorModel;
    isReadonly(): boolean | IMarkdownString;
    dispose(): void;
}
