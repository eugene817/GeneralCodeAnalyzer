import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IToolData, IToolInvocation, IToolResult } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/languageModelToolsService";
import { ILanguageModelToolsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/languageModelToolsService.service";
import { IExtHostContext } from "../../services/extensions/common/extHostCustomers.js";
import { Dto } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/extensions/common/proxyIdentifier";
import { MainThreadLanguageModelToolsShape } from "@codingame/monaco-vscode-api/vscode/vs/workbench/api/common/extHost.protocol";
export declare class MainThreadLanguageModelTools extends Disposable implements MainThreadLanguageModelToolsShape {
    private readonly _languageModelToolsService;
    private readonly _proxy;
    private readonly _tools;
    private readonly _countTokenCallbacks;
    constructor(extHostContext: IExtHostContext, _languageModelToolsService: ILanguageModelToolsService);
    $getTools(): Promise<IToolData[]>;
    $invokeTool(dto: IToolInvocation, token?: CancellationToken): Promise<Dto<IToolResult>>;
    $countTokensForInvocation(callId: string, input: string, token: CancellationToken): Promise<number>;
    $registerTool(id: string): void;
    $unregisterTool(name: string): void;
}
