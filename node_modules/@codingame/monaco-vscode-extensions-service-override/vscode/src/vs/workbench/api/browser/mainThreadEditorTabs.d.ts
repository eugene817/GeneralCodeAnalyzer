import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { MainThreadEditorTabsShape } from "@codingame/monaco-vscode-api/vscode/vs/workbench/api/common/extHost.protocol";
import { EditorGroupColumn } from "@codingame/monaco-vscode-38f25ab8-ea30-5ba9-8a08-ae3308c297c0-common/vscode/vs/workbench/services/editor/common/editorGroupColumn";
import { IEditorGroupsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { IExtHostContext } from "../../services/extensions/common/extHostCustomers.js";
export declare class MainThreadEditorTabs implements MainThreadEditorTabsShape {
    private readonly _editorGroupsService;
    private readonly _configurationService;
    private readonly _logService;
    private readonly _dispoables;
    private readonly _proxy;
    private _tabGroupModel;
    private readonly _groupLookup;
    private readonly _tabInfoLookup;
    private readonly _multiDiffEditorInputListeners;
    constructor(extHostContext: IExtHostContext, _editorGroupsService: IEditorGroupsService, _configurationService: IConfigurationService, _logService: ILogService, editorService: IEditorService);
    dispose(): void;
    private _buildTabObject;
    private _editorInputToDto;
    private _generateTabId;
    private _onDidGroupActivate;
    private _onDidTabLabelChange;
    private _onDidTabOpen;
    private _onDidTabClose;
    private _onDidTabActiveChange;
    private _onDidTabDirty;
    private _onDidTabPinChange;
    private _onDidTabPreviewChange;
    private _onDidTabMove;
    private _createTabsModel;
    private _updateTabsModel;
    $moveTab(tabId: string, index: number, viewColumn: EditorGroupColumn, preserveFocus?: boolean): void;
    $closeTab(tabIds: string[], preserveFocus?: boolean): Promise<boolean>;
    $closeGroup(groupIds: number[], preserveFocus?: boolean): Promise<boolean>;
}
