import { Disposable, IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IObservable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/observable";
import { ICodeEditor, IViewZoneChangeAccessor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorBrowser";
import { ModifiedBaseRange } from "@codingame/monaco-vscode-210e86a9-a91b-5273-b05d-390c776dde1f-common/vscode/vs/workbench/contrib/mergeEditor/browser/model/modifiedBaseRange";
import { MergeEditorViewModel } from "@codingame/monaco-vscode-view-common-service-override/vscode/vs/workbench/contrib/mergeEditor/browser/view/viewModel";
export declare class ConflictActionsFactory extends Disposable {
    private readonly _editor;
    private readonly _styleClassName;
    private readonly _styleElement;
    constructor(_editor: ICodeEditor);
    private _updateLensStyle;
    private _getLayoutInfo;
    createWidget(viewZoneChangeAccessor: IViewZoneChangeAccessor, lineNumber: number, items: IObservable<IContentWidgetAction[]>, viewZoneIdsToCleanUp: string[]): IDisposable;
}
export declare class ActionsSource {
    private readonly viewModel;
    private readonly modifiedBaseRange;
    constructor(viewModel: MergeEditorViewModel, modifiedBaseRange: ModifiedBaseRange);
    private getItemsInput;
    readonly itemsInput1: IObservable<IContentWidgetAction[]>;
    readonly itemsInput2: IObservable<IContentWidgetAction[]>;
    readonly resultItems: IObservable<IContentWidgetAction[]>;
    readonly isEmpty: IObservable<boolean>;
    readonly inputIsEmpty: IObservable<boolean>;
}
export interface IContentWidgetAction {
    text: string;
    tooltip?: string;
    action?: () => Promise<void>;
}
