import { IListAccessibilityProvider } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/list/listWidget";
import { IListVirtualDelegate } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/list/list";
import { IProgressService } from "@codingame/monaco-vscode-api/vscode/vs/platform/progress/common/progress.service";
import { INotificationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/notification/common/notification.service";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { IWorkbenchLayoutService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service";
import { IWorkspaceContextService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace.service";
import { IDisposable, DisposableStore } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IResourceLabel, ResourceLabels } from "@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/workbench/browser/labels";
import { ITreeNode, ITreeFilter, TreeVisibility, IAsyncDataSource, ITreeSorter, ITreeDragAndDrop, ITreeDragOverReaction } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/tree/tree";
import { IContextMenuService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextview/browser/contextView.service";
import { IContextViewService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextview/browser/contextView.service";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { ExplorerItem } from "@codingame/monaco-vscode-c4e2825a-b5b1-5f0e-b547-068c32e06d50-common/vscode/vs/workbench/contrib/files/common/explorerModel";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IDragAndDropData } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/dnd";
import { ListViewTargetSector } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/list/listView";
import { IDialogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service";
import { IWorkspaceEditingService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/workspaces/common/workspaceEditing.service";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { FuzzyScore } from "@codingame/monaco-vscode-api/vscode/vs/base/common/filters";
import { Emitter, Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IAsyncFindProvider, IAsyncFindResult, IAsyncFindToggles, ITreeCompressionDelegate } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/tree/asyncDataTree";
import { ICompressibleTreeRenderer } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/tree/objectTree";
import { ICompressedTreeNode } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/tree/compressedObjectTreeModel";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { IUriIdentityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/uriIdentity/common/uriIdentity.service";
import { IExplorerService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/files/browser/files.service";
import { IFilesConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/filesConfiguration/common/filesConfigurationService.service";
import { IExplorerFileContribution } from "@codingame/monaco-vscode-a4c2011e-8775-52bd-abf0-4a3c07a9696b-common/vscode/vs/workbench/contrib/files/browser/explorerFileContrib";
import { WorkbenchCompressibleAsyncDataTree } from "@codingame/monaco-vscode-api/vscode/vs/platform/list/browser/listService";
import { ISearchService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/search/common/search.service";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { TreeFindMatchType } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/tree/abstractTree";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
export declare class ExplorerDelegate implements IListVirtualDelegate<ExplorerItem> {
    static readonly ITEM_HEIGHT = 22;
    getHeight(element: ExplorerItem): number;
    getTemplateId(element: ExplorerItem): string;
}
export declare const explorerRootErrorEmitter: Emitter<URI>;
export declare class ExplorerDataSource implements IAsyncDataSource<ExplorerItem | ExplorerItem[], ExplorerItem> {
    private readonly fileFilter;
    private readonly findProvider;
    private readonly progressService;
    private readonly configService;
    private readonly notificationService;
    private readonly layoutService;
    private readonly fileService;
    private readonly explorerService;
    private readonly contextService;
    private readonly filesConfigService;
    constructor(fileFilter: FilesFilter, findProvider: ExplorerFindProvider, progressService: IProgressService, configService: IConfigurationService, notificationService: INotificationService, layoutService: IWorkbenchLayoutService, fileService: IFileService, explorerService: IExplorerService, contextService: IWorkspaceContextService, filesConfigService: IFilesConfigurationService);
    getParent(element: ExplorerItem): ExplorerItem;
    hasChildren(element: ExplorerItem | ExplorerItem[]): boolean;
    getChildren(element: ExplorerItem | ExplorerItem[]): ExplorerItem[] | Promise<ExplorerItem[]>;
}
export declare class PhantomExplorerItem extends ExplorerItem {
    constructor(resource: URI, fileService: IFileService, configService: IConfigurationService, filesConfigService: IFilesConfigurationService, _parent: ExplorerItem | undefined, _isDirectory?: boolean);
}
interface IExplorerFindHighlightTree {
    get(item: ExplorerItem): number;
    isMatch(item: ExplorerItem): boolean;
}
export declare class ExplorerFindProvider implements IAsyncFindProvider<ExplorerItem> {
    private readonly filesFilter;
    private readonly treeProvider;
    private readonly searchService;
    private readonly fileService;
    private readonly configurationService;
    private readonly filesConfigService;
    private readonly progressService;
    private readonly explorerService;
    private sessionId;
    private filterSessionStartState;
    private highlightSessionStartState;
    private explorerFindActiveContextKey;
    private phantomParents;
    private findHighlightTree;
    get highlightTree(): IExplorerFindHighlightTree;
    constructor(filesFilter: FilesFilter, treeProvider: () => WorkbenchCompressibleAsyncDataTree<ExplorerItem | ExplorerItem[], ExplorerItem, FuzzyScore>, searchService: ISearchService, fileService: IFileService, configurationService: IConfigurationService, filesConfigService: IFilesConfigurationService, progressService: IProgressService, explorerService: IExplorerService, contextKeyService: IContextKeyService);
    isShowingFilterResults(): boolean;
    isVisible(element: ExplorerItem): boolean;
    startSession(): void;
    endSession(): Promise<void>;
    find(pattern: string, toggles: IAsyncFindToggles, token: CancellationToken): Promise<IAsyncFindResult<ExplorerItem> | undefined>;
    doFind(pattern: string, toggles: IAsyncFindToggles, token: CancellationToken): Promise<IAsyncFindResult<ExplorerItem> | undefined>;
    private startFilterSession;
    doFilterFind(pattern: string, matchType: TreeFindMatchType, token: CancellationToken): Promise<IAsyncFindResult<ExplorerItem> | undefined>;
    private addWorkspaceFilterResults;
    private createPhantomItems;
    endFilterSession(): Promise<void>;
    private clearPhantomElements;
    private startHighlightSession;
    doHighlightFind(pattern: string, matchType: TreeFindMatchType, token: CancellationToken): Promise<IAsyncFindResult<ExplorerItem> | undefined>;
    private addWorkspaceHighlightResults;
    private endHighlightSession;
    private clearHighlights;
    private searchSupportsScheme;
    private getSearchResults;
    private searchInWorkspace;
}
export interface ICompressedNavigationController {
    readonly current: ExplorerItem;
    readonly currentId: string;
    readonly items: ExplorerItem[];
    readonly labels: HTMLElement[];
    readonly index: number;
    readonly count: number;
    readonly onDidChange: Event<void>;
    previous(): void;
    next(): void;
    first(): void;
    last(): void;
    setIndex(index: number): void;
    updateCollapsed(collapsed: boolean): void;
}
export declare class CompressedNavigationController implements ICompressedNavigationController, IDisposable {
    private id;
    readonly items: ExplorerItem[];
    private depth;
    private collapsed;
    static ID: number;
    private _index;
    private _labels;
    private _updateLabelDisposable;
    get index(): number;
    get count(): number;
    get current(): ExplorerItem;
    get currentId(): string;
    get labels(): HTMLElement[];
    private _onDidChange;
    readonly onDidChange: Event<void>;
    constructor(id: string, items: ExplorerItem[], templateData: IFileTemplateData, depth: number, collapsed: boolean);
    private updateLabels;
    previous(): void;
    next(): void;
    first(): void;
    last(): void;
    setIndex(index: number): void;
    updateCollapsed(collapsed: boolean): void;
    dispose(): void;
}
export interface IFileTemplateData {
    readonly templateDisposables: DisposableStore;
    readonly elementDisposables: DisposableStore;
    readonly label: IResourceLabel;
    readonly container: HTMLElement;
    readonly contribs: IExplorerFileContribution[];
    currentContext?: ExplorerItem;
}
export declare class FilesRenderer implements ICompressibleTreeRenderer<ExplorerItem, FuzzyScore, IFileTemplateData>, IListAccessibilityProvider<ExplorerItem>, IDisposable {
    private labels;
    private highlightTree;
    private updateWidth;
    private readonly contextViewService;
    private readonly themeService;
    private readonly configurationService;
    private readonly explorerService;
    private readonly labelService;
    private readonly contextService;
    private readonly contextMenuService;
    private readonly instantiationService;
    static readonly ID = "file";
    private config;
    private configListener;
    private compressedNavigationControllers;
    private _onDidChangeActiveDescendant;
    readonly onDidChangeActiveDescendant: Event<void>;
    constructor(container: HTMLElement, labels: ResourceLabels, highlightTree: IExplorerFindHighlightTree, updateWidth: (stat: ExplorerItem) => void, contextViewService: IContextViewService, themeService: IThemeService, configurationService: IConfigurationService, explorerService: IExplorerService, labelService: ILabelService, contextService: IWorkspaceContextService, contextMenuService: IContextMenuService, instantiationService: IInstantiationService);
    getWidgetAriaLabel(): string;
    get templateId(): string;
    renderTemplate(container: HTMLElement): IFileTemplateData;
    renderElement(node: ITreeNode<ExplorerItem, FuzzyScore>, index: number, templateData: IFileTemplateData): void;
    renderCompressedElements(node: ITreeNode<ICompressedTreeNode<ExplorerItem>, FuzzyScore>, index: number, templateData: IFileTemplateData, height: number | undefined): void;
    private renderStat;
    private renderInputBox;
    disposeElement(element: ITreeNode<ExplorerItem, FuzzyScore>, index: number, templateData: IFileTemplateData): void;
    disposeCompressedElements(node: ITreeNode<ICompressedTreeNode<ExplorerItem>, FuzzyScore>, index: number, templateData: IFileTemplateData): void;
    disposeTemplate(templateData: IFileTemplateData): void;
    getCompressedNavigationController(stat: ExplorerItem): ICompressedNavigationController[] | undefined;
    getAriaLabel(element: ExplorerItem): string;
    getAriaLevel(element: ExplorerItem): number;
    getActiveDescendantId(stat: ExplorerItem): string | undefined;
    dispose(): void;
}
export declare class FilesFilter implements ITreeFilter<ExplorerItem, FuzzyScore> {
    private readonly contextService;
    private readonly configurationService;
    private readonly explorerService;
    private readonly editorService;
    private readonly uriIdentityService;
    private readonly fileService;
    private hiddenExpressionPerRoot;
    private editorsAffectingFilter;
    private _onDidChange;
    private toDispose;
    private ignoreFileResourcesPerRoot;
    private ignoreTreesPerRoot;
    constructor(contextService: IWorkspaceContextService, configurationService: IConfigurationService, explorerService: IExplorerService, editorService: IEditorService, uriIdentityService: IUriIdentityService, fileService: IFileService);
    get onDidChange(): Event<void>;
    private updateConfiguration;
    private processIgnoreFile;
    filter(stat: ExplorerItem, parentVisibility: TreeVisibility): boolean;
    private isVisible;
    isIgnored(resource: URI, rootResource: URI, isDirectory: boolean): boolean;
    dispose(): void;
}
export declare class FileSorter implements ITreeSorter<ExplorerItem> {
    private readonly explorerService;
    private readonly contextService;
    constructor(explorerService: IExplorerService, contextService: IWorkspaceContextService);
    compare(statA: ExplorerItem, statB: ExplorerItem): number;
}
export declare class FileDragAndDrop implements ITreeDragAndDrop<ExplorerItem> {
    private isCollapsed;
    private explorerService;
    private editorService;
    private dialogService;
    private contextService;
    private fileService;
    private configurationService;
    private instantiationService;
    private workspaceEditingService;
    private readonly uriIdentityService;
    private static readonly CONFIRM_DND_SETTING_KEY;
    private compressedDragOverElement;
    private compressedDropTargetDisposable;
    private readonly disposables;
    private dropEnabled;
    constructor(isCollapsed: (item: ExplorerItem) => boolean, explorerService: IExplorerService, editorService: IEditorService, dialogService: IDialogService, contextService: IWorkspaceContextService, fileService: IFileService, configurationService: IConfigurationService, instantiationService: IInstantiationService, workspaceEditingService: IWorkspaceEditingService, uriIdentityService: IUriIdentityService);
    onDragOver(data: IDragAndDropData, target: ExplorerItem | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): boolean | ITreeDragOverReaction;
    private handleDragOver;
    getDragURI(element: ExplorerItem): string | null;
    getDragLabel(elements: ExplorerItem[], originalEvent: DragEvent): string | undefined;
    onDragStart(data: IDragAndDropData, originalEvent: DragEvent): void;
    drop(data: IDragAndDropData, target: ExplorerItem | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): Promise<void>;
    private handleExplorerDrop;
    private doHandleRootDrop;
    private doHandleExplorerDropOnCopy;
    private doHandleExplorerDropOnMove;
    private static getStatsFromDragAndDropData;
    private static getCompressedStatFromDragEvent;
    onDragEnd(): void;
    dispose(): void;
}
export declare function isCompressedFolderName(target: HTMLElement | EventTarget | Element | null): boolean;
export declare class ExplorerCompressionDelegate implements ITreeCompressionDelegate<ExplorerItem> {
    isIncompressible(stat: ExplorerItem): boolean;
}
export {};
