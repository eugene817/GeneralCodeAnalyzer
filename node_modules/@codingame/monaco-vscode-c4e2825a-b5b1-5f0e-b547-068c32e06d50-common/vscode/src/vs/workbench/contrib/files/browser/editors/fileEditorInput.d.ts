import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IFileEditorInput, Verbosity, GroupIdentifier, IMoveResult, EditorInputCapabilities, IEditorDescriptor, IEditorPane, IUntypedEditorInput, IFileEditorInputOptions } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput, IUntypedEditorOptions } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import { AbstractTextResourceEditorInput } from "@codingame/monaco-vscode-86d65fc6-30f9-5dca-9501-e249de688591-common/vscode/vs/workbench/common/editor/textResourceEditorInput";
import { ITextResourceEditorInput } from "@codingame/monaco-vscode-api/vscode/vs/platform/editor/common/editor";
import { BinaryEditorModel } from "../../../../common/editor/binaryEditorModel.js";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { ITextFileEditorModel, EncodingMode } from "@codingame/monaco-vscode-aff8bc9b-c6f8-578f-9c8a-f70d14f9c13c-common/vscode/vs/workbench/services/textfile/common/textfiles";
import { ITextFileService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/textfile/common/textfiles.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { ITextModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/resolverService.service";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { IFilesConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/filesConfiguration/common/filesConfigurationService.service";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { IPathService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/path/common/pathService.service";
import { ITextResourceConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/textResourceConfiguration.service";
import { IMarkdownString } from "@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent";
import { ICustomEditorLabelService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/customEditorLabelService.service";
export declare class FileEditorInput extends AbstractTextResourceEditorInput implements IFileEditorInput {
    private readonly instantiationService;
    private readonly textModelService;
    private readonly pathService;
    get typeId(): string;
    get editorId(): string | undefined;
    get capabilities(): EditorInputCapabilities;
    private preferredName;
    private preferredDescription;
    private preferredEncoding;
    private preferredLanguageId;
    private preferredContents;
    private forceOpenAs;
    private model;
    private cachedTextFileModelReference;
    private readonly modelListeners;
    constructor(resource: URI, preferredResource: URI | undefined, preferredName: string | undefined, preferredDescription: string | undefined, preferredEncoding: string | undefined, preferredLanguageId: string | undefined, preferredContents: string | undefined, instantiationService: IInstantiationService, textFileService: ITextFileService, textModelService: ITextModelService, labelService: ILabelService, fileService: IFileService, filesConfigurationService: IFilesConfigurationService, editorService: IEditorService, pathService: IPathService, textResourceConfigurationService: ITextResourceConfigurationService, customEditorLabelService: ICustomEditorLabelService);
    private onDidCreateTextFileModel;
    private registerModelListeners;
    getName(): string;
    setPreferredName(name: string): void;
    private allowLabelOverride;
    getPreferredName(): string | undefined;
    isReadonly(): boolean | IMarkdownString;
    getDescription(verbosity?: Verbosity): string | undefined;
    setPreferredDescription(description: string): void;
    getPreferredDescription(): string | undefined;
    getTitle(verbosity?: Verbosity): string;
    protected getPreferredTitle(): string | undefined;
    getEncoding(): string | undefined;
    getPreferredEncoding(): string | undefined;
    setEncoding(encoding: string, mode: EncodingMode): Promise<void>;
    setPreferredEncoding(encoding: string): void;
    getLanguageId(): string | undefined;
    getPreferredLanguageId(): string | undefined;
    setLanguageId(languageId: string, source?: string): void;
    setPreferredLanguageId(languageId: string): void;
    setPreferredContents(contents: string): void;
    setForceOpenAsText(): void;
    setForceOpenAsBinary(): void;
    isDirty(): boolean;
    isSaving(): boolean;
    prefersEditorPane<T extends IEditorDescriptor<IEditorPane>>(editorPanes: T[]): T | undefined;
    resolve(options?: IFileEditorInputOptions): Promise<ITextFileEditorModel | BinaryEditorModel>;
    private doResolveAsText;
    private doResolveAsBinary;
    isResolved(): boolean;
    rename(group: GroupIdentifier, target: URI): Promise<IMoveResult>;
    toUntyped(options?: IUntypedEditorOptions): ITextResourceEditorInput;
    matches(otherInput: EditorInput | IUntypedEditorInput): boolean;
    dispose(): void;
    private disposeModelReference;
}
