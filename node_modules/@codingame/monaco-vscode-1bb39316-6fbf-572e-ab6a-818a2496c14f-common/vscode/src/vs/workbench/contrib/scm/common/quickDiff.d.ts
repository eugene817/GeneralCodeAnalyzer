import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { LanguageSelector } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languageSelector";
import { LineRangeMapping } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/diff/rangeMapping";
import { IChange } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/diff/legacyLinesDiffComputer";
import { IColorTheme } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService";
import { Color } from "@codingame/monaco-vscode-api/vscode/vs/base/common/color";
export declare const minimapGutterModifiedBackground: string;
export declare const minimapGutterAddedBackground: string;
export declare const minimapGutterDeletedBackground: string;
export declare const overviewRulerModifiedForeground: string;
export declare const overviewRulerAddedForeground: string;
export declare const overviewRulerDeletedForeground: string;
export interface QuickDiffProvider {
    label: string;
    rootUri: URI | undefined;
    selector?: LanguageSelector;
    isSCM: boolean;
    visible: boolean;
    getOriginalResource(uri: URI): Promise<URI | null>;
}
export interface QuickDiff {
    label: string;
    originalResource: URI;
    isSCM: boolean;
    visible: boolean;
}
export interface QuickDiffChange {
    readonly label: string;
    readonly original: URI;
    readonly modified: URI;
    readonly change: IChange;
    readonly change2: LineRangeMapping;
}
export interface QuickDiffResult {
    readonly label: string;
    readonly original: URI;
    readonly modified: URI;
    readonly changes: IChange[];
    readonly changes2: LineRangeMapping[];
}
export declare enum ChangeType {
    Modify = 0,
    Add = 1,
    Delete = 2
}
export declare function getChangeType(change: IChange): ChangeType;
export declare function getChangeTypeColor(theme: IColorTheme, changeType: ChangeType): Color | undefined;
export declare function compareChanges(a: IChange, b: IChange): number;
export declare function getChangeHeight(change: IChange): number;
export declare function getModifiedEndLineNumber(change: IChange): number;
export declare function lineIntersectsChange(lineNumber: number, change: IChange): boolean;
