import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IMarkdownString } from "@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { ITextModel, ITextSnapshot } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/model";
import { IResolvableEditorModel } from "@codingame/monaco-vscode-api/vscode/vs/platform/editor/common/editor";
export interface ITextModelContentProvider {
    provideTextContent(resource: URI): Promise<ITextModel | null> | null;
}
export interface ITextEditorModel extends IResolvableEditorModel {
    readonly onWillDispose: Event<void>;
    readonly textEditorModel: ITextModel | null;
    createSnapshot(this: IResolvedTextEditorModel): ITextSnapshot;
    createSnapshot(this: ITextEditorModel): ITextSnapshot | null;
    isReadonly(): boolean | IMarkdownString;
    getLanguageId(): string | undefined;
    isDisposed(): boolean;
}
export interface IResolvedTextEditorModel extends ITextEditorModel {
    readonly textEditorModel: ITextModel;
}
export declare function isResolvedTextEditorModel(model: ITextEditorModel): model is IResolvedTextEditorModel;
