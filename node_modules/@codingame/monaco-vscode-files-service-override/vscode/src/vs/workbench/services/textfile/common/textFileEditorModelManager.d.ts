import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { TextFileEditorModel } from "@codingame/monaco-vscode-0c06bfba-d24d-5c4d-90cd-b40cefb7f811-common/vscode/vs/workbench/services/textfile/common/textFileEditorModel";
import { IDisposable, Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { ITextFileEditorModel, ITextFileEditorModelManager, ITextFileEditorModelResolveOrCreateOptions, ITextFileResolveEvent, ITextFileSaveEvent, ITextFileSaveParticipant } from "@codingame/monaco-vscode-aff8bc9b-c6f8-578f-9c8a-f70d14f9c13c-common/vscode/vs/workbench/services/textfile/common/textfiles";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { INotificationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/notification/common/notification.service";
import { IStoredFileWorkingCopySaveParticipantContext } from "@codingame/monaco-vscode-base-service-override/vscode/vs/workbench/services/workingCopy/common/workingCopyFileService";
import { IWorkingCopyFileService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/workingCopy/common/workingCopyFileService.service";
import { IUriIdentityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/uriIdentity/common/uriIdentity.service";
import { IProgress, IProgressStep } from "@codingame/monaco-vscode-api/vscode/vs/platform/progress/common/progress";
export declare class TextFileEditorModelManager extends Disposable implements ITextFileEditorModelManager {
    private readonly instantiationService;
    private readonly fileService;
    private readonly notificationService;
    private readonly workingCopyFileService;
    private readonly uriIdentityService;
    private readonly _onDidCreate;
    readonly onDidCreate: Event<TextFileEditorModel>;
    private readonly _onDidResolve;
    readonly onDidResolve: Event<ITextFileResolveEvent>;
    private readonly _onDidRemove;
    readonly onDidRemove: Event<URI>;
    private readonly _onDidChangeDirty;
    readonly onDidChangeDirty: Event<TextFileEditorModel>;
    private readonly _onDidChangeReadonly;
    readonly onDidChangeReadonly: Event<TextFileEditorModel>;
    private readonly _onDidChangeOrphaned;
    readonly onDidChangeOrphaned: Event<TextFileEditorModel>;
    private readonly _onDidSaveError;
    readonly onDidSaveError: Event<TextFileEditorModel>;
    private readonly _onDidSave;
    readonly onDidSave: Event<ITextFileSaveEvent>;
    private readonly _onDidRevert;
    readonly onDidRevert: Event<TextFileEditorModel>;
    private readonly _onDidChangeEncoding;
    readonly onDidChangeEncoding: Event<TextFileEditorModel>;
    private readonly mapResourceToModel;
    private readonly mapResourceToModelListeners;
    private readonly mapResourceToDisposeListener;
    private readonly mapResourceToPendingModelResolvers;
    private readonly modelResolveQueue;
    saveErrorHandler: {
        onSaveError(error: Error, model: ITextFileEditorModel): void;
    };
    get models(): TextFileEditorModel[];
    constructor(instantiationService: IInstantiationService, fileService: IFileService, notificationService: INotificationService, workingCopyFileService: IWorkingCopyFileService, uriIdentityService: IUriIdentityService);
    private registerListeners;
    private onDidFilesChange;
    private onDidChangeFileSystemProviderCapabilities;
    private onDidChangeFileSystemProviderRegistrations;
    private queueModelReloads;
    private queueModelReload;
    private readonly mapCorrelationIdToModelsToRestore;
    private onWillRunWorkingCopyFileOperation;
    private onDidFailWorkingCopyFileOperation;
    private onDidRunWorkingCopyFileOperation;
    get(resource: URI): TextFileEditorModel | undefined;
    private has;
    private reload;
    resolve(resource: URI, options?: ITextFileEditorModelResolveOrCreateOptions): Promise<TextFileEditorModel>;
    private doResolve;
    private joinPendingResolves;
    private doJoinPendingResolves;
    private registerModel;
    add(resource: URI, model: TextFileEditorModel): void;
    remove(resource: URI): void;
    private readonly saveParticipants;
    addSaveParticipant(participant: ITextFileSaveParticipant): IDisposable;
    runSaveParticipants(model: ITextFileEditorModel, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void>;
    canDispose(model: TextFileEditorModel): true | Promise<true>;
    private doCanDispose;
    dispose(): void;
}
