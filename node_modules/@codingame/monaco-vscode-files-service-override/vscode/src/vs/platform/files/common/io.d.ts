import { VSBuffer } from "@codingame/monaco-vscode-api/vscode/vs/base/common/buffer";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { IDataTransformer, IErrorTransformer, WriteableStream } from "@codingame/monaco-vscode-api/vscode/vs/base/common/stream";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IFileReadStreamOptions, IFileSystemProviderWithOpenReadWriteCloseCapability } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files";
export interface ICreateReadStreamOptions extends IFileReadStreamOptions {
    readonly bufferSize: number;
    readonly errorTransformer?: IErrorTransformer;
}
export declare function readFileIntoStream<T>(provider: IFileSystemProviderWithOpenReadWriteCloseCapability, resource: URI, target: WriteableStream<T>, transformer: IDataTransformer<VSBuffer, T>, options: ICreateReadStreamOptions, token: CancellationToken): Promise<void>;
