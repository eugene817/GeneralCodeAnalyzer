
import { MarkdownToken } from './markdownToken.js';
import { Range } from '@codingame/monaco-vscode-api/vscode/vs/editor/common/core/range';
import { assert } from '@codingame/monaco-vscode-api/vscode/vs/base/common/assert';

class MarkdownLink extends MarkdownToken {
    constructor(
    lineNumber,
    columnNumber,
    caption,
    reference) {
        assert(!isNaN(lineNumber), `The line number must not be a NaN.`);
        assert(lineNumber > 0, `The line number must be >= 1, got "${lineNumber}".`);
        assert(columnNumber > 0, `The column number must be >= 1, got "${columnNumber}".`);
        assert(caption[0] === '[' && caption[caption.length - 1] === ']', `The caption must be enclosed in square brackets, got "${caption}".`);
        assert(reference[0] === '(' && reference[reference.length - 1] === ')', `The reference must be enclosed in parentheses, got "${reference}".`);
        super(( new Range(
            lineNumber,
            columnNumber,
            lineNumber,
            columnNumber + caption.length + reference.length
        )));
        this.caption = caption;
        this.reference = reference;
        try {
            ( new URL(this.path));
            this.isURL = true;
        }
        catch {
            this.isURL = false;
        }
    }
    get text() {
        return `${this.caption}${this.reference}`;
    }
    get path() {
        return this.reference.slice(1, this.reference.length - 1);
    }
    equals(other) {
        if (!super.sameRange(other.range)) {
            return false;
        }
        if (!(other instanceof MarkdownLink)) {
            return false;
        }
        return this.text === other.text;
    }
    get linkRange() {
        if (this.path.length === 0) {
            return undefined;
        }
        const { range } = this;
        const startColumn = range.startColumn + this.caption.length + 1;
        const endColumn = startColumn + this.path.length;
        return ( new Range(range.startLineNumber, startColumn, range.endLineNumber, endColumn));
    }
    toString() {
        return `md-link("${this.text}")${this.range}`;
    }
}

export { MarkdownLink };
