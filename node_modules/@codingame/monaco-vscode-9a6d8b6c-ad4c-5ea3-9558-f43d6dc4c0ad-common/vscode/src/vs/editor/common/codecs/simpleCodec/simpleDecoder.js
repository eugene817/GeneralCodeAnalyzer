
import { Hash } from './tokens/hash.js';
import { Colon } from './tokens/colon.js';
import { FormFeed } from './tokens/formFeed.js';
import { Tab } from './tokens/tab.js';
import { Word } from './tokens/word.js';
import { VerticalTab } from './tokens/verticalTab.js';
import { Space } from './tokens/space.js';
import { NewLine } from '../linesCodec/tokens/newLine.js';
import { LeftBracket, RightBracket } from './tokens/brackets.js';
import { CarriageReturn } from '../linesCodec/tokens/carriageReturn.js';
import { LinesDecoder } from '../linesCodec/linesDecoder.js';
import { BaseDecoder } from '../../../../base/common/codecs/baseDecoder.js';
import { LeftParenthesis, RightParenthesis } from './tokens/parentheses.js';

const WELL_KNOWN_TOKENS = [
    Space, Tab, VerticalTab, FormFeed, LeftBracket, RightBracket,
    LeftParenthesis, RightParenthesis, Colon, Hash,
];
const WORD_STOP_CHARACTERS = [
    Space.symbol, Tab.symbol, VerticalTab.symbol, FormFeed.symbol,
    LeftBracket.symbol, RightBracket.symbol, LeftParenthesis.symbol,
    RightParenthesis.symbol, Colon.symbol, Hash.symbol,
];
class SimpleDecoder extends BaseDecoder {
    constructor(stream) {
        super(( new LinesDecoder(stream)));
    }
    onStreamData(token) {
        if (token instanceof CarriageReturn || token instanceof NewLine) {
            this._onData.fire(token);
            return;
        }
        let i = 0;
        while (i < token.text.length) {
            const columnNumber = i + 1;
            const tokenConstructor = WELL_KNOWN_TOKENS
                .find((wellKnownToken) => {
                return wellKnownToken.symbol === token.text[i];
            });
            if (tokenConstructor) {
                this._onData.fire(tokenConstructor.newOnLine(token, columnNumber));
                i++;
                continue;
            }
            let word = '';
            while (i < token.text.length && !(WORD_STOP_CHARACTERS.includes(token.text[i]))) {
                word += token.text[i];
                i++;
            }
            this._onData.fire(Word.newOnLine(word, token, columnNumber));
        }
    }
}

export { SimpleDecoder };
