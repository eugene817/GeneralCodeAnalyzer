import { BaseToken } from "../baseToken.js";
export interface IAcceptTokenResult {
    result: "success" | "failure";
    wasTokenConsumed: boolean;
}
export interface IAcceptTokenSuccess<T> extends IAcceptTokenResult {
    result: "success";
    nextParser: T;
}
export interface IAcceptTokenFailure extends IAcceptTokenResult {
    result: "failure";
}
export type TAcceptTokenResult<T> = IAcceptTokenSuccess<T> | IAcceptTokenFailure;
export declare abstract class ParserBase<TToken extends BaseToken, TNextObject> {
    protected readonly currentTokens: TToken[];
    constructor(currentTokens?: TToken[]);
    get tokens(): readonly TToken[];
    abstract accept(token: TToken): TAcceptTokenResult<TNextObject>;
}
