
import { Disposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';

class AsyncDecoder extends Disposable {
    constructor(decoder) {
        super();
        this.decoder = decoder;
        this.messages = [];
        this._register(decoder);
    }
    async *[Symbol.asyncIterator]() {
        const callback = (data) => {
            if (data !== undefined) {
                this.messages.push(data);
            }
            else {
                this.decoder.removeListener('data', callback);
                this.decoder.removeListener('end', callback);
            }
            if (this.resolveOnNewEvent) {
                this.resolveOnNewEvent();
                delete this.resolveOnNewEvent;
            }
        };
        this.decoder.on('data', callback);
        this.decoder.on('end', callback);
        this.decoder.start();
        while (true) {
            const maybeMessage = this.messages.shift();
            if (maybeMessage !== undefined) {
                yield maybeMessage;
                continue;
            }
            if (this.decoder.ended) {
                this.dispose();
                return null;
            }
            await ( new Promise((resolve) => {
                this.resolveOnNewEvent = resolve;
            }));
        }
    }
}

export { AsyncDecoder };
