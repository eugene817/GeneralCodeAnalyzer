
import { assertDefined } from '@codingame/monaco-vscode-api/vscode/vs/base/common/types';
import { DisposableMap } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { CancellationToken, CancellationTokenSource } from '@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation';

function cancelPreviousCalls(_proto, methodName, descriptor) {
    const originalMethod = descriptor.value;
    assertDefined(originalMethod, `Method '${methodName}' is not defined.`);
    const objectRecords = ( new WeakMap());
    descriptor.value = function (...args) {
        let record = objectRecords.get(this);
        if (!record) {
            record = ( new DisposableMap());
            objectRecords.set(this, record);
            this._register({
                dispose: () => {
                    objectRecords.get(this)?.dispose();
                    objectRecords.delete(this);
                },
            });
        }
        record.get(methodName)?.dispose(true);
        const lastArgument = (args.length > 0)
            ? args[args.length - 1]
            : undefined;
        const token = CancellationToken.isCancellationToken(lastArgument)
            ? lastArgument
            : undefined;
        const cancellationSource = ( new CancellationTokenSource(token));
        record.set(methodName, cancellationSource);
        if (CancellationToken.isCancellationToken(lastArgument)) {
            args[args.length - 1] = cancellationSource.token;
        }
        else {
            args.push(cancellationSource.token);
        }
        return originalMethod.call(this, ...args);
    };
    return descriptor;
}

export { cancelPreviousCalls };
