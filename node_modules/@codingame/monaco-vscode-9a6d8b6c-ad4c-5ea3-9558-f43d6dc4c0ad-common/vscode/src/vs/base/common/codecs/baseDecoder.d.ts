import { Emitter } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { ReadableStream } from "@codingame/monaco-vscode-api/vscode/vs/base/common/stream";
import { ObservableDisposable } from "../observableDisposable.js";
export type TStreamListenerNames = "data" | "error" | "end";
export declare abstract class BaseDecoder<T extends NonNullable<unknown>, K extends NonNullable<unknown> = NonNullable<unknown>> extends ObservableDisposable implements ReadableStream<T> {
    protected readonly stream: ReadableStream<K>;
    private _ended;
    protected readonly _onData: Emitter<T>;
    private readonly _onEnd;
    private readonly _onError;
    private readonly _listeners;
    protected abstract onStreamData(data: K): void;
    constructor(stream: ReadableStream<K>);
    private started;
    private settledPromise;
    get settled(): Promise<void>;
    start(): this;
    get ended(): boolean;
    private tryOnStreamData;
    on(event: "data", callback: (data: T) => void): void;
    on(event: "error", callback: (err: Error) => void): void;
    on(event: "end", callback: () => void): void;
    onData(callback: (data: T) => void): void;
    onError(callback: (error: Error) => void): void;
    onEnd(callback: () => void): void;
    removeAllListeners(): void;
    pause(): void;
    resume(): void;
    destroy(): void;
    removeListener(event: string, callback: Function): void;
    protected onStreamEnd(): void;
    protected onStreamError(error: Error): void;
    consumeAll(): Promise<T[]>;
    [Symbol.asyncIterator](): AsyncIterator<T | null>;
    dispose(): void;
}
