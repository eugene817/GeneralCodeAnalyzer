
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { Disposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';

class ObservableDisposable extends Disposable {
    constructor() {
        super(...arguments);
        this._onDispose = this._register(( new Emitter()));
        this._disposed = false;
    }
    onDispose(callback) {
        if (this.disposed) {
            callback();
            return this;
        }
        this._register(this._onDispose.event(callback));
        return this;
    }
    get disposed() {
        return this._disposed;
    }
    dispose() {
        if (this.disposed) {
            return;
        }
        this._disposed = true;
        this._onDispose.fire();
        super.dispose();
    }
    assertNotDisposed(error) {
        assertNotDisposed(this, error);
    }
}
function assertNotDisposed(object, error) {
    if (!object.disposed) {
        return;
    }
    const errorToThrow = typeof error === 'string'
        ? ( new Error(error))
        : error;
    throw errorToThrow;
}

export { ObservableDisposable, assertNotDisposed };
