import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IMarkdownString } from "@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent";
import { Disposable, IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IObservable, ITransaction } from "@codingame/monaco-vscode-api/vscode/vs/base/common/observable";
import { ThemeIcon } from "@codingame/monaco-vscode-api/vscode/vs/base/common/themables";
import { URI, UriComponents, UriDto } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IOffsetRange } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/core/offsetRange";
import { IRange } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/core/range";
import { Location, SymbolKind, TextEdit } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { IMarker, MarkerSeverity } from "@codingame/monaco-vscode-api/vscode/vs/platform/markers/common/markers";
import { ICellEditOperation } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookCommon";
import { ChatAgentLocation, IChatAgentCommand, IChatAgentData, IChatAgentResult, IChatWelcomeMessageContent } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents";
import { IChatAgentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents.service";
import { IParsedChatRequest } from "./chatParserTypes.js";
import { ChatAgentVoteDirection, ChatAgentVoteDownReason, IChatAgentMarkdownContentWithVulnerability, IChatCodeCitation, IChatCommandButton, IChatConfirmation, IChatContentInlineReference, IChatContentReference, IChatFollowup, IChatLocationData, IChatMarkdownContent, IChatNotebookEdit, IChatProgress, IChatProgressMessage, IChatResponseCodeblockUriPart, IChatResponseProgressFileTreeData, IChatTask, IChatTextEdit, IChatToolInvocation, IChatToolInvocationSerialized, IChatTreeData, IChatUndoStop, IChatUsedContext, IChatWarningMessage } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatService";
import { IChatRequestVariableValue } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatVariables";
export interface IBaseChatRequestVariableEntry {
    id: string;
    fullName?: string;
    icon?: ThemeIcon;
    name: string;
    isMarkedReadonly?: boolean;
    modelDescription?: string;
    range?: IOffsetRange;
    value: IChatRequestVariableValue;
    references?: IChatContentReference[];
    mimeType?: string;
    kind?: never;
    isFile?: boolean;
    isDirectory?: boolean;
    isTool?: boolean;
    isImage?: boolean;
    isOmitted?: boolean;
}
export interface IChatRequestImplicitVariableEntry extends Omit<IBaseChatRequestVariableEntry, "kind"> {
    readonly kind: "implicit";
    readonly isFile: true;
    readonly value: URI | Location | undefined;
    readonly isSelection: boolean;
    enabled: boolean;
}
export interface IChatRequestPasteVariableEntry extends Omit<IBaseChatRequestVariableEntry, "kind"> {
    readonly kind: "paste";
    code: string;
    language: string;
    pastedLines: string;
    fileName: string;
    copiedFrom: {
        readonly uri: URI;
        readonly range: IRange;
    } | undefined;
}
export interface ISymbolVariableEntry extends Omit<IBaseChatRequestVariableEntry, "kind"> {
    readonly kind: "symbol";
    readonly value: Location;
    readonly symbolKind: SymbolKind;
}
export interface ICommandResultVariableEntry extends Omit<IBaseChatRequestVariableEntry, "kind"> {
    readonly kind: "command";
}
export interface ILinkVariableEntry extends Omit<IBaseChatRequestVariableEntry, "kind"> {
    readonly kind: "link";
    readonly value: URI;
}
export interface IImageVariableEntry extends Omit<IBaseChatRequestVariableEntry, "kind"> {
    readonly kind: "image";
    readonly isPasted?: boolean;
    readonly isURL?: boolean;
}
export interface IDiagnosticVariableEntryFilterData {
    readonly owner?: string;
    readonly problemMessage?: string;
    readonly filterUri?: URI;
    readonly filterSeverity?: MarkerSeverity;
    readonly filterRange?: IRange;
}
export declare namespace IDiagnosticVariableEntryFilterData {
    const icon: ThemeIcon;
    function fromMarker(marker: IMarker): IDiagnosticVariableEntryFilterData;
    function toEntry(data: IDiagnosticVariableEntryFilterData): IDiagnosticVariableEntry;
    function id(data: IDiagnosticVariableEntryFilterData): string;
    function label(data: IDiagnosticVariableEntryFilterData): string;
}
export interface IDiagnosticVariableEntry extends Omit<IBaseChatRequestVariableEntry, "kind">, IDiagnosticVariableEntryFilterData {
    readonly kind: "diagnostic";
}
export type IChatRequestVariableEntry = IChatRequestImplicitVariableEntry | IChatRequestPasteVariableEntry | ISymbolVariableEntry | ICommandResultVariableEntry | ILinkVariableEntry | IBaseChatRequestVariableEntry | IDiagnosticVariableEntry | IImageVariableEntry;
export declare function isImplicitVariableEntry(obj: IChatRequestVariableEntry): obj is IChatRequestImplicitVariableEntry;
export declare function isPasteVariableEntry(obj: IChatRequestVariableEntry): obj is IChatRequestPasteVariableEntry;
export declare function isLinkVariableEntry(obj: IChatRequestVariableEntry): obj is ILinkVariableEntry;
export declare function isImageVariableEntry(obj: IChatRequestVariableEntry): obj is IImageVariableEntry;
export declare function isDiagnosticsVariableEntry(obj: IChatRequestVariableEntry): obj is IDiagnosticVariableEntry;
export declare function isChatRequestVariableEntry(obj: unknown): obj is IChatRequestVariableEntry;
export interface IChatRequestVariableData {
    variables: IChatRequestVariableEntry[];
}
export interface IChatRequestModel {
    readonly id: string;
    readonly timestamp: number;
    readonly username: string;
    readonly avatarIconUri?: URI;
    readonly session: IChatModel;
    readonly message: IParsedChatRequest;
    readonly attempt: number;
    readonly variableData: IChatRequestVariableData;
    readonly confirmation?: string;
    readonly locationData?: IChatLocationData;
    readonly attachedContext?: IChatRequestVariableEntry[];
    readonly isCompleteAddedRequest: boolean;
    readonly response?: IChatResponseModel;
    shouldBeRemovedOnSend: IChatRequestDisablement | undefined;
}
export interface IChatTextEditGroupState {
    sha1: string;
    applied: number;
}
export interface IChatTextEditGroup {
    uri: URI;
    edits: TextEdit[][];
    state?: IChatTextEditGroupState;
    kind: "textEditGroup";
    done: boolean | undefined;
}
export declare function isCellTextEditOperation(value: unknown): value is ICellTextEditOperation;
export interface ICellTextEditOperation {
    edit: TextEdit;
    uri: URI;
}
export interface IChatNotebookEditGroup {
    uri: URI;
    edits: (ICellTextEditOperation | ICellEditOperation)[];
    state?: IChatTextEditGroupState;
    kind: "notebookEditGroup";
    done: boolean | undefined;
}
export type IChatProgressHistoryResponseContent = IChatMarkdownContent | IChatAgentMarkdownContentWithVulnerability | IChatResponseCodeblockUriPart | IChatTreeData | IChatContentInlineReference | IChatProgressMessage | IChatCommandButton | IChatWarningMessage | IChatTask | IChatTextEditGroup | IChatNotebookEditGroup | IChatConfirmation;
export type IChatProgressResponseContent = IChatProgressHistoryResponseContent | IChatToolInvocation | IChatToolInvocationSerialized | IChatUndoStop;
export declare function toChatHistoryContent(content: ReadonlyArray<IChatProgressResponseContent>): IChatProgressHistoryResponseContent[];
export type IChatProgressRenderableResponseContent = Exclude<IChatProgressResponseContent, IChatContentInlineReference | IChatAgentMarkdownContentWithVulnerability | IChatResponseCodeblockUriPart>;
export interface IResponse {
    readonly value: ReadonlyArray<IChatProgressResponseContent>;
    getMarkdown(): string;
    toString(): string;
}
export interface IChatResponseModel {
    readonly onDidChange: Event<ChatResponseModelChangeReason>;
    readonly id: string;
    readonly requestId: string;
    readonly username: string;
    readonly avatarIcon?: ThemeIcon | URI;
    readonly session: IChatModel;
    readonly agent?: IChatAgentData;
    readonly usedContext: IChatUsedContext | undefined;
    readonly contentReferences: ReadonlyArray<IChatContentReference>;
    readonly codeCitations: ReadonlyArray<IChatCodeCitation>;
    readonly progressMessages: ReadonlyArray<IChatProgressMessage>;
    readonly slashCommand?: IChatAgentCommand;
    readonly agentOrSlashCommandDetected: boolean;
    readonly response: IResponse;
    readonly entireResponse: IResponse;
    readonly isComplete: boolean;
    readonly isCanceled: boolean;
    readonly isPaused: IObservable<boolean>;
    readonly isPendingConfirmation: boolean;
    readonly shouldBeRemovedOnSend: IChatRequestDisablement | undefined;
    readonly isCompleteAddedRequest: boolean;
    readonly isStale: boolean;
    readonly vote: ChatAgentVoteDirection | undefined;
    readonly voteDownReason: ChatAgentVoteDownReason | undefined;
    readonly followups?: IChatFollowup[] | undefined;
    readonly result?: IChatAgentResult;
    addUndoStop(undoStop: IChatUndoStop): void;
    setVote(vote: ChatAgentVoteDirection): void;
    setVoteDownReason(reason: ChatAgentVoteDownReason | undefined): void;
    setEditApplied(edit: IChatTextEditGroup, editCount: number): boolean;
    setPaused(isPause: boolean, tx?: ITransaction): void;
    finalizeUndoState(): void;
}
export type ChatResponseModelChangeReason = {
    reason: "other";
} | {
    reason: "undoStop";
    id: string;
};
export declare class ChatRequestModel implements IChatRequestModel {
    private _session;
    readonly message: IParsedChatRequest;
    private _variableData;
    readonly timestamp: number;
    private _attempt;
    private _confirmation?;
    private _locationData?;
    private _attachedContext?;
    readonly isCompleteAddedRequest: boolean;
    response: ChatResponseModel | undefined;
    readonly id: string;
    get session(): ChatModel;
    shouldBeRemovedOnSend: IChatRequestDisablement | undefined;
    get username(): string;
    get avatarIconUri(): URI | undefined;
    get attempt(): number;
    get variableData(): IChatRequestVariableData;
    set variableData(v: IChatRequestVariableData);
    get confirmation(): string | undefined;
    get locationData(): IChatLocationData | undefined;
    get attachedContext(): IChatRequestVariableEntry[] | undefined;
    constructor(_session: ChatModel, message: IParsedChatRequest, _variableData: IChatRequestVariableData, timestamp: number, _attempt?: number, _confirmation?: string | undefined, _locationData?: IChatLocationData | undefined, _attachedContext?: IChatRequestVariableEntry[] | undefined, isCompleteAddedRequest?: boolean, restoredId?: string);
    adoptTo(session: ChatModel): void;
}
declare class AbstractResponse implements IResponse {
    protected _responseParts: IChatProgressResponseContent[];
    protected _responseRepr: string;
    protected _markdownContent: string;
    get value(): IChatProgressResponseContent[];
    constructor(value: IChatProgressResponseContent[]);
    toString(): string;
    getMarkdown(): string;
    protected _updateRepr(): void;
    private partsToRepr;
    private inlineRefToRepr;
    private uriToRepr;
}
export declare class Response extends AbstractResponse implements IDisposable {
    private _onDidChangeValue;
    get onDidChangeValue(): Event<void>;
    private _citations;
    constructor(value: IMarkdownString | ReadonlyArray<IMarkdownString | IChatResponseProgressFileTreeData | IChatContentInlineReference | IChatAgentMarkdownContentWithVulnerability | IChatResponseCodeblockUriPart>);
    dispose(): void;
    clear(): void;
    updateContent(progress: IChatProgressResponseContent | IChatTextEdit | IChatNotebookEdit | IChatTask | IChatUndoStop, quiet?: boolean): void;
    addCitation(citation: IChatCodeCitation): void;
    protected _updateRepr(quiet?: boolean): void;
}
export declare class ChatResponseModel extends Disposable implements IChatResponseModel {
    private _session;
    private _agent;
    private _slashCommand;
    readonly requestId: string;
    private _isComplete;
    private _isCanceled;
    private _vote?;
    private _voteDownReason?;
    private _result?;
    readonly isCompleteAddedRequest: boolean;
    private _shouldBeRemovedOnSend;
    private readonly _onDidChange;
    readonly onDidChange: Event<ChatResponseModelChangeReason>;
    readonly id: string;
    get session(): ChatModel;
    get shouldBeRemovedOnSend(): IChatRequestDisablement | undefined;
    get isComplete(): boolean;
    set shouldBeRemovedOnSend(disablement: IChatRequestDisablement | undefined);
    get isCanceled(): boolean;
    get vote(): ChatAgentVoteDirection | undefined;
    get voteDownReason(): ChatAgentVoteDownReason | undefined;
    get followups(): IChatFollowup[] | undefined;
    private _response;
    private _finalizedResponse?;
    get entireResponse(): IResponse;
    get result(): IChatAgentResult | undefined;
    get username(): string;
    get avatarIcon(): ThemeIcon | URI | undefined;
    private _followups?;
    get agent(): IChatAgentData | undefined;
    get slashCommand(): IChatAgentCommand | undefined;
    private _agentOrSlashCommandDetected;
    get agentOrSlashCommandDetected(): boolean;
    private _usedContext;
    get usedContext(): IChatUsedContext | undefined;
    private readonly _contentReferences;
    get contentReferences(): ReadonlyArray<IChatContentReference>;
    private readonly _codeCitations;
    get codeCitations(): ReadonlyArray<IChatCodeCitation>;
    private readonly _progressMessages;
    get progressMessages(): ReadonlyArray<IChatProgressMessage>;
    private _isStale;
    get isStale(): boolean;
    private _isPaused;
    get isPaused(): IObservable<boolean>;
    get isPendingConfirmation(): boolean;
    private _responseView?;
    get response(): IResponse;
    private bufferedPauseContent?;
    constructor(_response: IMarkdownString | ReadonlyArray<IMarkdownString | IChatResponseProgressFileTreeData | IChatContentInlineReference | IChatAgentMarkdownContentWithVulnerability | IChatResponseCodeblockUriPart>, _session: ChatModel, _agent: IChatAgentData | undefined, _slashCommand: IChatAgentCommand | undefined, requestId: string, _isComplete?: boolean, _isCanceled?: boolean, _vote?: ChatAgentVoteDirection | undefined, _voteDownReason?: ChatAgentVoteDownReason | undefined, _result?: IChatAgentResult | undefined, followups?: ReadonlyArray<IChatFollowup>, isCompleteAddedRequest?: boolean, _shouldBeRemovedOnSend?: IChatRequestDisablement | undefined, restoredId?: string);
    updateContent(responsePart: IChatProgressResponseContent | IChatTextEdit | IChatNotebookEdit, quiet?: boolean): void;
    addUndoStop(undoStop: IChatUndoStop): void;
    applyReference(progress: IChatUsedContext | IChatContentReference): void;
    applyCodeCitation(progress: IChatCodeCitation): void;
    setAgent(agent: IChatAgentData, slashCommand?: IChatAgentCommand): void;
    setResult(result: IChatAgentResult): void;
    complete(): void;
    cancel(): void;
    setFollowups(followups: IChatFollowup[] | undefined): void;
    setVote(vote: ChatAgentVoteDirection): void;
    setVoteDownReason(reason: ChatAgentVoteDownReason | undefined): void;
    setEditApplied(edit: IChatTextEditGroup, editCount: number): boolean;
    adoptTo(session: ChatModel): void;
    setPaused(isPause: boolean, tx?: ITransaction): void;
    finalizeUndoState(): void;
    private bufferWhenPaused;
}
export declare enum ChatPauseState {
    NotPausable = 0,
    Paused = 1,
    Unpaused = 2
}
export interface IChatRequestDisablement {
    requestId: string;
    afterUndoStop?: string;
}
export interface IChatModel {
    readonly onDidDispose: Event<void>;
    readonly onDidChange: Event<IChatChangeEvent>;
    readonly sessionId: string;
    readonly initState: ChatModelInitState;
    readonly initialLocation: ChatAgentLocation;
    readonly title: string;
    readonly welcomeMessage: IChatWelcomeMessageContent | undefined;
    readonly sampleQuestions: IChatFollowup[] | undefined;
    readonly requestInProgress: boolean;
    readonly requestPausibility: ChatPauseState;
    readonly inputPlaceholder?: string;
    toggleLastRequestPaused(paused?: boolean): void;
    setDisabledRequests(requestIds: IChatRequestDisablement[]): void;
    getRequests(): IChatRequestModel[];
    toExport(): IExportableChatData;
    toJSON(): ISerializableChatData;
}
export interface ISerializableChatsData {
    [sessionId: string]: ISerializableChatData;
}
export type ISerializableChatAgentData = UriDto<IChatAgentData>;
export interface ISerializableChatRequestData {
    requestId: string;
    message: string | IParsedChatRequest;
    variableData: IChatRequestVariableData;
    response: ReadonlyArray<IMarkdownString | IChatResponseProgressFileTreeData | IChatContentInlineReference | IChatAgentMarkdownContentWithVulnerability> | undefined;
    isHidden?: boolean;
    shouldBeRemovedOnSend?: IChatRequestDisablement;
    responseId?: string;
    agent?: ISerializableChatAgentData;
    workingSet?: UriComponents[];
    slashCommand?: IChatAgentCommand;
    result?: IChatAgentResult;
    followups: ReadonlyArray<IChatFollowup> | undefined;
    isCanceled: boolean | undefined;
    vote: ChatAgentVoteDirection | undefined;
    voteDownReason?: ChatAgentVoteDownReason;
    usedContext?: IChatUsedContext;
    contentReferences?: ReadonlyArray<IChatContentReference>;
    codeCitations?: ReadonlyArray<IChatCodeCitation>;
    timestamp?: number;
}
export interface IExportableChatData {
    initialLocation: ChatAgentLocation | undefined;
    requests: ISerializableChatRequestData[];
    requesterUsername: string;
    responderUsername: string;
    requesterAvatarIconUri: UriComponents | undefined;
    responderAvatarIconUri: ThemeIcon | UriComponents | undefined;
}
export interface ISerializableChatData1 extends IExportableChatData {
    sessionId: string;
    creationDate: number;
    isImported: boolean;
    isNew?: boolean;
}
export interface ISerializableChatData2 extends ISerializableChatData1 {
    version: 2;
    lastMessageDate: number;
    computedTitle: string | undefined;
}
export interface ISerializableChatData3 extends Omit<ISerializableChatData2, "version" | "computedTitle"> {
    version: 3;
    customTitle: string | undefined;
}
export type ISerializableChatData = ISerializableChatData3;
export type ISerializableChatDataIn = ISerializableChatData1 | ISerializableChatData2 | ISerializableChatData3;
export declare function normalizeSerializableChatData(raw: ISerializableChatDataIn): ISerializableChatData;
export declare function isExportableSessionData(obj: unknown): obj is IExportableChatData;
export declare function isSerializableSessionData(obj: unknown): obj is ISerializableChatData;
export type IChatChangeEvent = IChatInitEvent | IChatAddRequestEvent | IChatChangedRequestEvent | IChatRemoveRequestEvent | IChatAddResponseEvent | IChatSetAgentEvent | IChatMoveEvent | IChatSetHiddenEvent | IChatCompletedRequestEvent;
export interface IChatAddRequestEvent {
    kind: "addRequest";
    request: IChatRequestModel;
}
export interface IChatChangedRequestEvent {
    kind: "changedRequest";
    request: IChatRequestModel;
}
export interface IChatCompletedRequestEvent {
    kind: "completedRequest";
    request: IChatRequestModel;
}
export interface IChatAddResponseEvent {
    kind: "addResponse";
    response: IChatResponseModel;
}
export declare enum ChatRequestRemovalReason {
    Removal = 0,
    Resend = 1,
    Adoption = 2
}
export interface IChatRemoveRequestEvent {
    kind: "removeRequest";
    requestId: string;
    responseId?: string;
    reason: ChatRequestRemovalReason;
}
export interface IChatSetHiddenEvent {
    kind: "setHidden";
    hiddenRequestIds: readonly IChatRequestDisablement[];
}
export interface IChatMoveEvent {
    kind: "move";
    target: URI;
    range: IRange;
}
export interface IChatSetAgentEvent {
    kind: "setAgent";
    agent: IChatAgentData;
    command?: IChatAgentCommand;
}
export interface IChatInitEvent {
    kind: "initialize";
}
export declare enum ChatModelInitState {
    Created = 0,
    Initializing = 1,
    Initialized = 2
}
export declare class ChatModel extends Disposable implements IChatModel {
    private readonly initialData;
    private readonly _initialLocation;
    private readonly logService;
    private readonly chatAgentService;
    static getDefaultTitle(requests: (ISerializableChatRequestData | IChatRequestModel)[]): string;
    private readonly _onDidDispose;
    readonly onDidDispose: Event<void>;
    private readonly _onDidChange;
    readonly onDidChange: Event<IChatChangeEvent>;
    private _requests;
    private _initState;
    private _isInitializedDeferred;
    private _welcomeMessage;
    get welcomeMessage(): IChatWelcomeMessageContent | undefined;
    private _sampleQuestions;
    get sampleQuestions(): IChatFollowup[] | undefined;
    private _sessionId;
    get sessionId(): string;
    get requestInProgress(): boolean;
    get requestPausibility(): ChatPauseState;
    get hasRequests(): boolean;
    get lastRequest(): ChatRequestModel | undefined;
    private _creationDate;
    get creationDate(): number;
    private _lastMessageDate;
    get lastMessageDate(): number;
    private get _defaultAgent();
    get requesterUsername(): string;
    get responderUsername(): string;
    private readonly _initialRequesterAvatarIconUri;
    get requesterAvatarIconUri(): URI | undefined;
    private readonly _initialResponderAvatarIconUri;
    get responderAvatarIcon(): ThemeIcon | URI | undefined;
    get initState(): ChatModelInitState;
    private _isImported;
    get isImported(): boolean;
    private _customTitle;
    get customTitle(): string | undefined;
    get title(): string;
    get initialLocation(): ChatAgentLocation;
    constructor(initialData: ISerializableChatData | IExportableChatData | undefined, _initialLocation: ChatAgentLocation, logService: ILogService, chatAgentService: IChatAgentService);
    private _deserialize;
    private reviveVariableData;
    private getParsedRequestFromString;
    toggleLastRequestPaused(isPaused?: boolean): void;
    startInitialize(): void;
    deinitialize(): void;
    initialize(welcomeMessage?: IChatWelcomeMessageContent, sampleQuestions?: IChatFollowup[]): void;
    setInitializationError(error: Error): void;
    waitForInitialization(): Promise<void>;
    getRequests(): ChatRequestModel[];
    private _checkpoint;
    get checkpoint(): ChatRequestModel | undefined;
    setDisabledRequests(requestIds: IChatRequestDisablement[]): void;
    addRequest(message: IParsedChatRequest, variableData: IChatRequestVariableData, attempt: number, chatAgent?: IChatAgentData, slashCommand?: IChatAgentCommand, confirmation?: string, locationData?: IChatLocationData, attachments?: IChatRequestVariableEntry[], workingSet?: URI[], isCompleteAddedRequest?: boolean): ChatRequestModel;
    setCustomTitle(title: string): void;
    updateRequest(request: ChatRequestModel, variableData: IChatRequestVariableData): void;
    adoptRequest(request: ChatRequestModel): void;
    acceptResponseProgress(request: ChatRequestModel, progress: IChatProgress, quiet?: boolean): void;
    removeRequest(id: string, reason?: ChatRequestRemovalReason): void;
    cancelRequest(request: ChatRequestModel): void;
    setResponse(request: ChatRequestModel, result: IChatAgentResult): void;
    completeResponse(request: ChatRequestModel): void;
    setFollowups(request: ChatRequestModel, followups: IChatFollowup[] | undefined): void;
    setResponseModel(request: ChatRequestModel, response: ChatResponseModel): void;
    toExport(): IExportableChatData;
    toJSON(): ISerializableChatData;
    dispose(): void;
}
export declare function updateRanges(variableData: IChatRequestVariableData, diff: number): IChatRequestVariableData;
export declare function canMergeMarkdownStrings(md1: IMarkdownString, md2: IMarkdownString): boolean;
export declare function appendMarkdownString(md1: IMarkdownString, md2: IMarkdownString | string): IMarkdownString;
export declare function getCodeCitationsMessage(citations: ReadonlyArray<IChatCodeCitation>): string;
export {};
