import { ServicesAccessor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorExtensions";
import { Action2, IAction2Options } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { IChatEditingSession } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatEditingService";
import { IChatWidget } from "../chat.js";
export interface IEditingSessionActionContext {
    widget?: IChatWidget;
}
export declare abstract class EditingSessionAction extends Action2 {
    constructor(opts: Readonly<IAction2Options>);
    run(accessor: ServicesAccessor, ...args: any[]): any;
    abstract runEditingSessionAction(accessor: ServicesAccessor, editingSession: IChatEditingSession, chatWidget: IChatWidget, ...args: any[]): any;
}
export declare class ChatEditingAcceptAllAction extends EditingSessionAction {
    constructor();
    runEditingSessionAction(accessor: ServicesAccessor, editingSession: IChatEditingSession, chatWidget: IChatWidget, ...args: any[]): Promise<void>;
}
export declare class ChatEditingDiscardAllAction extends EditingSessionAction {
    constructor();
    runEditingSessionAction(accessor: ServicesAccessor, editingSession: IChatEditingSession, chatWidget: IChatWidget, ...args: any[]): Promise<void>;
}
export declare function discardAllEditsWithConfirmation(accessor: ServicesAccessor, currentEditingSession: IChatEditingSession): Promise<boolean>;
export declare class ChatEditingRemoveAllFilesAction extends EditingSessionAction {
    static readonly ID = "chatEditing.clearWorkingSet";
    constructor();
    runEditingSessionAction(accessor: ServicesAccessor, editingSession: IChatEditingSession, chatWidget: IChatWidget, ...args: any[]): Promise<void>;
}
export declare class ChatEditingShowChangesAction extends EditingSessionAction {
    static readonly ID = "chatEditing.viewChanges";
    static readonly LABEL: string;
    constructor();
    runEditingSessionAction(accessor: ServicesAccessor, editingSession: IChatEditingSession, chatWidget: IChatWidget, ...args: any[]): Promise<void>;
}
