
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { toAction } from '@codingame/monaco-vscode-api/vscode/vs/base/common/actions';
import { coalesce } from '@codingame/monaco-vscode-api/vscode/vs/base/common/arrays';
import { Codicon } from '@codingame/monaco-vscode-api/vscode/vs/base/common/codicons';
import { fromNowByDay, safeIntl } from '@codingame/monaco-vscode-api/vscode/vs/base/common/date';
import { Event } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { KeyMod, KeyCode } from '@codingame/monaco-vscode-api/vscode/vs/base/common/keyCodes';
import { DisposableStore, Disposable, markAsSingleton } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { ThemeIcon } from '@codingame/monaco-vscode-api/vscode/vs/base/common/themables';
import { URI } from '@codingame/monaco-vscode-api/vscode/vs/base/common/uri';
import { EditorAction2 } from '@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorExtensions';
import { Position } from '@codingame/monaco-vscode-api/vscode/vs/editor/common/core/position';
import { SuggestController } from '@codingame/monaco-vscode-api/vscode/vs/editor/contrib/suggest/browser/suggestController';
import { localize2, localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { IActionViewItemService } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/browser/actionViewItemService.service';
import { DropdownWithPrimaryActionViewItem } from '@codingame/monaco-vscode-1bb39316-6fbf-572e-ab6a-818a2496c14f-common/vscode/vs/platform/actions/browser/dropdownWithPrimaryActionViewItem';
import { MenuRegistry, MenuId, registerAction2, Action2, SubmenuItemAction, MenuItemAction } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions';
import { ICommandService } from '@codingame/monaco-vscode-api/vscode/vs/platform/commands/common/commands.service';
import { ContextKeyExpr } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey';
import { IContextKeyService } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service';
import { IsWindowsContext, IsLinuxContext } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkeys';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { KeybindingWeight } from '@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybindingsRegistry';
import { IOpenerService } from '@codingame/monaco-vscode-api/vscode/vs/platform/opener/common/opener.service';
import product from '@codingame/monaco-vscode-api/vscode/vs/platform/product/common/product';
import { IQuickInputService } from '@codingame/monaco-vscode-api/vscode/vs/platform/quickinput/common/quickInput.service';
import { ToggleTitleBarConfigAction } from '@codingame/monaco-vscode-2e69e120-617a-5258-95e0-3b8902f4e014-common/vscode/vs/workbench/browser/parts/titlebar/titlebarActions';
import { IEditorGroupsService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service';
import { ACTIVE_GROUP } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService';
import { IEditorService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service';
import { IHostService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/host/browser/host.service';
import { IViewsService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/views/common/viewsService.service';
import { EXTENSIONS_CATEGORY } from '@codingame/monaco-vscode-7ba0af96-90c2-5e11-ad7f-befdbbf246c8-common/vscode/vs/workbench/contrib/extensions/common/extensions';
import { IExtensionsWorkbenchService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/extensions/common/extensions.service';
import { ChatAgentLocation } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents';
import { IChatAgentService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents.service';
import { ChatContextKeys } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatContextKeys';
import { extractAgentAndCommand } from '../../common/chatParserTypes.js';
import { IChatService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatService.service';
import { isRequestVM } from '../../common/chatViewModel.js';
import { IChatWidgetHistoryService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatWidgetHistoryService.service';
import { CopilotUsageExtensionFeatureId } from '../../common/languageModelStats.js';
import { ILanguageModelToolsService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/languageModelToolsService.service';
import { ChatViewId, showChatView, EditsViewId, showCopilotView } from '../chat.js';
import { IChatWidgetService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/browser/chat.service';
import { ChatEditorInput } from '../chatEditorInput.js';
import { IChatQuotasService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatQuotasService.service';
import { convertBufferToScreenshotVariable } from '../contrib/screenshot.js';
import { clearChatEditor } from './chatClear.js';
import { IDialogService } from '@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service';
import { language } from '@codingame/monaco-vscode-api/vscode/vs/base/common/platform';
import { MarkdownString } from '@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent';
import { Parts } from '@codingame/monaco-vscode-81f603ca-d6ea-5402-90dd-3014dffc63b4-common/vscode/vs/workbench/services/layout/browser/layoutService';
import { IWorkbenchLayoutService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service';
import { ViewContainerLocation } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/views';
import { IViewDescriptorService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/views.service';

const CHAT_CATEGORY = ( localize2(4262, 'Chat'));
const CHAT_OPEN_ACTION_ID = 'workbench.action.chat.open';
const CHAT_OPEN_ACTION_LABEL = ( localize2(4263, "Open Chat"));
const CHAT_SETUP_ACTION_ID = 'workbench.action.chat.triggerSetup';
const CHAT_SETUP_ACTION_LABEL = ( localize2(4264, "Use AI Features with Copilot for Free..."));
const TOGGLE_CHAT_ACTION_ID = 'workbench.action.chat.toggle';
const TOGGLE_CHAT_ACTION_LABEL = ( localize(4265, "Toggle Chat"));
MenuRegistry.appendMenuItem(MenuId.ViewTitle, {
    command: {
        id: 'update.showCurrentReleaseNotes',
        title: ( localize2(4266, "Show Release Notes")),
    },
    when: ( ContextKeyExpr.equals('view', ChatViewId))
});
const OPEN_CHAT_QUOTA_EXCEEDED_DIALOG = 'workbench.action.chat.openQuotaExceededDialog';
function registerChatActions() {
    registerAction2(class OpenChatGlobalAction extends Action2 {
        constructor() {
            super({
                id: CHAT_OPEN_ACTION_ID,
                title: CHAT_OPEN_ACTION_LABEL,
                icon: Codicon.copilot,
                f1: true,
                category: CHAT_CATEGORY,
                keybinding: {
                    weight: KeybindingWeight.WorkbenchContrib,
                    primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyI,
                    mac: {
                        primary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyI
                    }
                },
                menu: {
                    id: MenuId.ChatTitleBarMenu,
                    group: 'a_open',
                    order: 1
                }
            });
        }
        async run(accessor, opts) {
            opts = typeof opts === 'string' ? { query: opts } : opts;
            const chatService = accessor.get(IChatService);
            const toolsService = accessor.get(ILanguageModelToolsService);
            const viewsService = accessor.get(IViewsService);
            const hostService = accessor.get(IHostService);
            const chatWidget = await showChatView(viewsService);
            if (!chatWidget) {
                return;
            }
            if (opts?.previousRequests?.length && chatWidget.viewModel) {
                for (const { request, response } of opts.previousRequests) {
                    chatService.addCompleteRequest(chatWidget.viewModel.sessionId, request, undefined, 0, { message: response });
                }
            }
            if (opts?.attachScreenshot) {
                const screenshot = await hostService.getScreenshot();
                if (screenshot) {
                    chatWidget.attachmentModel.addContext(convertBufferToScreenshotVariable(screenshot));
                }
            }
            if (opts?.query) {
                if (opts.isPartialQuery) {
                    chatWidget.setInput(opts.query);
                }
                else {
                    chatWidget.acceptInput(opts.query);
                }
            }
            if (opts?.toolIds && opts.toolIds.length > 0) {
                for (const toolId of opts.toolIds) {
                    const tool = toolsService.getTool(toolId);
                    if (tool) {
                        chatWidget.attachmentModel.addContext({
                            id: tool.id,
                            name: tool.displayName,
                            fullName: tool.displayName,
                            value: undefined,
                            icon: ThemeIcon.isThemeIcon(tool.icon) ? tool.icon : undefined,
                            isTool: true
                        });
                    }
                }
            }
            chatWidget.focusInput();
        }
    });
    registerAction2(class ToggleChatAction extends Action2 {
        constructor() {
            super({
                id: TOGGLE_CHAT_ACTION_ID,
                title: ( localize2(4265, "Toggle Chat")),
                category: CHAT_CATEGORY
            });
        }
        async run(accessor) {
            const layoutService = accessor.get(IWorkbenchLayoutService);
            const viewsService = accessor.get(IViewsService);
            const viewDescriptorService = accessor.get(IViewDescriptorService);
            const chatLocation = viewDescriptorService.getViewLocationById(ChatViewId);
            const editsLocation = viewDescriptorService.getViewLocationById(EditsViewId);
            if (viewsService.isViewVisible(ChatViewId) || (chatLocation === editsLocation && viewsService.isViewVisible(EditsViewId))) {
                this.updatePartVisibility(layoutService, chatLocation, false);
            }
            else {
                this.updatePartVisibility(layoutService, chatLocation, true);
                (await showCopilotView(viewsService, layoutService))?.focusInput();
            }
        }
        updatePartVisibility(layoutService, location, visible) {
            let part;
            switch (location) {
                case ViewContainerLocation.Panel:
                    part = Parts.PANEL_PART;
                    break;
                case ViewContainerLocation.Sidebar:
                    part = Parts.SIDEBAR_PART;
                    break;
                case ViewContainerLocation.AuxiliaryBar:
                    part = Parts.AUXILIARYBAR_PART;
                    break;
            }
            if (part) {
                layoutService.setPartHidden(!visible, part);
            }
        }
    });
    registerAction2(class ChatHistoryAction extends Action2 {
        constructor() {
            super({
                id: `workbench.action.chat.history`,
                title: ( localize2(4267, "Show Chats...")),
                menu: {
                    id: MenuId.ViewTitle,
                    when: ( ContextKeyExpr.equals('view', ChatViewId)),
                    group: 'navigation',
                    order: 2
                },
                category: CHAT_CATEGORY,
                icon: Codicon.history,
                f1: true,
                precondition: ChatContextKeys.enabled
            });
        }
        async run(accessor) {
            const chatService = accessor.get(IChatService);
            const quickInputService = accessor.get(IQuickInputService);
            const viewsService = accessor.get(IViewsService);
            const editorService = accessor.get(IEditorService);
            const showPicker = () => {
                const openInEditorButton = {
                    iconClass: ThemeIcon.asClassName(Codicon.file),
                    tooltip: ( localize(4268, "Open in Editor")),
                };
                const deleteButton = {
                    iconClass: ThemeIcon.asClassName(Codicon.x),
                    tooltip: ( localize(4269, "Delete")),
                };
                const renameButton = {
                    iconClass: ThemeIcon.asClassName(Codicon.pencil),
                    tooltip: ( localize(4270, "Rename")),
                };
                const getPicks = () => {
                    const items = chatService.getHistory();
                    items.sort((a, b) => (b.lastMessageDate ?? 0) - (a.lastMessageDate ?? 0));
                    let lastDate = undefined;
                    const picks = items.flatMap((i) => {
                        const timeAgoStr = fromNowByDay(i.lastMessageDate, true, true);
                        const separator = timeAgoStr !== lastDate ? {
                            type: 'separator', label: timeAgoStr,
                        } : undefined;
                        lastDate = timeAgoStr;
                        return [
                            separator,
                            {
                                label: i.title,
                                description: i.isActive ? `(${( localize(4271, 'current'))})` : '',
                                chat: i,
                                buttons: i.isActive ? [renameButton] : [
                                    renameButton,
                                    openInEditorButton,
                                    deleteButton,
                                ]
                            }
                        ];
                    });
                    return coalesce(picks);
                };
                const store = ( new DisposableStore());
                const picker = store.add(quickInputService.createQuickPick({ useSeparators: true }));
                picker.placeholder = ( localize(4272, "Switch to chat"));
                const picks = getPicks();
                picker.items = picks;
                store.add(picker.onDidTriggerItemButton(async (context) => {
                    if (context.button === openInEditorButton) {
                        const options = { target: { sessionId: context.item.chat.sessionId }, pinned: true };
                        editorService.openEditor({ resource: ChatEditorInput.getNewEditorUri(), options }, ACTIVE_GROUP);
                        picker.hide();
                    }
                    else if (context.button === deleteButton) {
                        chatService.removeHistoryEntry(context.item.chat.sessionId);
                        picker.items = getPicks();
                    }
                    else if (context.button === renameButton) {
                        const title = await quickInputService.input({ title: ( localize(4273, "New chat title")), value: context.item.chat.title });
                        if (title) {
                            chatService.setChatSessionTitle(context.item.chat.sessionId, title);
                        }
                        showPicker();
                    }
                }));
                store.add(picker.onDidAccept(async () => {
                    try {
                        const item = picker.selectedItems[0];
                        const sessionId = item.chat.sessionId;
                        const view = await viewsService.openView(ChatViewId);
                        view.loadSession(sessionId);
                    }
                    finally {
                        picker.hide();
                    }
                }));
                store.add(picker.onDidHide(() => store.dispose()));
                picker.show();
            };
            showPicker();
        }
    });
    registerAction2(class OpenChatEditorAction extends Action2 {
        constructor() {
            super({
                id: `workbench.action.openChat`,
                title: ( localize2(4274, "Open Editor")),
                f1: true,
                category: CHAT_CATEGORY,
                precondition: ChatContextKeys.enabled
            });
        }
        async run(accessor) {
            const editorService = accessor.get(IEditorService);
            await editorService.openEditor({ resource: ChatEditorInput.getNewEditorUri(), options: { pinned: true } });
        }
    });
    registerAction2(class ChatAddAction extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.addParticipant',
                title: ( localize2(4275, "Chat with Extension")),
                icon: Codicon.mention,
                f1: false,
                category: CHAT_CATEGORY,
                menu: {
                    id: MenuId.ChatInput,
                    when: ( ChatContextKeys.location.isEqualTo(ChatAgentLocation.Panel)),
                    group: 'navigation',
                    order: 1
                }
            });
        }
        async run(accessor, ...args) {
            const widgetService = accessor.get(IChatWidgetService);
            const context = args[0];
            const widget = context?.widget ?? widgetService.lastFocusedWidget;
            if (!widget) {
                return;
            }
            const hasAgentOrCommand = extractAgentAndCommand(widget.parsedInput);
            if (hasAgentOrCommand?.agentPart || hasAgentOrCommand?.commandPart) {
                return;
            }
            const suggestCtrl = SuggestController.get(widget.inputEditor);
            if (suggestCtrl) {
                const curText = widget.inputEditor.getValue();
                const newValue = curText ? `@ ${curText}` : '@';
                if (!curText.startsWith('@')) {
                    widget.inputEditor.setValue(newValue);
                }
                widget.inputEditor.setPosition(( new Position(1, 2)));
                suggestCtrl.triggerSuggest(undefined, true);
            }
        }
    });
    registerAction2(class ClearChatInputHistoryAction extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.clearInputHistory',
                title: ( localize2(4276, "Clear Input History")),
                precondition: ChatContextKeys.enabled,
                category: CHAT_CATEGORY,
                f1: true,
            });
        }
        async run(accessor, ...args) {
            const historyService = accessor.get(IChatWidgetHistoryService);
            historyService.clearHistory();
        }
    });
    registerAction2(class ClearChatHistoryAction extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.clearHistory',
                title: ( localize2(4277, "Clear All Workspace Chats")),
                precondition: ChatContextKeys.enabled,
                category: CHAT_CATEGORY,
                f1: true,
            });
        }
        async run(accessor, ...args) {
            const editorGroupsService = accessor.get(IEditorGroupsService);
            const viewsService = accessor.get(IViewsService);
            const chatService = accessor.get(IChatService);
            chatService.clearAllHistoryEntries();
            const chatView = viewsService.getViewWithId(ChatViewId);
            if (chatView) {
                chatView.widget.clear();
            }
            editorGroupsService.groups.forEach(group => {
                group.editors.forEach(editor => {
                    if (editor instanceof ChatEditorInput) {
                        clearChatEditor(accessor, editor);
                    }
                });
            });
        }
    });
    registerAction2(class FocusChatAction extends EditorAction2 {
        constructor() {
            super({
                id: 'chat.action.focus',
                title: ( localize2(4278, 'Focus Chat List')),
                precondition: ( ContextKeyExpr.and(ChatContextKeys.inChatInput)),
                category: CHAT_CATEGORY,
                keybinding: [
                    {
                        when: ( ContextKeyExpr.and(ChatContextKeys.inputCursorAtTop, ( ChatContextKeys.inQuickChat.negate()))),
                        primary: KeyMod.CtrlCmd | KeyCode.UpArrow,
                        weight: KeybindingWeight.EditorContrib,
                    },
                    {
                        when: ( ContextKeyExpr.and(( ContextKeyExpr.or(IsWindowsContext, IsLinuxContext)), ( ChatContextKeys.inQuickChat.negate()))),
                        primary: KeyMod.CtrlCmd | KeyCode.UpArrow,
                        weight: KeybindingWeight.EditorContrib,
                    },
                    {
                        when: ( ContextKeyExpr.and(ChatContextKeys.inChatSession, ChatContextKeys.inQuickChat)),
                        primary: KeyMod.CtrlCmd | KeyCode.DownArrow,
                        weight: KeybindingWeight.WorkbenchContrib,
                    }
                ]
            });
        }
        runEditorCommand(accessor, editor) {
            const editorUri = editor.getModel()?.uri;
            if (editorUri) {
                const widgetService = accessor.get(IChatWidgetService);
                widgetService.getWidgetByInputUri(editorUri)?.focusLastMessage();
            }
        }
    });
    registerAction2(class FocusChatInputAction extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.focusInput',
                title: ( localize2(4279, "Focus Chat Input")),
                f1: false,
                keybinding: [
                    {
                        primary: KeyMod.CtrlCmd | KeyCode.DownArrow,
                        weight: KeybindingWeight.WorkbenchContrib,
                        when: ( ContextKeyExpr.and(ChatContextKeys.inChatSession, ( ChatContextKeys.inChatInput.negate()), ( ChatContextKeys.inQuickChat.negate()))),
                    },
                    {
                        when: ( ContextKeyExpr.and(ChatContextKeys.inChatSession, ( ChatContextKeys.inChatInput.negate()), ChatContextKeys.inQuickChat)),
                        primary: KeyMod.CtrlCmd | KeyCode.UpArrow,
                        weight: KeybindingWeight.WorkbenchContrib,
                    }
                ]
            });
        }
        run(accessor, ...args) {
            const widgetService = accessor.get(IChatWidgetService);
            widgetService.lastFocusedWidget?.focusInput();
        }
    });
    const nonEnterpriseCopilotUsers = ( ContextKeyExpr.and(ChatContextKeys.enabled, ( ContextKeyExpr.notEquals(`config.${defaultChat.providerSetting}`, defaultChat.enterpriseProviderId))));
    registerAction2(class extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.manageSettings',
                title: ( localize2(4280, "Manage Copilot")),
                category: CHAT_CATEGORY,
                f1: true,
                precondition: nonEnterpriseCopilotUsers,
                menu: {
                    id: MenuId.ChatTitleBarMenu,
                    group: 'y_manage',
                    order: 1,
                    when: nonEnterpriseCopilotUsers
                }
            });
        }
        async run(accessor) {
            const openerService = accessor.get(IOpenerService);
            openerService.open(( URI.parse(defaultChat.manageSettingsUrl)));
        }
    });
    registerAction2(class ShowExtensionsUsingCopilot extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.showExtensionsUsingCopilot',
                title: ( localize2(4281, "Show Extensions using Copilot")),
                f1: true,
                category: EXTENSIONS_CATEGORY,
            });
        }
        async run(accessor) {
            const extensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);
            extensionsWorkbenchService.openSearch(`@feature:${CopilotUsageExtensionFeatureId}`);
        }
    });
    registerAction2(class ConfigureCopilotCompletions extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.configureCodeCompletions',
                title: ( localize2(4282, "Configure Code Completions...")),
                precondition: ChatContextKeys.enabled,
                menu: {
                    id: MenuId.ChatTitleBarMenu,
                    group: 'f_completions',
                    order: 10,
                }
            });
        }
        async run(accessor) {
            const commandService = accessor.get(ICommandService);
            commandService.executeCommand('github.copilot.toggleStatusMenu');
        }
    });
    registerAction2(class ShowLimitReachedDialogAction extends Action2 {
        constructor() {
            super({
                id: OPEN_CHAT_QUOTA_EXCEEDED_DIALOG,
                title: ( localize(4283, "Upgrade to Copilot Pro"))
            });
        }
        async run(accessor) {
            const chatQuotasService = accessor.get(IChatQuotasService);
            const commandService = accessor.get(ICommandService);
            const dialogService = accessor.get(IDialogService);
            const dateFormatter = safeIntl.DateTimeFormat(language, { year: 'numeric', month: 'long', day: 'numeric' });
            let message;
            const { chatQuotaExceeded, completionsQuotaExceeded } = chatQuotasService.quotas;
            if (chatQuotaExceeded && !completionsQuotaExceeded) {
                message = ( localize(
                    4284,
                    "You've run out of free chat messages. You still have free code completions available in the Copilot Free plan. These limits will reset on {0}.",
                    dateFormatter.format(chatQuotasService.quotas.quotaResetDate)
                ));
            }
            else if (completionsQuotaExceeded && !chatQuotaExceeded) {
                message = ( localize(
                    4285,
                    "You've run out of free code completions. You still have free chat messages available in the Copilot Free plan. These limits will reset on {0}.",
                    dateFormatter.format(chatQuotasService.quotas.quotaResetDate)
                ));
            }
            else {
                message = ( localize(
                    4286,
                    "You've reached the limit of the Copilot Free plan. These limits will reset on {0}.",
                    dateFormatter.format(chatQuotasService.quotas.quotaResetDate)
                ));
            }
            const upgradeToPro = ( localize(
                4287,
                "Upgrade to Copilot Pro (your first 30 days are free) for:\n- Unlimited code completions\n- Unlimited chat messages\n- Access to additional models"
            ));
            await dialogService.prompt({
                type: 'none',
                message: ( localize(4288, "Copilot Limit Reached")),
                cancelButton: {
                    label: ( localize(4289, "Dismiss")),
                    run: () => { }
                },
                buttons: [
                    {
                        label: ( localize(4290, "Upgrade to Copilot Pro")),
                        run: () => commandService.executeCommand('workbench.action.chat.upgradePlan')
                    },
                ],
                custom: {
                    icon: Codicon.copilotWarningLarge,
                    markdownDetails: [
                        { markdown: ( new MarkdownString(message, true)) },
                        { markdown: ( new MarkdownString(upgradeToPro, true)) }
                    ]
                }
            });
        }
    });
}
function stringifyItem(item, includeName = true) {
    if (isRequestVM(item)) {
        return (includeName ? `${item.username}: ` : '') + item.messageText;
    }
    else {
        return (includeName ? `${item.username}: ` : '') + ( item.response.toString());
    }
}
const defaultChat = {
    manageSettingsUrl: product.defaultChatAgent?.manageSettingsUrl ?? '',
    enterpriseProviderId: product.defaultChatAgent?.enterpriseProviderId ?? '',
    providerSetting: product.defaultChatAgent?.providerSetting ?? '',
};
MenuRegistry.appendMenuItem(MenuId.CommandCenter, {
    submenu: MenuId.ChatTitleBarMenu,
    title: ( localize(4291, "Copilot")),
    icon: Codicon.copilot,
    when: ( ContextKeyExpr.and(ChatContextKeys.supported, ( ContextKeyExpr.has('config.chat.commandCenter.enabled')))),
    order: 10001
});
MenuRegistry.appendMenuItem(MenuId.TitleBar, {
    submenu: MenuId.ChatTitleBarMenu,
    title: ( localize(4291, "Copilot")),
    group: 'navigation',
    icon: Codicon.copilot,
    when: ( ContextKeyExpr.and(ChatContextKeys.supported, ( ContextKeyExpr.has('config.chat.commandCenter.enabled')), ( ( ContextKeyExpr.has('config.window.commandCenter')).negate()))),
    order: 1
});
registerAction2(class ToggleCopilotControl extends ToggleTitleBarConfigAction {
    constructor() {
        super('chat.commandCenter.enabled', ( localize(4292, 'Copilot Controls')), ( localize(4293, "Toggle visibility of the Copilot Controls in title bar")), 5, false, ChatContextKeys.supported);
    }
});
let CopilotTitleBarMenuRendering = class CopilotTitleBarMenuRendering extends Disposable {
    static { this.ID = 'copilot.titleBarMenuRendering'; }
    constructor(actionViewItemService, agentService, chatQuotasService, instantiationService, contextKeyService) {
        super();
        const contextKeySet = ( new Set([ChatContextKeys.Setup.signedOut.key]));
        const disposable = actionViewItemService.register(MenuId.CommandCenter, MenuId.ChatTitleBarMenu, (action, options) => {
            if (!(action instanceof SubmenuItemAction)) {
                return undefined;
            }
            const dropdownAction = toAction({
                id: 'copilot.titleBarMenuRendering.more',
                label: ( localize(4294, "More...")),
                run() { }
            });
            const chatExtensionInstalled = ( agentService.getAgents().some(agent => agent.isDefault));
            const { chatQuotaExceeded, completionsQuotaExceeded } = chatQuotasService.quotas;
            const signedOut = contextKeyService.getContextKeyValue(ChatContextKeys.Setup.signedOut.key) ?? false;
            let primaryActionId;
            let primaryActionTitle;
            let primaryActionIcon;
            if (!chatExtensionInstalled) {
                primaryActionId = CHAT_SETUP_ACTION_ID;
                primaryActionTitle = CHAT_SETUP_ACTION_LABEL.value;
                primaryActionIcon = Codicon.copilot;
            }
            else {
                if (signedOut) {
                    primaryActionId = TOGGLE_CHAT_ACTION_ID;
                    primaryActionTitle = ( localize(4295, "Sign in to Use Copilot..."));
                    primaryActionIcon = Codicon.copilotNotConnected;
                }
                else if (chatQuotaExceeded || completionsQuotaExceeded) {
                    primaryActionId = OPEN_CHAT_QUOTA_EXCEEDED_DIALOG;
                    primaryActionTitle = quotaToButtonMessage({ chatQuotaExceeded, completionsQuotaExceeded });
                    primaryActionIcon = Codicon.copilotWarning;
                }
                else {
                    primaryActionId = TOGGLE_CHAT_ACTION_ID;
                    primaryActionTitle = TOGGLE_CHAT_ACTION_LABEL;
                    primaryActionIcon = Codicon.copilot;
                }
            }
            return instantiationService.createInstance(DropdownWithPrimaryActionViewItem, instantiationService.createInstance(MenuItemAction, {
                id: primaryActionId,
                title: primaryActionTitle,
                icon: primaryActionIcon,
            }, undefined, undefined, undefined, undefined), dropdownAction, action.actions, '', { ...options, skipTelemetry: true });
        }, Event.any(agentService.onDidChangeAgents, chatQuotasService.onDidChangeQuotaExceeded, Event.filter(contextKeyService.onDidChangeContext, e => e.affectsSome(contextKeySet))));
        markAsSingleton(disposable);
    }
};
CopilotTitleBarMenuRendering = ( __decorate([
    ( __param(0, IActionViewItemService)),
    ( __param(1, IChatAgentService)),
    ( __param(2, IChatQuotasService)),
    ( __param(3, IInstantiationService)),
    ( __param(4, IContextKeyService))
], CopilotTitleBarMenuRendering));
function quotaToButtonMessage({ chatQuotaExceeded, completionsQuotaExceeded }) {
    if (chatQuotaExceeded && !completionsQuotaExceeded) {
        return localize(4296, "Monthly chat messages limit reached. Click for details.");
    }
    else if (completionsQuotaExceeded && !chatQuotaExceeded) {
        return localize(4297, "Monthly code completions limit reached. Click for details.");
    }
    else {
        return localize(4298, "Copilot Free plan limit reached. Click for details.");
    }
}

export { CHAT_CATEGORY, CHAT_OPEN_ACTION_ID, CHAT_OPEN_ACTION_LABEL, CHAT_SETUP_ACTION_ID, CHAT_SETUP_ACTION_LABEL, CopilotTitleBarMenuRendering, OPEN_CHAT_QUOTA_EXCEEDED_DIALOG, TOGGLE_CHAT_ACTION_ID, TOGGLE_CHAT_ACTION_LABEL, quotaToButtonMessage, registerChatActions, stringifyItem };
