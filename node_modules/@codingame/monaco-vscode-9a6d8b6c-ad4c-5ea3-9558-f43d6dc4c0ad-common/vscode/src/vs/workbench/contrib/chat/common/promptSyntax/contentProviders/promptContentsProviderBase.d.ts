import { IPromptContentsProvider } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/promptSyntax/contentProviders/types";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { Emitter } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { VSBufferReadableStream } from "@codingame/monaco-vscode-api/vscode/vs/base/common/buffer";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { ObservableDisposable } from "../../../../../../base/common/observableDisposable.js";
import { ParseError } from "../../promptFileReferenceErrors.js";
export declare abstract class PromptContentsProviderBase<TChangeEvent extends NonNullable<unknown>> extends ObservableDisposable implements IPromptContentsProvider {
    protected readonly onChangeEmitter: Emitter<"full" | TChangeEvent>;
    constructor();
    protected abstract getContentsStream(changesEvent: TChangeEvent | "full", cancellationToken?: CancellationToken): Promise<VSBufferReadableStream>;
    abstract readonly uri: URI;
    abstract toString(): string;
    private readonly onContentChangedEmitter;
    readonly onContentChanged: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<VSBufferReadableStream | ParseError>;
    private onContentsChanged;
    start(): this;
    isPromptSnippet(): boolean;
}
