import * as DOM from "@codingame/monaco-vscode-api/vscode/vs/base/browser/dom";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { ITelemetryService } from "@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetry.service";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { IEditorOpenContext, IEditorPaneScrollPosition, IEditorPaneSelection, IEditorPaneSelectionChangeEvent, IEditorPaneWithScrolling, IEditorPaneWithSelection } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { IEditorGroup } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService";
import { NotebookDiffEditorInput } from "@codingame/monaco-vscode-e4d0fd26-1b26-5583-b3f7-582e08d7b389-common/vscode/vs/workbench/contrib/notebook/common/notebookDiffEditorInput";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { DiffElementCellViewModelBase, IDiffElementViewModelBase } from "./diffElementViewModel.js";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { INotebookEditorWorkerService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/services/notebookWorkerService.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { CellEditState, ICellOutputViewModel, IGenericCellViewModel, IInsetRenderOutput, INotebookEditorCreationOptions, INotebookEditorOptions } from "../notebookBrowser.js";
import { DiffSide, IDiffCellInfo, INotebookTextDiffEditor } from "./notebookDiffEditorBrowser.js";
import { Emitter, Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { EditorPane } from "@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/workbench/browser/parts/editor/editorPane";
import { IMouseWheelEvent } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/mouseEvent";
import { DiffNestedCellViewModel } from "./diffNestedCellViewModel.js";
import { INotebookDelegateForWebview } from "../view/renderers/backLayerWebView.js";
import { NotebookOptions } from "../notebookOptions.js";
import { NotebookLayoutInfo } from "../notebookViewEvents.js";
import { INotebookService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookService.service";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { IObservable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/observable";
export declare class NotebookTextDiffEditor extends EditorPane implements INotebookTextDiffEditor, INotebookDelegateForWebview, IEditorPaneWithSelection, IEditorPaneWithScrolling {
    private readonly instantiationService;
    private readonly contextKeyService;
    private readonly notebookEditorWorkerService;
    private readonly configurationService;
    private readonly notebookService;
    private readonly editorService;
    static readonly ENTIRE_DIFF_OVERVIEW_WIDTH = 30;
    creationOptions: INotebookEditorCreationOptions;
    static readonly ID: string;
    private _rootElement;
    private _listViewContainer;
    private _overflowContainer;
    private _overviewRulerContainer;
    private _overviewRuler;
    private _dimension;
    private notebookDiffViewModel?;
    private _list;
    private _modifiedWebview;
    private _originalWebview;
    private _webviewTransparentCover;
    private _fontInfo;
    private _inlineView;
    private _lastLayoutProperties;
    private readonly _onMouseUp;
    readonly onMouseUp: Event<{
        readonly event: MouseEvent;
        readonly target: IDiffElementViewModelBase;
    }>;
    private readonly _onDidScroll;
    readonly onDidScroll: Event<void>;
    readonly onDidChangeScroll: Event<void>;
    private _eventDispatcher;
    protected _scopeContextKeyService: IContextKeyService;
    private _model;
    private readonly diffEditorCalcuator;
    private readonly _modifiedResourceDisposableStore;
    private inlineDiffWidget;
    get textModel(): import("@codingame/monaco-vscode-notebook-service-override/vscode/vs/workbench/contrib/notebook/common/model/notebookTextModel").NotebookTextModel | undefined;
    get inlineNotebookEditor(): import("../notebookEditorWidget.js").NotebookEditorWidget | undefined;
    private _revealFirst;
    private readonly _insetModifyQueueByOutputId;
    protected _onDidDynamicOutputRendered: Emitter<{
        cell: IGenericCellViewModel;
        output: ICellOutputViewModel;
    }>;
    onDidDynamicOutputRendered: Event<{
        cell: IGenericCellViewModel;
        output: ICellOutputViewModel;
    }>;
    private readonly _notebookOptions;
    get notebookOptions(): NotebookOptions;
    private readonly _localStore;
    private _layoutCancellationTokenSource?;
    private readonly _onDidChangeSelection;
    readonly onDidChangeSelection: Event<IEditorPaneSelectionChangeEvent>;
    private _isDisposed;
    get isDisposed(): boolean;
    private readonly _currentChangedIndex;
    readonly currentChangedIndex: IObservable<number>;
    constructor(group: IEditorGroup, instantiationService: IInstantiationService, themeService: IThemeService, contextKeyService: IContextKeyService, notebookEditorWorkerService: INotebookEditorWorkerService, configurationService: IConfigurationService, telemetryService: ITelemetryService, storageService: IStorageService, notebookService: INotebookService, editorService: IEditorService);
    private get fontInfo();
    private createFontInfo;
    private isOverviewRulerEnabled;
    getSelection(): IEditorPaneSelection | undefined;
    toggleNotebookCellSelection(cell: IGenericCellViewModel): void;
    updatePerformanceMetadata(cellId: string, executionId: string, duration: number, rendererId: string): void;
    focusNotebookCell(cell: IGenericCellViewModel, focus: "output" | "editor" | "container"): Promise<void>;
    focusNextNotebookCell(cell: IGenericCellViewModel, focus: "output" | "editor" | "container"): Promise<void>;
    didFocusOutputInputChange(inputFocused: boolean): void;
    getScrollTop(): number;
    getScrollHeight(): number;
    getScrollPosition(): IEditorPaneScrollPosition;
    setScrollPosition(scrollPosition: IEditorPaneScrollPosition): void;
    delegateVerticalScrollbarPointerDown(browserEvent: PointerEvent): void;
    updateOutputHeight(cellInfo: IDiffCellInfo, output: ICellOutputViewModel, outputHeight: number, isInit: boolean): void;
    setMarkupCellEditState(cellId: string, editState: CellEditState): void;
    didStartDragMarkupCell(cellId: string, event: {
        dragOffsetY: number;
    }): void;
    didDragMarkupCell(cellId: string, event: {
        dragOffsetY: number;
    }): void;
    didEndDragMarkupCell(cellId: string): void;
    didDropMarkupCell(cellId: string): void;
    didResizeOutput(cellId: string): void;
    toggleInlineView(): Promise<void>;
    protected createEditor(parent: HTMLElement): void;
    private _registerOverviewRuler;
    private _updateOutputsOffsetsInWebview;
    setInput(input: NotebookDiffEditorInput, options: INotebookEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    setVisible(visible: boolean): void;
    private _detachModel;
    private _attachModel;
    private _createModifiedWebview;
    _generateFontFamily(): string;
    private _createOriginalWebview;
    setOptions(options: INotebookEditorOptions | undefined): void;
    updateLayout(token: CancellationToken, selections?: number[]): Promise<void>;
    scheduleOutputHeightAck(cellInfo: IDiffCellInfo, outputId: string, height: number): void;
    private pendingLayouts;
    layoutNotebookCell(cell: IDiffElementViewModelBase, height: number): Promise<void>;
    setScrollTop(scrollTop: number): void;
    triggerScroll(event: IMouseWheelEvent): void;
    firstChange(): void;
    lastChange(): void;
    previousChange(): void;
    nextChange(): void;
    createOutput(cellDiffViewModel: DiffElementCellViewModelBase, cellViewModel: DiffNestedCellViewModel, output: IInsetRenderOutput, getOffset: () => number, diffSide: DiffSide): void;
    updateMarkupCellHeight(): void;
    getCellByInfo(cellInfo: IDiffCellInfo): IGenericCellViewModel;
    getCellById(cellId: string): IGenericCellViewModel | undefined;
    removeInset(cellDiffViewModel: DiffElementCellViewModelBase, cellViewModel: DiffNestedCellViewModel, displayOutput: ICellOutputViewModel, diffSide: DiffSide): void;
    showInset(cellDiffViewModel: DiffElementCellViewModelBase, cellViewModel: DiffNestedCellViewModel, displayOutput: ICellOutputViewModel, diffSide: DiffSide): void;
    hideInset(cellDiffViewModel: DiffElementCellViewModelBase, cellViewModel: DiffNestedCellViewModel, output: ICellOutputViewModel): void;
    getDomNode(): HTMLElement;
    getOverflowContainerDomNode(): HTMLElement;
    getControl(): INotebookTextDiffEditor | undefined;
    clearInput(): void;
    deltaCellOutputContainerClassNames(diffSide: DiffSide, cellId: string, added: string[], removed: string[]): void;
    getLayoutInfo(): NotebookLayoutInfo;
    layout(dimension: DOM.Dimension, position: DOM.IDomPosition): void;
    dispose(): void;
}
