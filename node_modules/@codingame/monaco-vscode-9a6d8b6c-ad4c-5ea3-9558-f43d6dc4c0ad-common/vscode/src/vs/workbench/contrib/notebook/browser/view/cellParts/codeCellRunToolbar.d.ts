import { IAction } from "@codingame/monaco-vscode-api/vscode/vs/base/common/actions";
import { IMenu, MenuId } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { IMenuService } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions.service";
import { IScopedContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IContextMenuService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextview/browser/contextView.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IKeybindingService } from "@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybinding.service";
import { ICellViewModel, INotebookEditorDelegate } from "../../notebookBrowser.js";
import { CellContentPart } from "../cellPart.js";
export declare class RunToolbar extends CellContentPart {
    readonly notebookEditor: INotebookEditorDelegate;
    readonly contextKeyService: IContextKeyService;
    readonly cellContainer: HTMLElement;
    readonly runButtonContainer: HTMLElement;
    private readonly keybindingService;
    private readonly contextMenuService;
    private readonly instantiationService;
    private toolbar;
    private primaryMenu;
    private secondaryMenu;
    constructor(notebookEditor: INotebookEditorDelegate, contextKeyService: IContextKeyService, cellContainer: HTMLElement, runButtonContainer: HTMLElement, primaryMenuId: MenuId, secondaryMenuId: MenuId, menuService: IMenuService, keybindingService: IKeybindingService, contextMenuService: IContextMenuService, instantiationService: IInstantiationService);
    didRenderCell(element: ICellViewModel): void;
    getCellToolbarActions(menu: IMenu): {
        primary: IAction[];
        secondary: IAction[];
    };
    private createRunCellToolbar;
}
export declare function getCodeCellExecutionContextKeyService(contextKeyService: IContextKeyService): IScopedContextKeyService;
