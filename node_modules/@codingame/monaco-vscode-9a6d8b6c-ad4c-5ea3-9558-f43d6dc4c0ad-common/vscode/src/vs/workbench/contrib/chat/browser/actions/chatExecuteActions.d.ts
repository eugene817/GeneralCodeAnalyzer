import { ServicesAccessor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorExtensions";
import { Action2 } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { IChatEditingSession } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatEditingService";
import { IChatWidget } from "../chat.js";
import { EditingSessionAction } from "../chatEditing/chatEditingActions.js";
export interface IVoiceChatExecuteActionContext {
    readonly disableTimeout?: boolean;
}
export interface IChatExecuteActionContext {
    widget?: IChatWidget;
    inputValue?: string;
    voice?: IVoiceChatExecuteActionContext;
}
declare abstract class SubmitAction extends Action2 {
    run(accessor: ServicesAccessor, ...args: any[]): void;
}
export declare class ChatSubmitAction extends SubmitAction {
    static readonly ID = "workbench.action.chat.submit";
    constructor();
}
export declare const ToggleAgentModeActionId = "workbench.action.chat.toggleAgentMode";
export interface IToggleAgentModeArgs {
    agentMode: boolean;
}
export declare class ToggleAgentModeAction extends EditingSessionAction {
    static readonly ID = "workbench.action.chat.toggleAgentMode";
    constructor();
    runEditingSessionAction(accessor: ServicesAccessor, currentEditingSession: IChatEditingSession, chatWidget: IChatWidget, ...args: any[]): Promise<void>;
}
export declare const ToggleRequestPausedActionId = "workbench.action.chat.toggleRequestPaused";
export declare class ToggleRequestPausedAction extends Action2 {
    static readonly ID = "workbench.action.chat.toggleRequestPaused";
    constructor();
    run(accessor: ServicesAccessor, ...args: any[]): void;
}
export declare class ChatEditingSessionSubmitAction extends SubmitAction {
    static readonly ID = "workbench.action.edits.submit";
    constructor();
}
export declare const ChatModelPickerActionId = "workbench.action.chat.pickModel";
export declare class ChatSubmitSecondaryAgentAction extends Action2 {
    static readonly ID = "workbench.action.chat.submitSecondaryAgent";
    constructor();
    run(accessor: ServicesAccessor, ...args: any[]): void;
}
export declare const CancelChatActionId = "workbench.action.chat.cancel";
export declare class CancelAction extends Action2 {
    static readonly ID = "workbench.action.chat.cancel";
    constructor();
    run(accessor: ServicesAccessor, ...args: any[]): void;
}
export declare function registerChatExecuteActions(): void;
export {};
