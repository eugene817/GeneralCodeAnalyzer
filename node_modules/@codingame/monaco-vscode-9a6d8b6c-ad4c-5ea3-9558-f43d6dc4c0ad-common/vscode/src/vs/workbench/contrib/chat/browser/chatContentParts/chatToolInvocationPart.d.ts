import { Disposable, IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { MarkdownRenderer } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IChatToolInvocation, IChatToolInvocationSerialized } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatService";
import { IChatRendererContent } from "../../common/chatViewModel.js";
import { CodeBlockModelCollection } from "../../common/codeBlockModelCollection.js";
import { ChatTreeItem, IChatCodeBlockInfo } from "../chat.js";
import { IChatContentPart, IChatContentPartRenderContext } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/browser/chatContentParts/chatContentParts";
import { EditorPool } from "./chatMarkdownContentPart.js";
import { CollapsibleListPool } from "./chatReferencesContentPart.js";
export declare class ChatToolInvocationPart extends Disposable implements IChatContentPart {
    readonly domNode: HTMLElement;
    private _onDidChangeHeight;
    readonly onDidChangeHeight: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    get codeblocks(): IChatCodeBlockInfo[];
    get codeblocksPartId(): string | undefined;
    private subPart;
    constructor(toolInvocation: IChatToolInvocation | IChatToolInvocationSerialized, context: IChatContentPartRenderContext, renderer: MarkdownRenderer, listPool: CollapsibleListPool, editorPool: EditorPool, currentWidthDelegate: () => number, codeBlockModelCollection: CodeBlockModelCollection, codeBlockStartIndex: number, instantiationService: IInstantiationService);
    hasSameContent(other: IChatRendererContent, followingContent: IChatRendererContent[], element: ChatTreeItem): boolean;
    addDisposable(disposable: IDisposable): void;
}
