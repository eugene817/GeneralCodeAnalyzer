import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { ICodeEditor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorBrowser";
import { IEditorOptions } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/config/editorOptions";
import { ILanguageService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages/language.service";
import { IAccessibilityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/accessibility/common/accessibility.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IKeybindingService } from "@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybinding.service";
import { IActiveNotebookEditorDelegate, ICellViewModel } from "../../notebookBrowser.js";
import { MarkdownCellRenderTemplate } from "../notebookRenderingCommon.js";
import { MarkupCellViewModel } from "../../viewModel/markupCellViewModel.js";
export declare class MarkupCell extends Disposable {
    private readonly notebookEditor;
    private readonly viewCell;
    private readonly templateData;
    private readonly renderedEditors;
    private readonly accessibilityService;
    private readonly contextKeyService;
    private readonly instantiationService;
    private readonly languageService;
    private configurationService;
    private keybindingService;
    private editor;
    private markdownAccessibilityContainer;
    private editorPart;
    private readonly localDisposables;
    private readonly focusSwitchDisposable;
    private readonly editorDisposables;
    private foldingState;
    private cellEditorOptions;
    private editorOptions;
    private _isDisposed;
    constructor(notebookEditor: IActiveNotebookEditorDelegate, viewCell: MarkupCellViewModel, templateData: MarkdownCellRenderTemplate, renderedEditors: Map<ICellViewModel, ICodeEditor | undefined>, accessibilityService: IAccessibilityService, contextKeyService: IContextKeyService, instantiationService: IInstantiationService, languageService: ILanguageService, configurationService: IConfigurationService, keybindingService: IKeybindingService);
    layoutCellParts(): void;
    private constructDOM;
    private registerListeners;
    private updateMarkupCellOptions;
    private updateCollapsedState;
    private updateForHover;
    private updateForFocusModeChange;
    dispose(): void;
    private updateFoldingIconShowClass;
    private viewUpdate;
    private viewUpdateCollapsed;
    private getRichText;
    private viewUpdateEditing;
    private viewUpdatePreview;
    private focusEditorIfNeeded;
    private layoutEditor;
    private onCellEditorWidthChange;
    relayoutCell(): void;
    updateEditorOptions(newValue: IEditorOptions): void;
    private layoutFoldingIndicator;
    private bindEditorListeners;
    private onCellEditorHeightChange;
}
