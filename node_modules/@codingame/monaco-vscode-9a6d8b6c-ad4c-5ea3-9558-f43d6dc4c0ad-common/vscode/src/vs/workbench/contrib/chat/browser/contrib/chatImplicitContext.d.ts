import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { ICodeEditorService } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/services/codeEditorService.service";
import { Location } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IWorkbenchContribution } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/contributions";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { IChatEditingService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatEditingService.service";
import { IBaseChatRequestVariableEntry, IChatRequestImplicitVariableEntry } from "../../common/chatModel.js";
import { IChatService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatService.service";
import { ILanguageModelIgnoredFilesService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/ignoredFiles.service";
import { IChatWidgetService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/browser/chat.service";
export declare class ChatImplicitContextContribution extends Disposable implements IWorkbenchContribution {
    private readonly codeEditorService;
    private readonly editorService;
    private readonly chatWidgetService;
    private readonly chatService;
    private readonly chatEditingService;
    private readonly configurationService;
    private readonly ignoredFilesService;
    static readonly ID = "chat.implicitContext";
    private readonly _currentCancelTokenSource;
    private _implicitContextEnablement;
    constructor(codeEditorService: ICodeEditorService, editorService: IEditorService, chatWidgetService: IChatWidgetService, chatService: IChatService, chatEditingService: IChatEditingService, configurationService: IConfigurationService, ignoredFilesService: ILanguageModelIgnoredFilesService);
    private findActiveCodeEditor;
    private findActiveNotebookEditor;
    private updateImplicitContext;
}
export declare class ChatImplicitContext extends Disposable implements IChatRequestImplicitVariableEntry {
    get id(): "vscode.implicit.file" | "vscode.implicit.selection" | "vscode.implicit.viewport" | "vscode.implicit";
    get name(): string;
    readonly kind = "implicit";
    get modelDescription(): string;
    readonly isFile = true;
    private _isSelection;
    get isSelection(): boolean;
    private _onDidChangeValue;
    readonly onDidChangeValue: Event<void>;
    private _value;
    get value(): URI | Location | undefined;
    private _enabled;
    get enabled(): boolean;
    set enabled(value: boolean);
    constructor(value?: Location | URI);
    setValue(value: Location | URI | undefined, isSelection: boolean): void;
    toBaseEntry(): IBaseChatRequestVariableEntry;
}
