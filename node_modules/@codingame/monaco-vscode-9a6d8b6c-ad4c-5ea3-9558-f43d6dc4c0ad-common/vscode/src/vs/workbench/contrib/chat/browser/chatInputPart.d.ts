import { IHistoryNavigationWidget } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/history";
import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { CodeEditorWidget } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/widget/codeEditor/codeEditorWidget";
import { ILanguageService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages/language.service";
import { IModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/model.service";
import { ITextModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/resolverService.service";
import { IAccessibilityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/accessibility/common/accessibility.service";
import { MenuId } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { ICommandService } from "@codingame/monaco-vscode-api/vscode/vs/platform/commands/common/commands.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { IHoverService } from "@codingame/monaco-vscode-api/vscode/vs/platform/hover/browser/hover.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IKeybindingService } from "@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybinding.service";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { IOpenerService } from "@codingame/monaco-vscode-api/vscode/vs/platform/opener/common/opener.service";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { ChatAgentLocation } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents";
import { IChatAgentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents.service";
import { IChatEditingSession } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatEditingService";
import { IChatRequestVariableEntry } from "../common/chatModel.js";
import { IChatFollowup } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatService";
import { IChatVariablesService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatVariables.service";
import { IChatResponseViewModel } from "../common/chatViewModel.js";
import { IChatInputState } from "../common/chatWidgetHistoryService.js";
import { IChatWidgetHistoryService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatWidgetHistoryService.service";
import { ILanguageModelsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/languageModels.service";
import { IChatWidget } from "./chat.js";
import { ChatAttachmentModel } from "./chatAttachmentModel.js";
import { IChatViewState } from "./chatWidget.js";
import { ChatImplicitContext } from "./contrib/chatImplicitContext.js";
export interface IChatInputStyles {
    overlayBackground: string;
    listForeground: string;
    listBackground: string;
}
interface IChatInputPartOptions {
    renderFollowups: boolean;
    renderStyle?: "compact";
    menus: {
        executeToolbar: MenuId;
        inputSideToolbar?: MenuId;
        telemetrySource?: string;
    };
    editorOverflowWidgetsDomNode?: HTMLElement;
    renderWorkingSet?: boolean;
    enableImplicitContext?: boolean;
}
export interface IWorkingSetEntry {
    uri: URI;
    isMarkedReadonly?: boolean;
}
export declare class ChatInputPart extends Disposable implements IHistoryNavigationWidget {
    private readonly location;
    private readonly options;
    private readonly historyService;
    private readonly modelService;
    private readonly languageService;
    private readonly instantiationService;
    private readonly contextKeyService;
    private readonly configurationService;
    private readonly keybindingService;
    private readonly accessibilityService;
    private readonly languageModelsService;
    private readonly logService;
    private readonly hoverService;
    private readonly fileService;
    private readonly commandService;
    private readonly editorService;
    private readonly openerService;
    private readonly themeService;
    private readonly textModelResolverService;
    private readonly storageService;
    private readonly labelService;
    private readonly variableService;
    private readonly chatAgentService;
    static readonly INPUT_SCHEME = "chatSessionInput";
    private static _counter;
    private _onDidLoadInputState;
    readonly onDidLoadInputState: Event<any>;
    private _onDidChangeHeight;
    readonly onDidChangeHeight: Event<void>;
    private _onDidFocus;
    readonly onDidFocus: Event<void>;
    private _onDidBlur;
    readonly onDidBlur: Event<void>;
    private _onDidChangeContext;
    readonly onDidChangeContext: Event<{
        removed?: IChatRequestVariableEntry[];
        added?: IChatRequestVariableEntry[];
    }>;
    private _onDidAcceptFollowup;
    readonly onDidAcceptFollowup: Event<{
        followup: IChatFollowup;
        response: IChatResponseViewModel | undefined;
    }>;
    private readonly _attachmentModel;
    get attachmentModel(): ChatAttachmentModel;
    getAttachedAndImplicitContext(sessionId: string): IChatRequestVariableEntry[];
    get hasInstructionAttachments(): boolean;
    private _indexOfLastAttachedContextDeletedWithKeyboard;
    private _implicitContext;
    get implicitContext(): ChatImplicitContext | undefined;
    private _hasFileAttachmentContextKey;
    private readonly _onDidChangeVisibility;
    private readonly _contextResourceLabels;
    private readonly inputEditorMaxHeight;
    private inputEditorHeight;
    private container;
    private inputSideToolbarContainer?;
    private followupsContainer;
    private readonly followupsDisposables;
    private attachmentsContainer;
    private attachedContextContainer;
    private readonly attachedContextDisposables;
    private relatedFilesContainer;
    private chatEditingSessionWidgetContainer;
    private _inputPartHeight;
    get inputPartHeight(): number;
    private _followupsHeight;
    get followupsHeight(): number;
    private _editSessionWidgetHeight;
    get editSessionWidgetHeight(): number;
    private _inputEditor;
    private _inputEditorElement;
    private executeToolbar;
    private inputActionsToolbar;
    private addFilesToolbar;
    get inputEditor(): CodeEditorWidget;
    private readonly dnd;
    private history;
    private historyNavigationBackwardsEnablement;
    private historyNavigationForewardsEnablement;
    private inputModel;
    private inputEditorHasText;
    private chatCursorAtTop;
    private inputEditorHasFocus;
    private promptInstructionsAttached;
    private readonly _waitForPersistedLanguageModel;
    private _onDidChangeCurrentLanguageModel;
    private _currentLanguageModel;
    get currentLanguageModel(): string | undefined;
    private cachedDimensions;
    private cachedExecuteToolbarWidth;
    private cachedInputToolbarWidth;
    readonly inputUri: URI;
    private readonly _chatEditsActionsDisposables;
    private readonly _chatEditsDisposables;
    private _chatEditsListPool;
    private _chatEditList;
    get selectedElements(): URI[];
    private _attemptedWorkingSetEntriesCount;
    get attemptedWorkingSetEntriesCount(): number;
    private readonly getInputState;
    private instructionAttachmentsPart;
    constructor(location: ChatAgentLocation, options: IChatInputPartOptions, styles: IChatInputStyles, getContribsInputState: () => any, historyService: IChatWidgetHistoryService, modelService: IModelService, languageService: ILanguageService, instantiationService: IInstantiationService, contextKeyService: IContextKeyService, configurationService: IConfigurationService, keybindingService: IKeybindingService, accessibilityService: IAccessibilityService, languageModelsService: ILanguageModelsService, logService: ILogService, hoverService: IHoverService, fileService: IFileService, commandService: ICommandService, editorService: IEditorService, openerService: IOpenerService, themeService: IThemeService, textModelResolverService: ITextModelService, storageService: IStorageService, labelService: ILabelService, variableService: IChatVariablesService, chatAgentService: IChatAgentService);
    private getSelectedModelStorageKey;
    private initSelectedModel;
    private checkModelSupported;
    private supportsVision;
    private modelSupportedForDefaultAgent;
    private getModels;
    private setCurrentLanguageModelToDefault;
    private setCurrentLanguageModelByUser;
    private loadHistory;
    private _getAriaLabel;
    initForNewChatModel(state: IChatViewState): void;
    logInputHistory(): void;
    setVisible(visible: boolean): void;
    get element(): HTMLElement;
    showPreviousValue(): Promise<void>;
    showNextValue(): Promise<void>;
    private navigateHistory;
    setValue(value: string, transient: boolean): void;
    private saveCurrentValue;
    focus(): void;
    hasFocus(): boolean;
    acceptInput(isUserQuery?: boolean): Promise<void>;
    private getFilteredEntry;
    private _acceptInputForVoiceover;
    private _handleAttachedContextChange;
    render(container: HTMLElement, initialValue: string, widget: IChatWidget): void;
    private renderAttachedContext;
    private customAttachment;
    private openResource;
    private attachButtonAndDisposables;
    private createImageElements;
    renderChatEditingSessionState(chatEditingSession: IChatEditingSession | null, chatWidget?: IChatWidget): Promise<void>;
    renderChatRelatedFiles(chatEditingSession: IChatEditingSession, anchor: HTMLElement): Promise<void>;
    renderFollowups(items: IChatFollowup[] | undefined, response: IChatResponseViewModel | undefined): Promise<void>;
    get contentHeight(): number;
    layout(height: number, width: number): void;
    private previousInputEditorDimension;
    private _layout;
    private getLayoutData;
    getViewState(): IChatInputState;
    saveState(): void;
}
export {};
