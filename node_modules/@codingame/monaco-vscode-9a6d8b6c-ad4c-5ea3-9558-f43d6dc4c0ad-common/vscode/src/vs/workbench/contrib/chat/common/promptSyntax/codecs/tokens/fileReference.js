
import { assert } from '@codingame/monaco-vscode-api/vscode/vs/base/common/assert';
import { Range } from '@codingame/monaco-vscode-api/vscode/vs/editor/common/core/range';
import { BaseToken } from '../../../../../../../editor/common/codecs/baseToken.js';

const TOKEN_START = '#file:';
class FileReference extends BaseToken {
    static { this.TOKEN_START = TOKEN_START; }
    constructor(range, path) {
        super(range);
        this.path = path;
    }
    get text() {
        return `${TOKEN_START}${this.path}`;
    }
    static fromWord(word) {
        const { text } = word;
        assert(text.startsWith(TOKEN_START), `The reference must start with "${TOKEN_START}", got ${text}.`);
        const maybeReference = text.split(TOKEN_START);
        assert(maybeReference.length === 2, `The expected reference format is "${TOKEN_START}:filesystem-path", got ${text}.`);
        const [first, second] = maybeReference;
        assert(first === '', `The reference must start with "${TOKEN_START}", got ${first}.`);
        assert(
        !!second, `The reference path must be defined, got ${second}.`);
        const reference = ( new FileReference(word.range, second));
        return reference;
    }
    equals(other) {
        if (!super.sameRange(other.range)) {
            return false;
        }
        if (!(other instanceof FileReference)) {
            return false;
        }
        return this.text === other.text;
    }
    get linkRange() {
        if (this.path.length === 0) {
            return undefined;
        }
        const { range } = this;
        return ( new Range(
            range.startLineNumber,
            range.startColumn + TOKEN_START.length,
            range.endLineNumber,
            range.endColumn
        ));
    }
    toString() {
        return `file-ref("${this.text}")${this.range}`;
    }
}

export { FileReference };
