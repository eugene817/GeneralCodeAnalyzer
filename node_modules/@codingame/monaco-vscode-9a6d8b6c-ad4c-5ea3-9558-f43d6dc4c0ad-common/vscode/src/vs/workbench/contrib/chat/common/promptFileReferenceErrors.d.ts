import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
export declare abstract class ParseError extends Error {
    abstract readonly errorType: string;
    constructor(message?: string, options?: ErrorOptions);
    sameTypeAs(other: unknown): other is typeof this;
    equal(other: unknown): boolean;
}
export declare class FailedToResolveContentsStream extends ParseError {
    readonly uri: URI;
    readonly originalError: unknown;
    errorType: string;
    constructor(uri: URI, originalError: unknown, message?: string);
}
export declare abstract class ResolveError extends ParseError {
    readonly uri: URI;
    abstract errorType: string;
    constructor(uri: URI, message?: string, options?: ErrorOptions);
}
export declare class OpenFailed extends FailedToResolveContentsStream {
    errorType: string;
    constructor(uri: URI, originalError: unknown);
}
export declare class RecursiveReference extends ResolveError {
    readonly recursivePath: string[];
    errorType: string;
    constructor(uri: URI, recursivePath: string[]);
    get recursivePathString(): string;
    equal(other: unknown): other is this;
    toString(): string;
}
export declare class NotPromptFile extends ResolveError {
    errorType: string;
    constructor(uri: URI, message?: string);
}
export declare class FolderReference extends NotPromptFile {
    errorType: string;
    constructor(uri: URI, message?: string);
}
