import { IListAccessibilityProvider } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/list/listWidget";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IKeybindingService } from "@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybinding.service";
import { AccessibilityVerbositySettingId } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/accessibility/browser/accessibilityConfiguration";
import { CellViewModel, NotebookViewModel } from "./viewModel/notebookViewModelImpl.js";
import { INotebookExecutionStateService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookExecutionStateService.service";
import { IAccessibilityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/accessibility/common/accessibility.service";
export declare class NotebookAccessibilityProvider extends Disposable implements IListAccessibilityProvider<CellViewModel> {
    private readonly viewModel;
    private readonly isReplHistory;
    private readonly notebookExecutionStateService;
    private readonly keybindingService;
    private readonly configurationService;
    private readonly accessibilityService;
    private readonly _onDidAriaLabelChange;
    private readonly onDidAriaLabelChange;
    constructor(viewModel: () => NotebookViewModel | undefined, isReplHistory: boolean, notebookExecutionStateService: INotebookExecutionStateService, keybindingService: IKeybindingService, configurationService: IConfigurationService, accessibilityService: IAccessibilityService);
    private shouldReadCellOutputs;
    get verbositySettingId(): AccessibilityVerbositySettingId.Notebook | AccessibilityVerbositySettingId.ReplEditor;
    getAriaLabel(element: CellViewModel): import("@codingame/monaco-vscode-api/vscode/vs/base/common/observable").IObservable<string>;
    private createItemLabel;
    private getLabel;
    private get widgetAriaLabelName();
    getWidgetAriaLabel(): string;
    private mergeEvents;
}
