
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { assert } from '@codingame/monaco-vscode-api/vscode/vs/base/common/assert';
import { assertDefined } from '@codingame/monaco-vscode-api/vscode/vs/base/common/types';
import { CancellationError } from '@codingame/monaco-vscode-api/vscode/vs/base/common/errors';
import { PromptContentsProviderBase } from './promptContentsProviderBase.js';
import { FolderReference, ParseError, OpenFailed, NotPromptFile } from '../../promptFileReferenceErrors.js';
import { FileChangeType } from '@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files';
import { IFileService } from '@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service';

let FilePromptContentProvider = class FilePromptContentProvider extends PromptContentsProviderBase {
    constructor(uri, fileService) {
        super();
        this.uri = uri;
        this.fileService = fileService;
        this._register(this.fileService.onDidFilesChange((event) => {
            if (event.contains(this.uri, FileChangeType.ADDED, FileChangeType.UPDATED)) {
                return this.onChangeEmitter.fire('full');
            }
            if (event.contains(this.uri, FileChangeType.DELETED)) {
                return this.onChangeEmitter.fire(event);
            }
        }));
    }
    async getContentsStream(_event, cancellationToken) {
        assert(!cancellationToken?.isCancellationRequested, ( new CancellationError()));
        let fileStream;
        try {
            const info = await this.fileService.resolve(this.uri);
            assert(!cancellationToken?.isCancellationRequested, ( new CancellationError()));
            assert(info.isFile, ( new FolderReference(this.uri)));
            fileStream = await this.fileService.readFileStream(this.uri);
        }
        catch (error) {
            if (error instanceof ParseError) {
                throw error;
            }
            throw ( new OpenFailed(this.uri, error));
        }
        assertDefined(fileStream, ( new OpenFailed(this.uri, 'Failed to open file stream.')));
        if (this.disposed || cancellationToken?.isCancellationRequested) {
            fileStream.value.destroy();
            throw ( new CancellationError());
        }
        if (!this.isPromptSnippet()) {
            throw ( new NotPromptFile(this.uri));
        }
        return fileStream.value;
    }
    toString() {
        return `file-prompt-contents-provider:${this.uri.path}`;
    }
};
FilePromptContentProvider = ( __decorate([
    ( __param(1, IFileService))
], FilePromptContentProvider));

export { FilePromptContentProvider };
