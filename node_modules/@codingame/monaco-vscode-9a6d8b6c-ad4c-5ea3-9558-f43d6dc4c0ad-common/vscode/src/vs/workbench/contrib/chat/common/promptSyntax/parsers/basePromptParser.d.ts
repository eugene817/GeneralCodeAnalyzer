import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IPromptFileReference, IResolveError } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/promptSyntax/parsers/types";
import { FileReference } from "../codecs/tokens/fileReference.js";
import { IRange } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/core/range";
import { IPromptContentsProvider } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/promptSyntax/contentProviders/types";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { ObservableDisposable } from "../../../../../../base/common/observableDisposable.js";
import { FilePromptContentProvider } from "../contentProviders/filePromptContentsProvider.js";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { MarkdownLink } from "../../../../../../editor/common/codecs/markdownCodec/tokens/markdownLink.js";
import { OpenFailed, NotPromptFile, RecursiveReference, FolderReference, ParseError } from "../../promptFileReferenceErrors.js";
export type TErrorCondition = OpenFailed | RecursiveReference | FolderReference | NotPromptFile;
export declare abstract class BasePromptParser<T extends IPromptContentsProvider> extends ObservableDisposable {
    private readonly promptContentsProvider;
    protected readonly instantiationService: IInstantiationService;
    protected readonly logService: ILogService;
    private readonly _references;
    private readonly _onUpdate;
    onUpdate(callback: () => void): this;
    private _errorCondition?;
    get errorCondition(): ParseError | undefined;
    get resolveFailed(): boolean | undefined;
    private firstParseResult;
    settled(): Promise<this>;
    allSettled(): Promise<this>;
    constructor(promptContentsProvider: T, seenReferences: string[] | undefined, instantiationService: IInstantiationService, logService: ILogService);
    private stream;
    private onContentsChanged;
    private onReference;
    private onStreamEnd;
    private disposeReferences;
    private started;
    start(): this;
    get uri(): URI;
    get dirname(): URI;
    get references(): readonly IPromptFileReference[];
    get allReferences(): readonly IPromptFileReference[];
    get allValidReferences(): readonly IPromptFileReference[];
    get allValidReferencesUris(): readonly URI[];
    get allErrors(): ParseError[];
    get topError(): IResolveError | undefined;
    protected getErrorMessage<TError extends ParseError>(error: TError): string;
    sameUri(otherUri: URI): boolean;
    get isPromptSnippet(): boolean;
    toString(): string;
    dispose(): void;
}
export declare class PromptFileReference extends BasePromptParser<FilePromptContentProvider> implements IPromptFileReference {
    readonly token: FileReference | MarkdownLink;
    readonly type = "file";
    readonly range: import("@codingame/monaco-vscode-api/vscode/vs/editor/common/core/range").Range;
    readonly path: string;
    readonly text: string;
    constructor(token: FileReference | MarkdownLink, dirname: URI, seenReferences: string[] | undefined, initService: IInstantiationService, logService: ILogService);
    get linkRange(): IRange | undefined;
    toString(): string;
    protected getErrorMessage(error: ParseError): string;
}
