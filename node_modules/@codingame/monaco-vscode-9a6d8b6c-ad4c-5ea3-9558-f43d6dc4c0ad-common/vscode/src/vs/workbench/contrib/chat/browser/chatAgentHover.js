
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { h, $, append } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/dom';
import { renderIcon } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/iconLabel/iconLabels';
import { CancellationTokenSource } from '@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation';
import { Codicon } from '@codingame/monaco-vscode-api/vscode/vs/base/common/codicons';
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { Disposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { FileAccess } from '@codingame/monaco-vscode-api/vscode/vs/base/common/network';
import { ThemeIcon } from '@codingame/monaco-vscode-api/vscode/vs/base/common/themables';
import { URI } from '@codingame/monaco-vscode-api/vscode/vs/base/common/uri';
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { getFullyQualifiedId } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents';
import { IChatAgentService, IChatAgentNameService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents.service';
import { showExtensionsWithIdsCommandId } from '@codingame/monaco-vscode-805e9c2f-56b6-5a43-8b5b-d2dc2d3805fc-common/vscode/vs/workbench/contrib/extensions/browser/extensionsActions';
import { IExtensionsWorkbenchService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/extensions/common/extensions.service';
import { verifiedPublisherIcon } from '@codingame/monaco-vscode-805e9c2f-56b6-5a43-8b5b-d2dc2d3805fc-common/vscode/vs/workbench/services/extensionManagement/common/extensionsIcons';

let ChatAgentHover = class ChatAgentHover extends Disposable {
    constructor(chatAgentService, extensionService, chatAgentNameService) {
        super();
        this.chatAgentService = chatAgentService;
        this.extensionService = extensionService;
        this.chatAgentNameService = chatAgentNameService;
        this._onDidChangeContents = this._register(( new Emitter()));
        this.onDidChangeContents = this._onDidChangeContents.event;
        const hoverElement = h('.chat-agent-hover@root', [
            h('.chat-agent-hover-header', [
                h('.chat-agent-hover-icon@icon'),
                h('.chat-agent-hover-details', [
                    h('.chat-agent-hover-name@name'),
                    h('.chat-agent-hover-extension', [
                        h('.chat-agent-hover-extension-name@extensionName'),
                        h('.chat-agent-hover-separator@separator'),
                        h('.chat-agent-hover-publisher@publisher'),
                    ]),
                ]),
            ]),
            h('.chat-agent-hover-warning@warning'),
            h('span.chat-agent-hover-description@description'),
        ]);
        this.domNode = hoverElement.root;
        this.icon = hoverElement.icon;
        this.name = hoverElement.name;
        this.extensionName = hoverElement.extensionName;
        this.description = hoverElement.description;
        hoverElement.separator.textContent = '|';
        const verifiedBadge = $('span.extension-verified-publisher', undefined, renderIcon(verifiedPublisherIcon));
        this.publisherName = $('span.chat-agent-hover-publisher-name');
        append(hoverElement.publisher, verifiedBadge, this.publisherName);
        hoverElement.warning.appendChild(renderIcon(Codicon.warning));
        hoverElement.warning.appendChild($('span', undefined, ( localize(4467, "This chat extension is using a reserved name."))));
    }
    setAgent(id) {
        const agent = this.chatAgentService.getAgent(id);
        if (agent.metadata.icon instanceof URI) {
            const avatarIcon = $('img.icon');
            avatarIcon.src = ( FileAccess.uriToBrowserUri(agent.metadata.icon).toString(true));
            this.icon.replaceChildren($('.avatar', undefined, avatarIcon));
        }
        else if (agent.metadata.themeIcon) {
            const avatarIcon = $(ThemeIcon.asCSSSelector(agent.metadata.themeIcon));
            this.icon.replaceChildren($('.avatar.codicon-avatar', undefined, avatarIcon));
        }
        this.domNode.classList.toggle('noExtensionName', !!agent.isDynamic);
        const isAllowed = this.chatAgentNameService.getAgentNameRestriction(agent);
        this.name.textContent = isAllowed ? `@${agent.name}` : getFullyQualifiedId(agent);
        this.extensionName.textContent = agent.extensionDisplayName;
        this.publisherName.textContent = agent.publisherDisplayName ?? agent.extensionPublisherId;
        let description = agent.description ?? '';
        if (description) {
            if (!description.match(/[\.\?\!] *$/)) {
                description += '.';
            }
        }
        this.description.textContent = description;
        this.domNode.classList.toggle('allowedName', isAllowed);
        this.domNode.classList.toggle('verifiedPublisher', false);
        if (!agent.isDynamic) {
            const cancel = this._register(( new CancellationTokenSource()));
            this.extensionService.getExtensions([{ id: agent.extensionId.value }], cancel.token).then(extensions => {
                cancel.dispose();
                const extension = extensions[0];
                if (extension?.publisherDomain?.verified) {
                    this.domNode.classList.toggle('verifiedPublisher', true);
                    this._onDidChangeContents.fire();
                }
            });
        }
    }
};
ChatAgentHover = ( __decorate([
    ( __param(0, IChatAgentService)),
    ( __param(1, IExtensionsWorkbenchService)),
    ( __param(2, IChatAgentNameService))
], ChatAgentHover));
function getChatAgentHoverOptions(getAgent, commandService) {
    return {
        actions: [
            {
                commandId: showExtensionsWithIdsCommandId,
                label: ( localize(4468, "View Extension")),
                run: () => {
                    const agent = getAgent();
                    if (agent) {
                        commandService.executeCommand(showExtensionsWithIdsCommandId, [agent.extensionId.value]);
                    }
                },
            }
        ]
    };
}

export { ChatAgentHover, getChatAgentHoverOptions };
