
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { $ as $$1 } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/dom';
import { CancellationTokenSource } from '@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation';
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { Disposable, toDisposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/network';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/resources';
import { assertType } from '@codingame/monaco-vscode-api/vscode/vs/base/common/types';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/charCode';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/marshallingIds';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/path';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/platform';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/uuid';
import '@codingame/monaco-vscode-api/vscode/vs/editor/common/languages';
import '@codingame/monaco-vscode-api/vscode/vs/editor/common/model/textModel';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import '@codingame/monaco-vscode-api/vscode/vs/editor/common/services/modelService';
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { MenuId } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions';
import '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/extensions';
import { ResourcePool } from './chatCollections.js';
import { CodeCompareBlockPart } from '../codeBlockPart.js';
import { isResponseVM } from '../../common/chatViewModel.js';
import { ICodeCompareModelService } from './chatTextEditContentPart.service.js';

const $ = $$1;
let ChatTextEditContentPart = class ChatTextEditContentPart extends Disposable {
    constructor(chatTextEdit, context, rendererOptions, diffEditorPool, currentWidth, codeCompareModelService) {
        super();
        this.codeCompareModelService = codeCompareModelService;
        this._onDidChangeHeight = this._register(( new Emitter()));
        this.onDidChangeHeight = this._onDidChangeHeight.event;
        const element = context.element;
        assertType(isResponseVM(element));
        if (rendererOptions.renderTextEditsAsSummary?.(chatTextEdit.uri)) {
            if (element.response.value.every(item => item.kind === 'textEditGroup')) {
                this.domNode = $('.interactive-edits-summary', undefined, !element.isComplete
                    ? ''
                    : element.isCanceled
                        ? ( localize(4507, "Making changes was aborted."))
                        : ( localize(4508, "Made changes.")));
            }
            else {
                this.domNode = $('div');
            }
        }
        else {
            const cts = ( new CancellationTokenSource());
            let isDisposed = false;
            this._register(toDisposable(() => {
                isDisposed = true;
                cts.dispose(true);
            }));
            this.comparePart = this._register(diffEditorPool.get());
            this._register(this.comparePart.object.onDidChangeContentHeight(() => {
                this._onDidChangeHeight.fire();
            }));
            const data = {
                element,
                edit: chatTextEdit,
                diffData: (async () => {
                    const ref = await this.codeCompareModelService.createModel(element, chatTextEdit);
                    if (isDisposed) {
                        ref.dispose();
                        return;
                    }
                    this._register(ref);
                    return {
                        modified: ref.object.modified.textEditorModel,
                        original: ref.object.original.textEditorModel,
                        originalSha1: ref.object.originalSha1
                    };
                })()
            };
            this.comparePart.object.render(data, currentWidth, cts.token);
            this.domNode = this.comparePart.object.element;
        }
    }
    layout(width) {
        this.comparePart?.object.layout(width);
    }
    hasSameContent(other) {
        return other.kind === 'textEditGroup';
    }
    addDisposable(disposable) {
        this._register(disposable);
    }
};
ChatTextEditContentPart = ( __decorate([
    ( __param(5, ICodeCompareModelService))
], ChatTextEditContentPart));
let DiffEditorPool = class DiffEditorPool extends Disposable {
    inUse() {
        return this._pool.inUse;
    }
    constructor(options, delegate, overflowWidgetsDomNode, instantiationService) {
        super();
        this._pool = this._register(( new ResourcePool(() => {
            return instantiationService.createInstance(CodeCompareBlockPart, options, MenuId.ChatCompareBlock, delegate, overflowWidgetsDomNode);
        })));
    }
    get() {
        const codeBlock = this._pool.get();
        let stale = false;
        return {
            object: codeBlock,
            isStale: () => stale,
            dispose: () => {
                codeBlock.reset();
                stale = true;
                this._pool.release(codeBlock);
            }
        };
    }
};
DiffEditorPool = ( __decorate([
    ( __param(3, IInstantiationService))
], DiffEditorPool));

export { ChatTextEditContentPart, DiffEditorPool };
