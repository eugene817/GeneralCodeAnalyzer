
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { Disposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { FilePromptParser } from '../../common/promptSyntax/parsers/filePromptParser.js';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';

let ChatPromptAttachmentModel = class ChatPromptAttachmentModel extends Disposable {
    get reference() {
        return this._reference;
    }
    get references() {
        const { reference } = this;
        const { errorCondition } = this.reference;
        if (errorCondition) {
            return [];
        }
        return [
            ...reference.allValidReferencesUris,
            reference.uri,
        ];
    }
    get allSettled() {
        return this.reference.allSettled();
    }
    get topError() {
        return this.reference.topError;
    }
    onUpdate(callback) {
        this._register(this._onUpdate.event(callback));
        return this;
    }
    onDispose(callback) {
        this._register(this._onDispose.event(callback));
        return this;
    }
    constructor(uri, initService) {
        super();
        this.initService = initService;
        this._onUpdate = this._register(( new Emitter()));
        this._onDispose = this._register(( new Emitter()));
        this._onUpdate.fire = this._onUpdate.fire.bind(this._onUpdate);
        this._reference = this._register(this.initService.createInstance(FilePromptParser, uri, []))
            .onUpdate(this._onUpdate.fire);
    }
    resolve() {
        this._reference.start();
        return this;
    }
    dispose() {
        this._onDispose.fire();
        super.dispose();
    }
};
ChatPromptAttachmentModel = ( __decorate([
    ( __param(1, IInstantiationService))
], ChatPromptAttachmentModel));

export { ChatPromptAttachmentModel };
