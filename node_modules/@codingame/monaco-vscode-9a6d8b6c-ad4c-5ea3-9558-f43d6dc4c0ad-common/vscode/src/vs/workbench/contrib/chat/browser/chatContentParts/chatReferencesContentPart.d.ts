import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IMarkdownString } from "@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent";
import { Disposable, IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { MenuId } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { IMenuService } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions.service";
import { IContextMenuService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextview/browser/contextView.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { WorkbenchList } from "@codingame/monaco-vscode-api/vscode/vs/platform/list/browser/listService";
import { IOpenerService } from "@codingame/monaco-vscode-api/vscode/vs/platform/opener/common/opener.service";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { WorkingSetEntryState } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatEditingService";
import { IChatContentReference, IChatWarningMessage } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatService";
import { IChatRendererContent } from "../../common/chatViewModel.js";
import { ChatTreeItem } from "../chat.js";
import { IDisposableReference } from "./chatCollections.js";
import { IChatContentPart, IChatContentPartRenderContext } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/browser/chatContentParts/chatContentParts";
export interface IChatReferenceListItem extends IChatContentReference {
    title?: string;
    description?: string;
    state?: WorkingSetEntryState;
    excluded?: boolean;
    isMarkedReadonly?: boolean;
}
export type IChatCollapsibleListItem = IChatReferenceListItem | IChatWarningMessage;
export declare class ChatCollapsibleListContentPart extends Disposable implements IChatContentPart {
    private readonly data;
    private readonly labelOverride;
    protected readonly context: IChatContentPartRenderContext;
    private readonly contentReferencesListPool;
    private readonly openerService;
    private readonly menuService;
    private readonly instantiationService;
    private readonly contextMenuService;
    domNode: HTMLElement;
    private readonly _onDidChangeHeight;
    readonly onDidChangeHeight: Event<void>;
    private hasFollowingContent;
    constructor(data: ReadonlyArray<IChatCollapsibleListItem>, labelOverride: IMarkdownString | string | undefined, context: IChatContentPartRenderContext, contentReferencesListPool: CollapsibleListPool, openerService: IOpenerService, menuService: IMenuService, instantiationService: IInstantiationService, contextMenuService: IContextMenuService);
    protected init(): void;
    hasSameContent(other: IChatRendererContent, followingContent: IChatRendererContent[], element: ChatTreeItem): boolean;
    private updateAriaLabel;
    addDisposable(disposable: IDisposable): void;
    private _isExpanded;
    protected isExpanded(): boolean;
    protected setExpanded(value: boolean): void;
}
export interface IChatUsedReferencesListOptions {
    expandedWhenEmptyResponse?: boolean;
}
export declare class ChatUsedReferencesListContentPart extends ChatCollapsibleListContentPart {
    private readonly options;
    constructor(data: ReadonlyArray<IChatCollapsibleListItem>, labelOverride: IMarkdownString | string | undefined, context: IChatContentPartRenderContext, contentReferencesListPool: CollapsibleListPool, options: IChatUsedReferencesListOptions, openerService: IOpenerService, menuService: IMenuService, instantiationService: IInstantiationService, contextMenuService: IContextMenuService);
    protected init(): void;
    protected isExpanded(): boolean;
    protected setExpanded(value: boolean): void;
}
export declare class CollapsibleListPool extends Disposable {
    private _onDidChangeVisibility;
    private readonly menuId;
    private readonly instantiationService;
    private readonly themeService;
    private readonly labelService;
    private _pool;
    get inUse(): ReadonlySet<WorkbenchList<IChatCollapsibleListItem>>;
    constructor(_onDidChangeVisibility: Event<boolean>, menuId: MenuId | undefined, instantiationService: IInstantiationService, themeService: IThemeService, labelService: ILabelService);
    private listFactory;
    get(): IDisposableReference<WorkbenchList<IChatCollapsibleListItem>>;
}
