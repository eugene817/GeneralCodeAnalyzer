
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { MenuId } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions';
import { Extensions } from '@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configurationRegistry';
import { RawContextKey } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey';
import { Registry } from '@codingame/monaco-vscode-api/vscode/vs/platform/registry/common/platform';
import { registerColor, transparent } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colorUtils';
import { focusBorder } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/baseColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/chartsColors';
import { editorWidgetForeground, editorWidgetBackground, editorWidgetBorder, widgetShadow, diffInserted, diffRemoved } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/editorColors';
import { inputPlaceholderForeground, inputBackground } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/inputColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/listColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/menuColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/minimapColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/miscColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/quickpickColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/searchColors';

var InlineChatConfigKeys;
(function (InlineChatConfigKeys) {
    InlineChatConfigKeys["FinishOnType"] = "inlineChat.finishOnType";
    InlineChatConfigKeys["StartWithOverlayWidget"] = "inlineChat.startWithOverlayWidget";
    InlineChatConfigKeys["HoldToSpeech"] = "inlineChat.holdToSpeech";
    InlineChatConfigKeys["AccessibleDiffView"] = "inlineChat.accessibleDiffView";
    InlineChatConfigKeys["LineEmptyHint"] = "inlineChat.lineEmptyHint";
    InlineChatConfigKeys["LineNLHint"] = "inlineChat.lineNaturalLanguageHint";
})(InlineChatConfigKeys || (InlineChatConfigKeys = {}));
( Registry.as(Extensions.Configuration)).registerConfiguration({
    id: 'editor',
    properties: {
        [InlineChatConfigKeys.FinishOnType]: {
            description: ( localize(
                7046,
                "Whether to finish an inline chat session when typing outside of changed regions."
            )),
            default: false,
            type: 'boolean'
        },
        [InlineChatConfigKeys.HoldToSpeech]: {
            description: ( localize(
                7047,
                "Whether holding the inline chat keybinding will automatically enable speech recognition."
            )),
            default: true,
            type: 'boolean'
        },
        [InlineChatConfigKeys.AccessibleDiffView]: {
            description: ( localize(
                7048,
                "Whether the inline chat also renders an accessible diff viewer for its changes."
            )),
            default: 'auto',
            type: 'string',
            enum: ['auto', 'on', 'off'],
            markdownEnumDescriptions: [
                ( localize(
                7049,
                "The accessible diff viewer is based on screen reader mode being enabled."
            )),
                ( localize(7050, "The accessible diff viewer is always enabled.")),
                ( localize(7051, "The accessible diff viewer is never enabled.")),
            ],
        },
        [InlineChatConfigKeys.LineEmptyHint]: {
            description: ( localize(7052, "Whether empty lines show a hint to generate code with inline chat.")),
            default: false,
            type: 'boolean',
            tags: ['experimental'],
        },
        [InlineChatConfigKeys.LineNLHint]: {
            markdownDescription: ( localize(
                7053,
                "Whether lines that are dominated by natural language or pseudo code show a hint to continue with inline chat. For instance, `class Person with name and hobbies` would show a hint to continue with chat."
            )),
            default: true,
            type: 'boolean',
            tags: ['experimental'],
        },
    }
});
const INLINE_CHAT_ID = 'interactiveEditor';
var InlineChatResponseType;
(function (InlineChatResponseType) {
    InlineChatResponseType["None"] = "none";
    InlineChatResponseType["Messages"] = "messages";
    InlineChatResponseType["MessagesAndEdits"] = "messagesAndEdits";
})(InlineChatResponseType || (InlineChatResponseType = {}));
const CTX_INLINE_CHAT_POSSIBLE = ( new RawContextKey('inlineChatPossible', false, ( localize(
    7054,
    "Whether a provider for inline chat exists and whether an editor for inline chat is open"
))));
const CTX_INLINE_CHAT_HAS_AGENT = ( new RawContextKey('inlineChatHasProvider', false, ( localize(7055, "Whether a provider for interactive editors exists"))));
const CTX_INLINE_CHAT_HAS_AGENT2 = ( new RawContextKey('inlineChatHasEditsAgent', false, ( localize(7056, "Whether an agent for inliine for interactive editors exists"))));
const CTX_INLINE_CHAT_VISIBLE = ( new RawContextKey('inlineChatVisible', false, ( localize(7057, "Whether the interactive editor input is visible"))));
const CTX_INLINE_CHAT_FOCUSED = ( new RawContextKey('inlineChatFocused', false, ( localize(7058, "Whether the interactive editor input is focused"))));
const CTX_INLINE_CHAT_EDITING = ( new RawContextKey('inlineChatEditing', true, ( localize(
    7059,
    "Whether the user is currently editing or generating code in the inline chat"
))));
const CTX_INLINE_CHAT_RESPONSE_FOCUSED = ( new RawContextKey('inlineChatResponseFocused', false, ( localize(7060, "Whether the interactive widget's response is focused"))));
const CTX_INLINE_CHAT_INNER_CURSOR_FIRST = ( new RawContextKey('inlineChatInnerCursorFirst', false, ( localize(
    7061,
    "Whether the cursor of the iteractive editor input is on the first line"
))));
const CTX_INLINE_CHAT_INNER_CURSOR_LAST = ( new RawContextKey('inlineChatInnerCursorLast', false, ( localize(
    7062,
    "Whether the cursor of the iteractive editor input is on the last line"
))));
const CTX_INLINE_CHAT_OUTER_CURSOR_POSITION = ( new RawContextKey('inlineChatOuterCursorPosition', '', ( localize(
    7063,
    "Whether the cursor of the outer editor is above or below the interactive editor input"
))));
const CTX_INLINE_CHAT_HAS_STASHED_SESSION = ( new RawContextKey('inlineChatHasStashedSession', false, ( localize(7064, "Whether interactive editor has kept a session for quick restore"))));
const CTX_INLINE_CHAT_CHANGE_HAS_DIFF = ( new RawContextKey('inlineChatChangeHasDiff', false, ( localize(7065, "Whether the current change supports showing a diff"))));
const CTX_INLINE_CHAT_CHANGE_SHOWS_DIFF = ( new RawContextKey('inlineChatChangeShowsDiff', false, ( localize(7066, "Whether the current change showing a diff"))));
const CTX_INLINE_CHAT_REQUEST_IN_PROGRESS = ( new RawContextKey('inlineChatRequestInProgress', false, ( localize(7067, "Whether an inline chat request is currently in progress"))));
const CTX_INLINE_CHAT_RESPONSE_TYPE = ( new RawContextKey('inlineChatResponseType', InlineChatResponseType.None, ( localize(
    7068,
    "What type was the responses have been receieved, nothing yet, just messages, or messaged and local edits"
))));
const ACTION_START = 'inlineChat.start';
const ACTION_ACCEPT_CHANGES = 'inlineChat.acceptChanges';
const ACTION_DISCARD_CHANGES = 'inlineChat.discardHunkChange';
const ACTION_REGENERATE_RESPONSE = 'inlineChat.regenerate';
const ACTION_VIEW_IN_CHAT = 'inlineChat.viewInChat';
const ACTION_TOGGLE_DIFF = 'inlineChat.toggleDiff';
const ACTION_REPORT_ISSUE = 'inlineChat.reportIssue';
const MENU_INLINE_CHAT_WIDGET_STATUS = MenuId.for('inlineChatWidget.status');
const MENU_INLINE_CHAT_WIDGET_SECONDARY = MenuId.for('inlineChatWidget.secondary');
const MENU_INLINE_CHAT_ZONE = MenuId.for('inlineChatWidget.changesZone');
const inlineChatForeground = registerColor('inlineChat.foreground', editorWidgetForeground, ( localize(7069, "Foreground color of the interactive editor widget")));
const inlineChatBackground = registerColor('inlineChat.background', editorWidgetBackground, ( localize(7070, "Background color of the interactive editor widget")));
registerColor('inlineChat.border', editorWidgetBorder, ( localize(7071, "Border color of the interactive editor widget")));
registerColor('inlineChat.shadow', widgetShadow, ( localize(7072, "Shadow color of the interactive editor widget")));
registerColor('inlineChatInput.border', editorWidgetBorder, ( localize(7073, "Border color of the interactive editor input")));
registerColor('inlineChatInput.focusBorder', focusBorder, ( localize(7074, "Border color of the interactive editor input when focused")));
registerColor('inlineChatInput.placeholderForeground', inputPlaceholderForeground, ( localize(7075, "Foreground color of the interactive editor input placeholder")));
registerColor('inlineChatInput.background', inputBackground, ( localize(7076, "Background color of the interactive editor input")));
registerColor('inlineChatDiff.inserted', ( transparent(diffInserted, .5)), ( localize(7077, "Background color of inserted text in the interactive editor input")));
const overviewRulerInlineChatDiffInserted = registerColor('editorOverviewRuler.inlineChatInserted', { dark: ( transparent(diffInserted, 0.6)), light: ( transparent(diffInserted, 0.8)), hcDark: ( transparent(diffInserted, 0.6)), hcLight: ( transparent(diffInserted, 0.8)) }, ( localize(7078, 'Overview ruler marker color for inline chat inserted content.')));
const minimapInlineChatDiffInserted = registerColor('editorMinimap.inlineChatInserted', { dark: ( transparent(diffInserted, 0.6)), light: ( transparent(diffInserted, 0.8)), hcDark: ( transparent(diffInserted, 0.6)), hcLight: ( transparent(diffInserted, 0.8)) }, ( localize(7079, 'Minimap marker color for inline chat inserted content.')));
registerColor('inlineChatDiff.removed', ( transparent(diffRemoved, .5)), ( localize(7080, "Background color of removed text in the interactive editor input")));
registerColor('editorOverviewRuler.inlineChatRemoved', { dark: ( transparent(diffRemoved, 0.6)), light: ( transparent(diffRemoved, 0.8)), hcDark: ( transparent(diffRemoved, 0.6)), hcLight: ( transparent(diffRemoved, 0.8)) }, ( localize(7081, 'Overview ruler marker color for inline chat removed content.')));

export { ACTION_ACCEPT_CHANGES, ACTION_DISCARD_CHANGES, ACTION_REGENERATE_RESPONSE, ACTION_REPORT_ISSUE, ACTION_START, ACTION_TOGGLE_DIFF, ACTION_VIEW_IN_CHAT, CTX_INLINE_CHAT_CHANGE_HAS_DIFF, CTX_INLINE_CHAT_CHANGE_SHOWS_DIFF, CTX_INLINE_CHAT_EDITING, CTX_INLINE_CHAT_FOCUSED, CTX_INLINE_CHAT_HAS_AGENT, CTX_INLINE_CHAT_HAS_AGENT2, CTX_INLINE_CHAT_HAS_STASHED_SESSION, CTX_INLINE_CHAT_INNER_CURSOR_FIRST, CTX_INLINE_CHAT_INNER_CURSOR_LAST, CTX_INLINE_CHAT_OUTER_CURSOR_POSITION, CTX_INLINE_CHAT_POSSIBLE, CTX_INLINE_CHAT_REQUEST_IN_PROGRESS, CTX_INLINE_CHAT_RESPONSE_FOCUSED, CTX_INLINE_CHAT_RESPONSE_TYPE, CTX_INLINE_CHAT_VISIBLE, INLINE_CHAT_ID, InlineChatConfigKeys, InlineChatResponseType, MENU_INLINE_CHAT_WIDGET_SECONDARY, MENU_INLINE_CHAT_WIDGET_STATUS, MENU_INLINE_CHAT_ZONE, inlineChatBackground, inlineChatForeground, minimapInlineChatDiffInserted, overviewRulerInlineChatDiffInserted };
