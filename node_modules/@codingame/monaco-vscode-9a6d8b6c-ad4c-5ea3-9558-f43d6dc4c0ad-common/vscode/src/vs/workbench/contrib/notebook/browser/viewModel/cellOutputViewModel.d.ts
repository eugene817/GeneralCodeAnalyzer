import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { ICellOutputViewModel, IGenericCellViewModel } from "../notebookBrowser.js";
import { NotebookTextModel } from "@codingame/monaco-vscode-notebook-service-override/vscode/vs/workbench/contrib/notebook/common/model/notebookTextModel";
import { ICellOutput, IOrderedMimeType } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookCommon";
import { INotebookService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookService.service";
export declare class CellOutputViewModel extends Disposable implements ICellOutputViewModel {
    readonly cellViewModel: IGenericCellViewModel;
    private readonly _outputRawData;
    private readonly _notebookService;
    private _onDidResetRendererEmitter;
    readonly onDidResetRenderer: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private alwaysShow;
    visible: import("@codingame/monaco-vscode-api/vscode/vs/base/common/observable").ISettableObservable<boolean, void>;
    setVisible(visible?: boolean, force?: boolean): void;
    outputHandle: number;
    get model(): ICellOutput;
    private _pickedMimeType;
    get pickedMimeType(): IOrderedMimeType | undefined;
    set pickedMimeType(value: IOrderedMimeType | undefined);
    constructor(cellViewModel: IGenericCellViewModel, _outputRawData: ICellOutput, _notebookService: INotebookService);
    hasMultiMimeType(): boolean;
    resolveMimeTypes(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined): [
        readonly IOrderedMimeType[],
        number
    ];
    resetRenderer(): void;
    toRawJSON(): {
        outputs: import("@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookCommon").IOutputItemDto[];
    };
}
