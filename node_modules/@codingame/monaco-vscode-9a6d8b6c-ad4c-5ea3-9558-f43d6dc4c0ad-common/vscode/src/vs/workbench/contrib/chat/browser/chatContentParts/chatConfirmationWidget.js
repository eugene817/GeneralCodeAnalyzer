
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { h } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/dom';
import './media/chatConfirmationWidget.css.js';
import { Button } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/button/button';
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { MarkdownString } from '@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent';
import { Disposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { MarkdownRenderer } from '@codingame/monaco-vscode-api/vscode/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { defaultButtonStyles } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/browser/defaultStyles';

let BaseChatConfirmationWidget = class BaseChatConfirmationWidget extends Disposable {
    get onDidClick() { return this._onDidClick.event; }
    get onDidChangeHeight() { return this._onDidChangeHeight.event; }
    get domNode() {
        return this._domNode;
    }
    setShowButtons(showButton) {
        this.domNode.classList.toggle('hideButtons', !showButton);
    }
    constructor(title, buttons, instantiationService) {
        super();
        this.instantiationService = instantiationService;
        this._onDidClick = this._register(( new Emitter()));
        this._onDidChangeHeight = this._register(( new Emitter()));
        const elements = h('.chat-confirmation-widget@root', [
            h('.chat-confirmation-widget-title@title'),
            h('.chat-confirmation-widget-message@message'),
            h('.chat-confirmation-buttons-container@buttonsContainer'),
        ]);
        this._domNode = elements.root;
        this.markdownRenderer = this.instantiationService.createInstance(MarkdownRenderer, {});
        const renderedTitle = this._register(this.markdownRenderer.render(( new MarkdownString(title)), {
            asyncRenderCallback: () => this._onDidChangeHeight.fire(),
        }));
        elements.title.append(renderedTitle.element);
        this.messageElement = elements.message;
        buttons.forEach(buttonData => {
            const button = this._register(( new Button(
                elements.buttonsContainer,
                { ...defaultButtonStyles, secondary: buttonData.isSecondary, title: buttonData.tooltip }
            )));
            button.label = buttonData.label;
            this._register(button.onDidClick(() => this._onDidClick.fire(buttonData)));
        });
    }
    renderMessage(element) {
        this.messageElement.append(element);
    }
};
BaseChatConfirmationWidget = ( __decorate([
    ( __param(2, IInstantiationService))
], BaseChatConfirmationWidget));
let ChatConfirmationWidget = class ChatConfirmationWidget extends BaseChatConfirmationWidget {
    constructor(title, message, buttons, instantiationService) {
        super(title, buttons, instantiationService);
        this.message = message;
        const renderedMessage = this._register(this.markdownRenderer.render(typeof this.message === 'string' ? ( new MarkdownString(this.message)) : this.message, { asyncRenderCallback: () => this._onDidChangeHeight.fire() }));
        this.renderMessage(renderedMessage.element);
    }
};
ChatConfirmationWidget = ( __decorate([
    ( __param(3, IInstantiationService))
], ChatConfirmationWidget));
let ChatCustomConfirmationWidget = class ChatCustomConfirmationWidget extends BaseChatConfirmationWidget {
    constructor(title, messageElement, buttons, instantiationService) {
        super(title, buttons, instantiationService);
        this.renderMessage(messageElement);
    }
};
ChatCustomConfirmationWidget = ( __decorate([
    ( __param(3, IInstantiationService))
], ChatCustomConfirmationWidget));

export { ChatConfirmationWidget, ChatCustomConfirmationWidget };
