
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { URI } from '@codingame/monaco-vscode-api/vscode/vs/base/common/uri';
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { basename } from '@codingame/monaco-vscode-api/vscode/vs/base/common/resources';
import { Disposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { ChatPromptAttachmentsCollection } from './chatAttachmentModel/chatPromptAttachmentsCollection.js';

let ChatAttachmentModel = class ChatAttachmentModel extends Disposable {
    constructor(initService) {
        super();
        this.initService = initService;
        this._attachments = ( new Map());
        this._onDidChangeContext = this._register(( new Emitter()));
        this.onDidChangeContext = this._onDidChangeContext.event;
        this.promptInstructions = this._register(this.initService.createInstance(ChatPromptAttachmentsCollection)).onUpdate(() => {
            this._onDidChangeContext.fire();
        });
    }
    get attachments() {
        return Array.from(( this._attachments.values()));
    }
    get size() {
        return this._attachments.size;
    }
    get fileAttachments() {
        return this.attachments.reduce((acc, file) => {
            if (file.isFile && URI.isUri(file.value)) {
                acc.push(file.value);
            }
            return acc;
        }, []);
    }
    getAttachmentIDs() {
        return ( new Set(( this._attachments.keys())));
    }
    clear() {
        this._attachments.clear();
        this._onDidChangeContext.fire();
    }
    delete(...variableEntryIds) {
        for (const variableEntryId of variableEntryIds) {
            this._attachments.delete(variableEntryId);
        }
        this._onDidChangeContext.fire();
    }
    addFile(uri, range) {
        this.addContext(this.asVariableEntry(uri, range));
    }
    asVariableEntry(uri, range, isMarkedReadonly) {
        return {
            value: range ? { uri, range } : uri,
            id: ( uri.toString()) + (range?.toString() ?? ''),
            name: basename(uri),
            isFile: true,
            isMarkedReadonly,
        };
    }
    addContext(...attachments) {
        let hasAdded = false;
        for (const attachment of attachments) {
            if (!( this._attachments.has(attachment.id))) {
                this._attachments.set(attachment.id, attachment);
                hasAdded = true;
            }
        }
        if (hasAdded) {
            this._onDidChangeContext.fire();
        }
    }
    clearAndSetContext(...attachments) {
        this.clear();
        this.addContext(...attachments);
    }
};
ChatAttachmentModel = ( __decorate([
    ( __param(0, IInstantiationService))
], ChatAttachmentModel));

export { ChatAttachmentModel };
