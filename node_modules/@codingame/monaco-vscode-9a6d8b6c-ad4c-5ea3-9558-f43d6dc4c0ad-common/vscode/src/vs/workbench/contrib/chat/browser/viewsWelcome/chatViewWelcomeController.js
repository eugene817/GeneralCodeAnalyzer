
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { $ as $$1, append, clearNode } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/dom';
import { Button } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/button/button';
import { renderIcon } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/iconLabel/iconLabels';
import { Event } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { MarkdownString } from '@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent';
import { Disposable, DisposableStore } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { MarkdownRenderer } from '@codingame/monaco-vscode-api/vscode/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer';
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { IContextKeyService } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { ILogService } from '@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service';
import { IOpenerService } from '@codingame/monaco-vscode-api/vscode/vs/platform/opener/common/opener.service';
import { defaultButtonStyles } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/browser/defaultStyles';
import { ChatAgentLocation } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents';
import { IChatAgentService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents.service';
import { chatViewsWelcomeRegistry } from './chatViewsWelcome.js';

const $ = $$1;
let ChatViewWelcomeController = class ChatViewWelcomeController extends Disposable {
    constructor(container, delegate, location, contextKeyService, instantiationService) {
        super();
        this.container = container;
        this.delegate = delegate;
        this.location = location;
        this.contextKeyService = contextKeyService;
        this.instantiationService = instantiationService;
        this.enabled = false;
        this.enabledDisposables = this._register(( new DisposableStore()));
        this.renderDisposables = this._register(( new DisposableStore()));
        this.element = append(this.container, $$1('.chat-view-welcome'));
        this._register(Event.runAndSubscribe(delegate.onDidChangeViewWelcomeState, () => this.update()));
        this._register(chatViewsWelcomeRegistry.onDidChange(() => this.update(true)));
    }
    update(force) {
        const enabled = this.delegate.shouldShowWelcome();
        if (this.enabled === enabled && !force) {
            return;
        }
        this.enabled = enabled;
        this.enabledDisposables.clear();
        if (!enabled) {
            this.container.classList.toggle('chat-view-welcome-visible', false);
            this.renderDisposables.clear();
            return;
        }
        const descriptors = chatViewsWelcomeRegistry.get();
        if (descriptors.length) {
            this.render(descriptors);
            const descriptorKeys = ( new Set(descriptors.flatMap(d => ( d.when.keys()))));
            this.enabledDisposables.add(this.contextKeyService.onDidChangeContext(e => {
                if (e.affectsSome(descriptorKeys)) {
                    this.render(descriptors);
                }
            }));
        }
    }
    render(descriptors) {
        this.renderDisposables.clear();
        clearNode(this.element);
        const matchingDescriptors = descriptors.filter(descriptor => this.contextKeyService.contextMatchesRules(descriptor.when));
        let enabledDescriptor;
        for (const descriptor of matchingDescriptors) {
            if (typeof descriptor.content === 'function') {
                enabledDescriptor = descriptor;
                break;
            }
        }
        enabledDescriptor = enabledDescriptor ?? matchingDescriptors.at(0);
        if (enabledDescriptor) {
            const content = {
                icon: enabledDescriptor.icon,
                title: enabledDescriptor.title,
                message: enabledDescriptor.content
            };
            const welcomeView = this.renderDisposables.add(this.instantiationService.createInstance(ChatViewWelcomePart, content, { firstLinkToButton: true, location: this.location }));
            this.element.appendChild(welcomeView.element);
            this.container.classList.toggle('chat-view-welcome-visible', true);
        }
        else {
            this.container.classList.toggle('chat-view-welcome-visible', false);
        }
    }
};
ChatViewWelcomeController = ( __decorate([
    ( __param(3, IContextKeyService)),
    ( __param(4, IInstantiationService))
], ChatViewWelcomeController));
let ChatViewWelcomePart = class ChatViewWelcomePart extends Disposable {
    constructor(content, options, openerService, instantiationService, logService, chatAgentService) {
        super();
        this.openerService = openerService;
        this.instantiationService = instantiationService;
        this.logService = logService;
        this.element = $$1('.chat-welcome-view');
        try {
            const renderer = this.instantiationService.createInstance(MarkdownRenderer, {});
            const icon = append(this.element, $('.chat-welcome-view-icon'));
            if (content.icon) {
                icon.appendChild(renderIcon(content.icon));
            }
            const title = append(this.element, $('.chat-welcome-view-title'));
            title.textContent = content.title;
            if (options?.location === ChatAgentLocation.EditingSession && typeof content.message !== 'function' && chatAgentService.toolsAgentModeEnabled && options.isWidgetWelcomeViewContent) {
                const agentMessage = ( localize(
                    4802,
                    "Ask Copilot to edit your files in [agent mode]({0}). Copilot will automatically use multiple requests to pick files to edit, run terminal commands, and iterate on errors.\n\nCopilot is powered by AI, so mistakes are possible. Review output carefully before use.",
                    'https://aka.ms/vscode-copilot-agent'
                ));
                content.message = ( new MarkdownString(agentMessage));
                const container = append(this.element, $('.chat-welcome-view-indicator-container'));
                append(container, $('.chat-welcome-view-subtitle', undefined, ( localize(4803, "Agent Mode"))));
                append(container, $('.chat-welcome-view-indicator', undefined, ( localize(4804, "EXPERIMENTAL"))));
            }
            const message = append(this.element, $('.chat-welcome-view-message'));
            if (typeof content.message === 'function') {
                append(message, content.message(this._register(( new DisposableStore()))));
            }
            else {
                const messageResult = this._register(renderer.render(content.message));
                const firstLink = options?.firstLinkToButton ? messageResult.element.querySelector('a') : undefined;
                if (firstLink) {
                    const target = firstLink.getAttribute('data-href');
                    const button = this._register(( new Button(firstLink.parentElement, defaultButtonStyles)));
                    button.label = firstLink.textContent ?? '';
                    if (target) {
                        this._register(button.onDidClick(() => {
                            this.openerService.open(target, { allowCommands: true });
                        }));
                    }
                    firstLink.replaceWith(button.element);
                }
                append(message, messageResult.element);
            }
            if (content.tips) {
                const tips = append(this.element, $('.chat-welcome-view-tips'));
                const tipsResult = this._register(renderer.render(content.tips));
                tips.appendChild(tipsResult.element);
            }
        }
        catch (err) {
            this.logService.error('Failed to render chat view welcome content', err);
        }
    }
};
ChatViewWelcomePart = ( __decorate([
    ( __param(2, IOpenerService)),
    ( __param(3, IInstantiationService)),
    ( __param(4, ILogService)),
    ( __param(5, IChatAgentService))
], ChatViewWelcomePart));

export { ChatViewWelcomeController, ChatViewWelcomePart };
