import { Emitter } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { PrefixSumComputer } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/model/prefixSumComputer";
import { IDiffNestedCellViewModel } from "./notebookDiffEditorBrowser.js";
import { ICellOutputViewModel, IGenericCellViewModel } from "../notebookBrowser.js";
import { CellViewModelStateChangeEvent } from "../notebookViewEvents.js";
import { NotebookCellTextModel } from "../../common/model/notebookCellTextModel.js";
import { INotebookService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookService.service";
export declare class DiffNestedCellViewModel extends Disposable implements IDiffNestedCellViewModel, IGenericCellViewModel {
    readonly textModel: NotebookCellTextModel;
    private _notebookService;
    private _id;
    get id(): string;
    get outputs(): import("@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookCommon").ICellOutput[];
    get language(): string;
    get metadata(): import("@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookCommon").NotebookCellMetadata;
    get uri(): import("@codingame/monaco-vscode-api/vscode/vs/base/common/uri").URI;
    get handle(): number;
    protected readonly _onDidChangeState: Emitter<CellViewModelStateChangeEvent>;
    private _hoveringOutput;
    get outputIsHovered(): boolean;
    set outputIsHovered(v: boolean);
    private _focusOnOutput;
    get outputIsFocused(): boolean;
    set outputIsFocused(v: boolean);
    private _focusInputInOutput;
    get inputInOutputIsFocused(): boolean;
    set inputInOutputIsFocused(v: boolean);
    private _outputViewModels;
    get outputsViewModels(): ICellOutputViewModel[];
    protected _outputCollection: number[];
    protected _outputsTop: PrefixSumComputer | null;
    protected readonly _onDidChangeOutputLayout: Emitter<void>;
    readonly onDidChangeOutputLayout: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    constructor(textModel: NotebookCellTextModel, _notebookService: INotebookService);
    private _ensureOutputsTop;
    getOutputOffset(index: number): number;
    updateOutputHeight(index: number, height: number): void;
    getOutputTotalHeight(): number;
    dispose(): void;
}
