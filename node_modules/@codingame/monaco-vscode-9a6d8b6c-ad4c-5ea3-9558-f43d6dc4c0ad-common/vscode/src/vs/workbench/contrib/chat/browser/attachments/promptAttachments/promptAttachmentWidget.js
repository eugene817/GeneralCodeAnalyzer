
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { URI } from '@codingame/monaco-vscode-api/vscode/vs/base/common/uri';
import { $, clearNode, append, addDisposableListener, EventType, getWindow, EventHelper } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/dom';
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { Codicon } from '@codingame/monaco-vscode-api/vscode/vs/base/common/codicons';
import { ThemeIcon } from '@codingame/monaco-vscode-api/vscode/vs/base/common/themables';
import { ResourceContextKey } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/contextkeys';
import { Button } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/button/button';
import { basename, dirname } from '@codingame/monaco-vscode-api/vscode/vs/base/common/resources';
import { ILabelService } from '@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service';
import { StandardMouseEvent } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/mouseEvent';
import { IModelService } from '@codingame/monaco-vscode-api/vscode/vs/editor/common/services/model.service';
import { IHoverService } from '@codingame/monaco-vscode-api/vscode/vs/platform/hover/browser/hover.service';
import { Disposable, DisposableStore } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { ILanguageService } from '@codingame/monaco-vscode-api/vscode/vs/editor/common/languages/language.service';
import { FileKind } from '@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files';
import { IFileService } from '@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service';
import { MenuId } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions';
import { IMenuService } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions.service';
import { getCleanPromptName } from '@codingame/monaco-vscode-52bb4d5b-ba1a-57fd-9bee-b28824214eac-common/vscode/vs/platform/prompts/common/constants';
import { IContextKeyService } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service';
import { IContextMenuService } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextview/browser/contextView.service';
import { getDefaultHoverDelegate } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/hover/hoverDelegateFactory';
import { getFlatContextMenuActions } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/browser/menuEntryActionViewItem';

let PromptAttachmentWidget = class PromptAttachmentWidget extends Disposable {
    get uri() {
        return this.model.reference.uri;
    }
    onDispose(callback) {
        this._register(this._onDispose.event(callback));
        return this;
    }
    constructor(model, resourceLabels, contextKeyService, contextMenuService, hoverService, labelService, menuService, fileService, languageService, modelService) {
        super();
        this.model = model;
        this.resourceLabels = resourceLabels;
        this.contextKeyService = contextKeyService;
        this.contextMenuService = contextMenuService;
        this.hoverService = hoverService;
        this.labelService = labelService;
        this.menuService = menuService;
        this.fileService = fileService;
        this.languageService = languageService;
        this.modelService = modelService;
        this._onDispose = this._register(( new Emitter()));
        this.renderDisposables = this._register(( new DisposableStore()));
        this.domNode = $('.chat-prompt-attachment.chat-attached-context-attachment.show-file-icons.implicit');
        this.render = this.render.bind(this);
        this.dispose = this.dispose.bind(this);
        this.model.onUpdate(this.render);
        this.model.onDispose(this.dispose);
        this.render();
    }
    render() {
        clearNode(this.domNode);
        this.renderDisposables.clear();
        this.domNode.classList.remove('warning', 'error', 'disabled');
        const { topError } = this.model;
        const label = this.resourceLabels.create(this.domNode, { supportIcons: true });
        const file = this.model.reference.uri;
        const fileBasename = basename(file);
        const fileDirname = dirname(file);
        const friendlyName = `${fileBasename} ${fileDirname}`;
        const ariaLabel = ( localize(4425, "Prompt attachment, {0}", friendlyName));
        const uriLabel = this.labelService.getUriLabel(file, { relative: true });
        const promptLabel = ( localize(4426, "Prompt"));
        let title = `${promptLabel} ${uriLabel}`;
        if (topError) {
            const { isRootError, message: details } = topError;
            const isWarning = !isRootError;
            this.domNode.classList.add((isWarning) ? 'warning' : 'error');
            const errorCaption = (isWarning)
                ? ( localize(4427, "Warning"))
                : ( localize(4428, "Error"));
            title += `\n-\n[${errorCaption}]: ${details}`;
        }
        const fileWithoutExtension = getCleanPromptName(file);
        label.setFile(URI.file(fileWithoutExtension), {
            fileKind: FileKind.FILE,
            hidePath: true,
            range: undefined,
            title,
            icon: ThemeIcon.fromId(Codicon.bookmark.id),
            extraClasses: [],
        });
        this.domNode.ariaLabel = ariaLabel;
        this.domNode.tabIndex = 0;
        const hintElement = append(this.domNode, $('span.chat-implicit-hint', undefined, promptLabel));
        this._register(this.hoverService.setupManagedHover(getDefaultHoverDelegate('element'), hintElement, title));
        const removeButton = this.renderDisposables.add(( new Button(this.domNode, {
            supportIcons: true,
            title: ( localize(4429, "Remove")),
        })));
        removeButton.icon = Codicon.close;
        this.renderDisposables.add(removeButton.onDidClick((e) => {
            e.stopPropagation();
            this.model.dispose();
        }));
        const scopedContextKeyService = this.renderDisposables.add(this.contextKeyService.createScoped(this.domNode));
        const resourceContextKey = this.renderDisposables.add(( new ResourceContextKey(
            scopedContextKeyService,
            this.fileService,
            this.languageService,
            this.modelService
        )));
        resourceContextKey.set(file);
        this.renderDisposables.add(addDisposableListener(this.domNode, EventType.CONTEXT_MENU, async (domEvent) => {
            const event = ( new StandardMouseEvent(getWindow(domEvent), domEvent));
            EventHelper.stop(domEvent, true);
            this.contextMenuService.showContextMenu({
                contextKeyService: scopedContextKeyService,
                getAnchor: () => event,
                getActions: () => {
                    const menu = this.menuService.getMenuActions(MenuId.ChatInputResourceAttachmentContext, scopedContextKeyService, { arg: file });
                    return getFlatContextMenuActions(menu);
                },
            });
        }));
    }
    dispose() {
        this._onDispose.fire();
        super.dispose();
    }
};
PromptAttachmentWidget = ( __decorate([
    ( __param(2, IContextKeyService)),
    ( __param(3, IContextMenuService)),
    ( __param(4, IHoverService)),
    ( __param(5, ILabelService)),
    ( __param(6, IMenuService)),
    ( __param(7, IFileService)),
    ( __param(8, ILanguageService)),
    ( __param(9, IModelService))
], PromptAttachmentWidget));

export { PromptAttachmentWidget };
