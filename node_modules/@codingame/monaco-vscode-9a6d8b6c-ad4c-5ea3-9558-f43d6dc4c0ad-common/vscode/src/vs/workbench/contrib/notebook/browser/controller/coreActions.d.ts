import { UriComponents } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { Action2, IAction2Options } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { ServicesAccessor } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { KeybindingWeight } from "@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybindingsRegistry";
import { IActiveNotebookEditor, ICellViewModel, ICellOutputViewModel } from "../notebookBrowser.js";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { TypeConstraint } from "@codingame/monaco-vscode-api/vscode/vs/base/common/types";
import { IJSONSchema } from "@codingame/monaco-vscode-api/vscode/vs/base/common/jsonSchema";
import { ICodeEditor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorBrowser";
export declare const SELECT_KERNEL_ID = "_notebook.selectKernel";
export declare const NOTEBOOK_ACTIONS_CATEGORY: import("@codingame/monaco-vscode-api/vscode/vs/nls").ILocalizedString;
export declare const CELL_TITLE_CELL_GROUP_ID = "inline/cell";
export declare const CELL_TITLE_OUTPUT_GROUP_ID = "inline/output";
export declare const NOTEBOOK_EDITOR_WIDGET_ACTION_WEIGHT = KeybindingWeight.EditorContrib;
export declare const NOTEBOOK_OUTPUT_WEBVIEW_ACTION_WEIGHT: number;
export declare enum CellToolbarOrder {
    RunSection = 0,
    EditCell = 1,
    ExecuteAboveCells = 2,
    ExecuteCellAndBelow = 3,
    SaveCell = 4,
    SplitCell = 5,
    ClearCellOutput = 6
}
export declare enum CellOverflowToolbarGroups {
    Copy = "1_copy",
    Insert = "2_insert",
    Edit = "3_edit",
    Share = "4_share"
}
export interface INotebookActionContext {
    readonly cell?: ICellViewModel;
    readonly notebookEditor: IActiveNotebookEditor;
    readonly ui?: boolean;
    readonly selectedCells?: readonly ICellViewModel[];
    readonly autoReveal?: boolean;
}
export interface INotebookCellToolbarActionContext extends INotebookActionContext {
    readonly ui: true;
    readonly cell: ICellViewModel;
}
export interface INotebookCommandContext extends INotebookActionContext {
    readonly ui: false;
    readonly selectedCells: readonly ICellViewModel[];
}
export interface INotebookCellActionContext extends INotebookActionContext {
    cell: ICellViewModel;
}
export interface INotebookOutputActionContext extends INotebookCellActionContext {
    outputViewModel: ICellOutputViewModel;
}
export declare function getContextFromActiveEditor(editorService: IEditorService): INotebookActionContext | undefined;
export declare function getContextFromUri(accessor: ServicesAccessor, context?: any): {
    notebookEditor: IActiveNotebookEditor;
} | undefined;
export declare function findTargetCellEditor(context: INotebookCellActionContext, targetCell: ICellViewModel): ICodeEditor | undefined;
export declare abstract class NotebookAction extends Action2 {
    constructor(desc: IAction2Options);
    run(accessor: ServicesAccessor, context?: any, ...additionalArgs: any[]): Promise<void>;
    abstract runWithContext(accessor: ServicesAccessor, context: INotebookActionContext): Promise<void>;
    private isNotebookActionContext;
    getEditorContextFromArgsOrActive(accessor: ServicesAccessor, context?: any, ...additionalArgs: any[]): INotebookActionContext | undefined;
}
export declare abstract class NotebookMultiCellAction extends Action2 {
    constructor(desc: IAction2Options);
    parseArgs(accessor: ServicesAccessor, ...args: any[]): INotebookCommandContext | undefined;
    abstract runWithContext(accessor: ServicesAccessor, context: INotebookCommandContext | INotebookCellToolbarActionContext): Promise<void>;
    run(accessor: ServicesAccessor, ...additionalArgs: any[]): Promise<void>;
}
export declare abstract class NotebookCellAction<T = INotebookCellActionContext> extends NotebookAction {
    protected isCellActionContext(context?: unknown): context is INotebookCellActionContext;
    protected getCellContextFromArgs(accessor: ServicesAccessor, context?: T, ...additionalArgs: any[]): INotebookCellActionContext | undefined;
    run(accessor: ServicesAccessor, context?: INotebookCellActionContext, ...additionalArgs: any[]): Promise<void>;
    abstract runWithContext(accessor: ServicesAccessor, context: INotebookCellActionContext): Promise<void>;
}
export declare const executeNotebookCondition: import("@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey").ContextKeyExpression | undefined;
export declare function getEditorFromArgsOrActivePane(accessor: ServicesAccessor, context?: UriComponents): IActiveNotebookEditor | undefined;
export declare function parseMultiCellExecutionArgs(accessor: ServicesAccessor, ...args: any[]): INotebookCommandContext | undefined;
export declare const cellExecutionArgs: ReadonlyArray<{
    readonly name: string;
    readonly isOptional?: boolean;
    readonly description?: string;
    readonly constraint?: TypeConstraint;
    readonly schema?: IJSONSchema;
}>;
