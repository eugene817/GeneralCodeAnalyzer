
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { marked } from 'marked';
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { AccessibilityVerbositySettingId } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/accessibility/browser/accessibilityConfiguration';
import { IAccessibleViewService } from '@codingame/monaco-vscode-api/vscode/vs/platform/accessibility/browser/accessibleView.service';
import { isRequestVM, isResponseVM } from '../common/chatViewModel.js';

let ChatAccessibilityProvider = class ChatAccessibilityProvider {
    constructor(_accessibleViewService) {
        this._accessibleViewService = _accessibleViewService;
    }
    getWidgetRole() {
        return 'list';
    }
    getRole(element) {
        return 'listitem';
    }
    getWidgetAriaLabel() {
        return localize(4458, "Chat");
    }
    getAriaLabel(element) {
        if (isRequestVM(element)) {
            return element.messageText;
        }
        if (isResponseVM(element)) {
            return this._getLabelWithCodeBlockCount(element);
        }
        return '';
    }
    _getLabelWithCodeBlockCount(element) {
        const accessibleViewHint = this._accessibleViewService.getOpenAriaHint(AccessibilityVerbositySettingId.Chat);
        let label = '';
        const fileTreeCount = element.response.value.filter((v) => !('value' in v))?.length ?? 0;
        let fileTreeCountHint = '';
        switch (fileTreeCount) {
            case 0:
                break;
            case 1:
                fileTreeCountHint = ( localize(4459, "1 file tree"));
                break;
            default:
                fileTreeCountHint = ( localize(4460, "{0} file trees", fileTreeCount));
                break;
        }
        const codeBlockCount = marked.lexer(( element.response.toString())).filter(token => token.type === 'code')?.length ?? 0;
        switch (codeBlockCount) {
            case 0:
                label = accessibleViewHint ? ( localize(
                    4461,
                    "{0} {1} {2}",
                    fileTreeCountHint,
                    (element.response.toString()),
                    accessibleViewHint
                )) : ( localize(4462, "{0} {1}", fileTreeCountHint, (element.response.toString())));
                break;
            case 1:
                label = accessibleViewHint ? ( localize(
                    4463,
                    "{0} 1 code block: {1} {2}",
                    fileTreeCountHint,
                    (element.response.toString()),
                    accessibleViewHint
                )) : ( localize(
                    4464,
                    "{0} 1 code block: {1}",
                    fileTreeCountHint,
                    (element.response.toString())
                ));
                break;
            default:
                label = accessibleViewHint ? ( localize(
                    4465,
                    "{0} {1} code blocks: {2}",
                    fileTreeCountHint,
                    codeBlockCount,
                    (element.response.toString()),
                    accessibleViewHint
                )) : ( localize(
                    4466,
                    "{0} {1} code blocks",
                    fileTreeCountHint,
                    codeBlockCount,
                    (element.response.toString())
                ));
                break;
        }
        return label;
    }
};
ChatAccessibilityProvider = ( __decorate([
    ( __param(0, IAccessibleViewService))
], ChatAccessibilityProvider));

export { ChatAccessibilityProvider };
