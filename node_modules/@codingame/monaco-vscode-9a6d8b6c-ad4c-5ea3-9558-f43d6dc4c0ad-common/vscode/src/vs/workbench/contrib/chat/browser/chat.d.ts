import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { ICodeEditor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorBrowser";
import { Selection } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/core/selection";
import { MenuId } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IViewDescriptorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/views.service";
import { IWorkbenchLayoutService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service";
import { IViewsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/views/common/viewsService.service";
import { ChatAgentLocation, IChatAgentCommand, IChatAgentData } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatAgents";
import { IChatResponseModel } from "../common/chatModel.js";
import { IParsedChatRequest } from "../common/chatParserTypes.js";
import { IChatRequestViewModel, IChatResponseViewModel, IChatViewModel } from "../common/chatViewModel.js";
import { ChatAttachmentModel } from "./chatAttachmentModel.js";
import { ChatInputPart } from "./chatInputPart.js";
import { IChatViewState, IChatWidgetContrib } from "./chatWidget.js";
import { ICodeBlockActionContext } from "./codeBlockPart.js";
export declare function showChatView(viewsService: IViewsService): Promise<IChatWidget | undefined>;
export declare function showEditsView(viewsService: IViewsService): Promise<IChatWidget | undefined>;
export declare function preferCopilotEditsView(viewsService: IViewsService): boolean;
export declare function showCopilotView(viewsService: IViewsService, layoutService: IWorkbenchLayoutService): Promise<IChatWidget | undefined>;
export declare function ensureSideBarChatViewSize(viewDescriptorService: IViewDescriptorService, layoutService: IWorkbenchLayoutService, viewsService: IViewsService): void;
export interface IQuickChatOpenOptions {
    query: string;
    isPartialQuery?: boolean;
    selection?: Selection;
}
export interface IChatCodeBlockInfo {
    readonly ownerMarkdownPartId: string;
    readonly codeBlockIndex: number;
    readonly elementId: string;
    readonly uri: URI | undefined;
    readonly uriPromise: Promise<URI | undefined>;
    codemapperUri: URI | undefined;
    readonly isStreaming: boolean;
    focus(): void;
}
export interface IChatFileTreeInfo {
    treeDataId: string;
    treeIndex: number;
    focus(): void;
}
export type ChatTreeItem = IChatRequestViewModel | IChatResponseViewModel;
export interface IChatListItemRendererOptions {
    readonly renderStyle?: "compact" | "minimal";
    readonly noHeader?: boolean;
    readonly noPadding?: boolean;
    readonly editableCodeBlock?: boolean;
    readonly renderCodeBlockPills?: boolean;
    readonly renderDetectedCommandsWithRequest?: boolean;
    readonly renderTextEditsAsSummary?: (uri: URI) => boolean;
    readonly referencesExpandedWhenEmptyResponse?: boolean;
    readonly progressMessageAtBottomOfResponse?: boolean;
}
export interface IChatWidgetViewOptions {
    autoScroll?: boolean;
    renderInputOnTop?: boolean;
    renderFollowups?: boolean;
    renderStyle?: "compact" | "minimal";
    supportsFileReferences?: boolean;
    supportsAdditionalParticipants?: boolean;
    filter?: (item: ChatTreeItem) => boolean;
    rendererOptions?: IChatListItemRendererOptions;
    menus?: {
        executeToolbar?: MenuId;
        inputSideToolbar?: MenuId;
        telemetrySource?: string;
    };
    defaultElementHeight?: number;
    editorOverflowWidgetsDomNode?: HTMLElement;
    enableImplicitContext?: boolean;
    enableWorkingSet?: "explicit" | "implicit";
}
export interface IChatViewViewContext {
    viewId: string;
}
export interface IChatResourceViewContext {
    isQuickChat?: boolean;
}
export type IChatWidgetViewContext = IChatViewViewContext | IChatResourceViewContext | {};
export interface IChatAcceptInputOptions {
    noCommandDetection?: boolean;
    isVoiceInput?: boolean;
}
export interface IChatWidget {
    readonly onDidChangeViewModel: Event<void>;
    readonly onDidAcceptInput: Event<void>;
    readonly onDidHide: Event<void>;
    readonly onDidSubmitAgent: Event<{
        agent: IChatAgentData;
        slashCommand?: IChatAgentCommand;
    }>;
    readonly onDidChangeAgent: Event<{
        agent: IChatAgentData;
        slashCommand?: IChatAgentCommand;
    }>;
    readonly onDidChangeParsedInput: Event<void>;
    readonly location: ChatAgentLocation;
    readonly viewContext: IChatWidgetViewContext;
    readonly viewModel: IChatViewModel | undefined;
    readonly inputEditor: ICodeEditor;
    readonly supportsFileReferences: boolean;
    readonly parsedInput: IParsedChatRequest;
    lastSelectedAgent: IChatAgentData | undefined;
    readonly scopedContextKeyService: IContextKeyService;
    readonly input: ChatInputPart;
    readonly attachmentModel: ChatAttachmentModel;
    getContrib<T extends IChatWidgetContrib>(id: string): T | undefined;
    reveal(item: ChatTreeItem): void;
    focus(item: ChatTreeItem): void;
    getSibling(item: ChatTreeItem, type: "next" | "previous"): ChatTreeItem | undefined;
    getFocus(): ChatTreeItem | undefined;
    setInput(query?: string): void;
    getInput(): string;
    refreshParsedInput(): void;
    logInputHistory(): void;
    acceptInput(query?: string, options?: IChatAcceptInputOptions): Promise<IChatResponseModel | undefined>;
    rerunLastRequest(): Promise<void>;
    acceptInputWithPrefix(prefix: string): void;
    setInputPlaceholder(placeholder: string): void;
    resetInputPlaceholder(): void;
    focusLastMessage(): void;
    focusInput(): void;
    hasInputFocus(): boolean;
    getCodeBlockInfoForEditor(uri: URI): IChatCodeBlockInfo | undefined;
    getCodeBlockInfosForResponse(response: IChatResponseViewModel): IChatCodeBlockInfo[];
    getFileTreeInfosForResponse(response: IChatResponseViewModel): IChatFileTreeInfo[];
    getLastFocusedFileTreeForResponse(response: IChatResponseViewModel): IChatFileTreeInfo | undefined;
    clear(): void;
    getViewState(): IChatViewState;
    togglePaused(): void;
}
export interface ICodeBlockActionContextProvider {
    getCodeBlockContext(editor?: ICodeEditor): ICodeBlockActionContext | undefined;
}
export declare const ChatViewId = "workbench.panel.chat.view.copilot";
export declare const EditsViewId = "workbench.panel.chat.view.edits";
