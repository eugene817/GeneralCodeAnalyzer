import * as DOM from "@codingame/monaco-vscode-api/vscode/vs/base/browser/dom";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { RawContextKey } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IEditorOptions } from "@codingame/monaco-vscode-api/vscode/vs/platform/editor/common/editor";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { ITelemetryService } from "@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetry.service";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { EditorPane } from "@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/workbench/browser/parts/editor/editorPane";
import { IEditorOpenContext } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import { IEditorGroup } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService";
import { IEditorGroupsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { IHostService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/host/browser/host.service";
import { IWorkbenchLayoutService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service";
export declare const CONTEXT_ACTIVE_WEBVIEW_PANEL_ID: RawContextKey<string>;
export declare class WebviewEditor extends EditorPane {
    private readonly _editorGroupsService;
    private readonly _editorService;
    private readonly _workbenchLayoutService;
    private readonly _hostService;
    private readonly _contextKeyService;
    static readonly ID = "WebviewEditor";
    private _element?;
    private _dimension?;
    private _visible;
    private _isDisposed;
    private readonly _webviewVisibleDisposables;
    private readonly _onFocusWindowHandler;
    private readonly _onDidFocusWebview;
    get onDidFocus(): Event<any>;
    private readonly _scopedContextKeyService;
    constructor(group: IEditorGroup, telemetryService: ITelemetryService, themeService: IThemeService, storageService: IStorageService, _editorGroupsService: IEditorGroupsService, _editorService: IEditorService, _workbenchLayoutService: IWorkbenchLayoutService, _hostService: IHostService, _contextKeyService: IContextKeyService);
    private get webview();
    get scopedContextKeyService(): IContextKeyService | undefined;
    protected createEditor(parent: HTMLElement): void;
    dispose(): void;
    layout(dimension: DOM.Dimension): void;
    focus(): void;
    protected setEditorVisible(visible: boolean): void;
    clearInput(): void;
    setInput(input: EditorInput, options: IEditorOptions, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    private claimWebview;
    private synchronizeWebviewContainerDimensions;
    private trackFocus;
}
