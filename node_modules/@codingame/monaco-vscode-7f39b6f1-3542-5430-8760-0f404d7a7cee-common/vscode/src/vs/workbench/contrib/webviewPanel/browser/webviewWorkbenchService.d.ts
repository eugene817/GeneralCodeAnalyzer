import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { Disposable, IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { GroupIdentifier } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { IOverlayWebview, WebviewInitInfo } from "@codingame/monaco-vscode-7ba0af96-90c2-5e11-ad7f-befdbbf246c8-common/vscode/vs/workbench/contrib/webview/browser/webview";
import { IWebviewService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/webview/browser/webview.service";
import { WebviewIconManager, WebviewIcons } from "./webviewIconManager.js";
import { IEditorGroup } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService";
import { IEditorGroupsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service";
import { ACTIVE_GROUP_TYPE, SIDE_GROUP_TYPE } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { WebviewInput, WebviewInputInitInfo } from "@codingame/monaco-vscode-9b5a5e82-d649-5455-b4bf-ef90d6afd294-common/vscode/vs/workbench/contrib/webviewPanel/browser/webviewEditorInput";
import { IWebviewWorkbenchService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService.service";
export interface IWebViewShowOptions {
    readonly group?: IEditorGroup | GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE;
    readonly preserveFocus?: boolean;
}
export interface WebviewResolver {
    canResolve(webview: WebviewInput): boolean;
    resolveWebview(webview: WebviewInput, token: CancellationToken): Promise<void>;
}
export declare class LazilyResolvedWebviewEditorInput extends WebviewInput {
    private readonly _webviewWorkbenchService;
    private _resolved;
    private _resolvePromise?;
    constructor(init: WebviewInputInitInfo, webview: IOverlayWebview, _webviewWorkbenchService: IWebviewWorkbenchService);
    dispose(): void;
    resolve(): Promise<IDisposable | null>;
    protected transfer(other: LazilyResolvedWebviewEditorInput): WebviewInput | undefined;
}
export declare class WebviewEditorService extends Disposable implements IWebviewWorkbenchService {
    private readonly _editorService;
    private readonly _instantiationService;
    private readonly _webviewService;
    readonly _serviceBrand: undefined;
    private readonly _revivers;
    private readonly _revivalPool;
    private readonly _iconManager;
    constructor(editorGroupsService: IEditorGroupsService, _editorService: IEditorService, _instantiationService: IInstantiationService, _webviewService: IWebviewService);
    get iconManager(): WebviewIconManager;
    private _activeWebview;
    private readonly _onDidChangeActiveWebviewEditor;
    readonly onDidChangeActiveWebviewEditor: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<WebviewInput | undefined>;
    private getWebviewId;
    private updateActiveWebview;
    openWebview(webviewInitInfo: WebviewInitInfo, viewType: string, title: string, showOptions: IWebViewShowOptions): WebviewInput;
    revealWebview(webview: WebviewInput, group: IEditorGroup | GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE, preserveFocus: boolean): void;
    private findTopLevelEditorForWebview;
    openRevivedWebview(options: {
        webviewInitInfo: WebviewInitInfo;
        viewType: string;
        title: string;
        iconPath: WebviewIcons | undefined;
        state: any;
        group: number | undefined;
    }): WebviewInput;
    registerResolver(reviver: WebviewResolver): IDisposable;
    shouldPersist(webview: WebviewInput): boolean;
    private tryRevive;
    resolveWebview(webview: WebviewInput, token: CancellationToken): Promise<void>;
    setIcons(id: string, iconPath: WebviewIcons | undefined): void;
}
