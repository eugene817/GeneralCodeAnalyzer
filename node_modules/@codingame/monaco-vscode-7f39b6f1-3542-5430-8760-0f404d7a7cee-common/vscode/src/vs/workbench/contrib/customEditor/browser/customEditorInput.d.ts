import { CodeWindow } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/window";
import { VSBuffer } from "@codingame/monaco-vscode-api/vscode/vs/base/common/buffer";
import { IMarkdownString } from "@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IFileDialogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service";
import { IResourceEditorInput } from "@codingame/monaco-vscode-api/vscode/vs/platform/editor/common/editor";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { IUndoRedoService } from "@codingame/monaco-vscode-api/vscode/vs/platform/undoRedo/common/undoRedo.service";
import { EditorInputCapabilities, GroupIdentifier, IMoveResult, IRevertOptions, ISaveOptions, IUntypedEditorInput, Verbosity } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import { ICustomEditorLabelService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/customEditorLabelService.service";
import { ICustomEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/customEditor/common/customEditor.service";
import { IOverlayWebview } from "@codingame/monaco-vscode-7ba0af96-90c2-5e11-ad7f-befdbbf246c8-common/vscode/vs/workbench/contrib/webview/browser/webview";
import { LazilyResolvedWebviewEditorInput } from "../../webviewPanel/browser/webviewWorkbenchService.js";
import { IWebviewWorkbenchService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService.service";
import { IEditorGroupsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service";
import { IFilesConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/filesConfiguration/common/filesConfigurationService.service";
import { IWorkbenchLayoutService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service";
interface CustomEditorInputInitInfo {
    readonly resource: URI;
    readonly viewType: string;
}
export declare class CustomEditorInput extends LazilyResolvedWebviewEditorInput {
    private readonly instantiationService;
    private readonly labelService;
    private readonly customEditorService;
    private readonly fileDialogService;
    private readonly undoRedoService;
    private readonly fileService;
    private readonly filesConfigurationService;
    private readonly editorGroupsService;
    private readonly layoutService;
    private readonly customEditorLabelService;
    static create(instantiationService: IInstantiationService, resource: URI, viewType: string, group: GroupIdentifier | undefined, options?: {
        readonly customClasses?: string;
        readonly oldResource?: URI;
    }): EditorInput;
    static readonly typeId = "workbench.editors.webviewEditor";
    private readonly _editorResource;
    readonly oldResource?: URI;
    private _defaultDirtyState;
    private readonly _backupId;
    private readonly _untitledDocumentData;
    get resource(): URI;
    private _modelRef?;
    constructor(init: CustomEditorInputInitInfo, webview: IOverlayWebview, options: {
        startsDirty?: boolean;
        backupId?: string;
        untitledDocumentData?: VSBuffer;
        readonly oldResource?: URI;
    }, webviewWorkbenchService: IWebviewWorkbenchService, instantiationService: IInstantiationService, labelService: ILabelService, customEditorService: ICustomEditorService, fileDialogService: IFileDialogService, undoRedoService: IUndoRedoService, fileService: IFileService, filesConfigurationService: IFilesConfigurationService, editorGroupsService: IEditorGroupsService, layoutService: IWorkbenchLayoutService, customEditorLabelService: ICustomEditorLabelService);
    private registerListeners;
    private onLabelEvent;
    private updateLabel;
    get typeId(): string;
    get editorId(): string;
    get capabilities(): EditorInputCapabilities;
    private _editorName;
    getName(): string;
    getDescription(verbosity?: Verbosity): string | undefined;
    private _shortDescription;
    private get shortDescription();
    private _mediumDescription;
    private get mediumDescription();
    private _longDescription;
    private get longDescription();
    private _shortTitle;
    private get shortTitle();
    private _mediumTitle;
    private get mediumTitle();
    private _longTitle;
    private get longTitle();
    getTitle(verbosity?: Verbosity): string;
    matches(other: EditorInput | IUntypedEditorInput): boolean;
    copy(): EditorInput;
    isReadonly(): boolean | IMarkdownString;
    isDirty(): boolean;
    save(groupId: GroupIdentifier, options?: ISaveOptions): Promise<EditorInput | IUntypedEditorInput | undefined>;
    saveAs(groupId: GroupIdentifier, options?: ISaveOptions): Promise<EditorInput | IUntypedEditorInput | undefined>;
    revert(group: GroupIdentifier, options?: IRevertOptions): Promise<void>;
    resolve(): Promise<null>;
    rename(group: GroupIdentifier, newResource: URI): Promise<IMoveResult | undefined>;
    undo(): void | Promise<void>;
    redo(): void | Promise<void>;
    private _moveHandler?;
    onMove(handler: (newResource: URI) => void): void;
    protected transfer(other: CustomEditorInput): CustomEditorInput | undefined;
    get backupId(): string | undefined;
    get untitledDocumentData(): VSBuffer | undefined;
    toUntyped(): IResourceEditorInput;
    claim(claimant: unknown, targetWindow: CodeWindow, scopedContextKeyService: IContextKeyService | undefined): void;
    canMove(sourceGroup: GroupIdentifier, targetGroup: GroupIdentifier): true | string;
    private doCanMove;
}
export {};
