import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { ITextModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/resolverService.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IFileDialogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { EditorInputCapabilities, GroupIdentifier, IRevertOptions, ISaveOptions, IUntypedEditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import { IInteractiveDocumentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/interactive/browser/interactiveDocumentService.service";
import { IInteractiveHistoryService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/interactive/browser/interactiveHistoryService.service";
import { IResolvedNotebookEditorModel } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookCommon";
import { ICompositeNotebookEditorInput, NotebookEditorInput } from "@codingame/monaco-vscode-9b5a5e82-d649-5455-b4bf-ef90d6afd294-common/vscode/vs/workbench/contrib/notebook/common/notebookEditorInput";
import { INotebookService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookService.service";
export declare class InteractiveEditorInput extends EditorInput implements ICompositeNotebookEditorInput {
    private readonly _notebookService;
    private readonly _fileDialogService;
    static create(instantiationService: IInstantiationService, resource: URI, inputResource: URI, title?: string, language?: string): InteractiveEditorInput;
    private static windowNames;
    static setName(notebookUri: URI, title: string | undefined): void;
    static readonly ID: string;
    get editorId(): string;
    get typeId(): string;
    private name;
    private readonly isScratchpad;
    get language(): string | undefined;
    private _initLanguage?;
    private _notebookEditorInput;
    get notebookEditorInput(): NotebookEditorInput;
    get editorInputs(): NotebookEditorInput[];
    private _resource;
    get resource(): URI;
    private _inputResource;
    get inputResource(): URI;
    private _inputResolver;
    private _editorModelReference;
    private _inputModelRef;
    get primary(): EditorInput;
    private _textModelService;
    private _interactiveDocumentService;
    private _historyService;
    constructor(resource: URI, inputResource: URI, title: string | undefined, languageId: string | undefined, instantiationService: IInstantiationService, textModelService: ITextModelService, interactiveDocumentService: IInteractiveDocumentService, historyService: IInteractiveHistoryService, _notebookService: INotebookService, _fileDialogService: IFileDialogService, configurationService: IConfigurationService);
    private _registerListeners;
    get capabilities(): EditorInputCapabilities;
    private _resolveEditorModel;
    resolve(): Promise<IResolvedNotebookEditorModel | null>;
    resolveInput(language?: string): Promise<import("@codingame/monaco-vscode-api/vscode/vs/editor/common/model").ITextModel>;
    save(group: GroupIdentifier, options?: ISaveOptions): Promise<EditorInput | IUntypedEditorInput | undefined>;
    saveAs(group: GroupIdentifier, options?: ISaveOptions): Promise<IUntypedEditorInput | undefined>;
    matches(otherInput: EditorInput | IUntypedEditorInput): boolean;
    getName(): string;
    isDirty(): boolean;
    isModified(): boolean;
    revert(_group: GroupIdentifier, options?: IRevertOptions): Promise<void>;
    dispose(): void;
    get historyService(): IInteractiveHistoryService;
}
