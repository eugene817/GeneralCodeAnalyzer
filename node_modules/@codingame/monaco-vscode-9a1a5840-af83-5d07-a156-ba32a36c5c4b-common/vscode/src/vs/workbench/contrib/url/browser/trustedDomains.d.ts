import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { ServicesAccessor } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IQuickInputService } from "@codingame/monaco-vscode-api/vscode/vs/platform/quickinput/common/quickInput.service";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { ITelemetryService } from "@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetry.service";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
export declare const TRUSTED_DOMAINS_STORAGE_KEY = "http.linkProtectionTrustedDomains";
export declare const TRUSTED_DOMAINS_CONTENT_STORAGE_KEY = "http.linkProtectionTrustedDomainsContent";
export declare const manageTrustedDomainSettingsCommand: {
    id: string;
    description: {
        description: import("@codingame/monaco-vscode-api/vscode/vs/nls").ILocalizedString;
        args: never[];
    };
    handler: (accessor: ServicesAccessor) => Promise<void>;
};
export declare function configureOpenerTrustedDomainsHandler(trustedDomains: string[], domainToConfigure: string, resource: URI, quickInputService: IQuickInputService, storageService: IStorageService, editorService: IEditorService, telemetryService: ITelemetryService): Promise<string[]>;
export interface IStaticTrustedDomains {
    readonly defaultTrustedDomains: string[];
    readonly trustedDomains: string[];
}
export declare function readTrustedDomains(accessor: ServicesAccessor): Promise<IStaticTrustedDomains>;
export declare function readStaticTrustedDomains(accessor: ServicesAccessor): IStaticTrustedDomains;
