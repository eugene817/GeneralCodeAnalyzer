
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { WindowIdleValue } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/dom';
import { mainWindow } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/window';
import { Disposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { URI } from '@codingame/monaco-vscode-api/vscode/vs/base/common/uri';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { StorageScope } from '@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage';
import { IStorageService } from '@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service';
import { readStaticTrustedDomains, TRUSTED_DOMAINS_STORAGE_KEY } from './trustedDomains.js';
import { testUrlMatchesGlob } from '../common/urlGlob.js';

let TrustedDomainService = class TrustedDomainService extends Disposable {
    constructor(_instantiationService, _storageService) {
        super();
        this._instantiationService = _instantiationService;
        this._storageService = _storageService;
        const initStaticDomainsResult = () => {
            return ( new WindowIdleValue(mainWindow, () => {
                const { defaultTrustedDomains, trustedDomains, } = this._instantiationService.invokeFunction(readStaticTrustedDomains);
                return [
                    ...defaultTrustedDomains,
                    ...trustedDomains
                ];
            }));
        };
        this._staticTrustedDomainsResult = initStaticDomainsResult();
        this._register(this._storageService.onDidChangeValue(StorageScope.APPLICATION, TRUSTED_DOMAINS_STORAGE_KEY, this._store)(() => {
            this._staticTrustedDomainsResult?.dispose();
            this._staticTrustedDomainsResult = initStaticDomainsResult();
        }));
    }
    isValid(resource) {
        const { defaultTrustedDomains, trustedDomains, } = this._instantiationService.invokeFunction(readStaticTrustedDomains);
        const allTrustedDomains = [...defaultTrustedDomains, ...trustedDomains];
        return isURLDomainTrusted(resource, allTrustedDomains);
    }
};
TrustedDomainService = ( __decorate([
    ( __param(0, IInstantiationService)),
    ( __param(1, IStorageService))
], TrustedDomainService));
const rLocalhost = /^localhost(:\d+)?$/i;
const r127 = /^127.0.0.1(:\d+)?$/;
function isLocalhostAuthority(authority) {
    return rLocalhost.test(authority) || r127.test(authority);
}
function normalizeURL(url) {
    const caseInsensitiveAuthorities = ['github.com'];
    try {
        const parsed = typeof url === 'string' ? ( URI.parse(url, true)) : url;
        if (caseInsensitiveAuthorities.includes(parsed.authority)) {
            return ( parsed.with({ path: parsed.path.toLowerCase() }).toString(true));
        }
        else {
            return ( parsed.toString(true));
        }
    }
    catch {
        return ( url.toString());
    }
}
function isURLDomainTrusted(url, trustedDomains) {
    url = ( URI.parse(normalizeURL(url)));
    trustedDomains = ( trustedDomains.map(normalizeURL));
    if (isLocalhostAuthority(url.authority)) {
        return true;
    }
    for (let i = 0; i < trustedDomains.length; i++) {
        if (trustedDomains[i] === '*') {
            return true;
        }
        if (testUrlMatchesGlob(url, trustedDomains[i])) {
            return true;
        }
    }
    return false;
}

export { TrustedDomainService, isURLDomainTrusted };
