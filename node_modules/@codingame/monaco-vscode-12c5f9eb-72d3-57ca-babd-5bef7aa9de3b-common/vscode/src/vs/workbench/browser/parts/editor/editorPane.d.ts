import { Composite } from "../../composite.js";
import { IEditorPane, IEditorMemento, IEditorOpenContext } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import { ITelemetryService } from "@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetry.service";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { IEditorGroup } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService";
import { IEditorGroupsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { Emitter, Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { MementoObject } from "../../../common/memento.js";
import { IExtUri } from "@codingame/monaco-vscode-api/vscode/vs/base/common/resources";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IEditorOptions } from "@codingame/monaco-vscode-api/vscode/vs/platform/editor/common/editor";
import { ITextResourceConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/textResourceConfiguration.service";
import { IBoundarySashes } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/sash/sash";
export declare abstract class EditorPane extends Composite implements IEditorPane {
    readonly group: IEditorGroup;
    readonly onDidChangeSizeConstraints: Event<any>;
    protected readonly _onDidChangeControl: Emitter<void>;
    readonly onDidChangeControl: Event<void>;
    private static readonly EDITOR_MEMENTOS;
    get minimumWidth(): number;
    get maximumWidth(): number;
    get minimumHeight(): number;
    get maximumHeight(): number;
    protected _input: EditorInput | undefined;
    get input(): EditorInput | undefined;
    protected _options: IEditorOptions | undefined;
    get options(): IEditorOptions | undefined;
    get window(): import("@codingame/monaco-vscode-api/vscode/vs/base/browser/window").CodeWindow;
    get scopedContextKeyService(): IContextKeyService | undefined;
    constructor(id: string, group: IEditorGroup, telemetryService: ITelemetryService, themeService: IThemeService, storageService: IStorageService);
    create(parent: HTMLElement): void;
    protected abstract createEditor(parent: HTMLElement): void;
    setInput(input: EditorInput, options: IEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    clearInput(): void;
    setOptions(options: IEditorOptions | undefined): void;
    setVisible(visible: boolean): void;
    protected setEditorVisible(visible: boolean): void;
    setBoundarySashes(_sashes: IBoundarySashes): void;
    protected getEditorMemento<T>(editorGroupService: IEditorGroupsService, configurationService: ITextResourceConfigurationService, key: string, limit?: number): IEditorMemento<T>;
    getViewState(): object | undefined;
    protected saveState(): void;
    dispose(): void;
}
export declare class EditorMemento<T> extends Disposable implements IEditorMemento<T> {
    readonly id: string;
    private readonly key;
    private readonly memento;
    private readonly limit;
    private readonly editorGroupService;
    private readonly configurationService;
    private static readonly SHARED_EDITOR_STATE;
    private cache;
    private cleanedUp;
    private editorDisposables;
    private shareEditorState;
    constructor(id: string, key: string, memento: MementoObject, limit: number, editorGroupService: IEditorGroupsService, configurationService: ITextResourceConfigurationService);
    private registerListeners;
    private updateConfiguration;
    saveEditorState(group: IEditorGroup, resource: URI, state: T): void;
    saveEditorState(group: IEditorGroup, editor: EditorInput, state: T): void;
    loadEditorState(group: IEditorGroup, resource: URI): T | undefined;
    loadEditorState(group: IEditorGroup, editor: EditorInput): T | undefined;
    clearEditorState(resource: URI, group?: IEditorGroup): void;
    clearEditorState(editor: EditorInput, group?: IEditorGroup): void;
    clearEditorStateOnDispose(resource: URI, editor: EditorInput): void;
    moveEditorState(source: URI, target: URI, comparer: IExtUri): void;
    private doGetResource;
    private doLoad;
    saveState(): void;
    private cleanUp;
}
