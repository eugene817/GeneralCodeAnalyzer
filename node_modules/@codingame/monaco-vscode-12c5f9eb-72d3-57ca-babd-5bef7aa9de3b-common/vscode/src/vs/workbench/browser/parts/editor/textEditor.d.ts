import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { Emitter, Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { ICodeEditor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorBrowser";
import { IEditorOpenContext, IEditorPaneSelection, EditorPaneSelectionCompareResult, IEditorPaneWithSelection, IEditorPaneSelectionChangeEvent, IEditorPaneScrollPosition, IEditorPaneWithScrolling } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import { AbstractEditorWithViewState } from "@codingame/monaco-vscode-fdf643f9-94dd-5510-b97a-408abf26ad92-common/vscode/vs/workbench/browser/parts/editor/editorWithViewState";
import { IEditorViewState } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/editorCommon";
import { Selection } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/core/selection";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { ITelemetryService } from "@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetry.service";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { ITextResourceConfigurationChangeEvent } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/textResourceConfiguration";
import { ITextResourceConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/textResourceConfiguration.service";
import { IEditorOptions as ICodeEditorOptions } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/config/editorOptions";
import { IEditorGroup } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService";
import { IEditorGroupsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { IEditorOptions, ITextEditorOptions } from "@codingame/monaco-vscode-api/vscode/vs/platform/editor/common/editor";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { IMarkdownString } from "@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent";
export interface IEditorConfiguration {
    editor: object;
    diffEditor: object;
    accessibility?: {
        verbosity?: {
            diffEditor?: boolean;
        };
    };
    problems?: {
        visibility?: boolean;
    };
}
export declare abstract class AbstractTextEditor<T extends IEditorViewState> extends AbstractEditorWithViewState<T> implements IEditorPaneWithSelection, IEditorPaneWithScrolling {
    protected readonly fileService: IFileService;
    private static readonly VIEW_STATE_PREFERENCE_KEY;
    protected readonly _onDidChangeSelection: Emitter<IEditorPaneSelectionChangeEvent>;
    readonly onDidChangeSelection: Event<IEditorPaneSelectionChangeEvent>;
    protected readonly _onDidChangeScroll: Emitter<void>;
    readonly onDidChangeScroll: Event<void>;
    private editorContainer;
    private hasPendingConfigurationChange;
    private lastAppliedEditorOptions?;
    private readonly inputListener;
    constructor(id: string, group: IEditorGroup, telemetryService: ITelemetryService, instantiationService: IInstantiationService, storageService: IStorageService, textResourceConfigurationService: ITextResourceConfigurationService, themeService: IThemeService, editorService: IEditorService, editorGroupService: IEditorGroupsService, fileService: IFileService);
    private handleConfigurationChangeEvent;
    protected shouldHandleConfigurationChangeEvent(e: ITextResourceConfigurationChangeEvent, resource: URI | undefined): boolean;
    private consumePendingConfigurationChangeEvent;
    protected computeConfiguration(configuration: IEditorConfiguration): ICodeEditorOptions;
    protected computeAriaLabel(): string;
    private onDidChangeFileSystemProvider;
    private onDidChangeInputCapabilities;
    protected updateReadonly(input: EditorInput): void;
    protected getReadonlyConfiguration(isReadonly: boolean | IMarkdownString | undefined): {
        readOnly: boolean;
        readOnlyMessage: IMarkdownString | undefined;
    };
    protected getConfigurationOverrides(configuration: IEditorConfiguration): ICodeEditorOptions;
    protected createEditor(parent: HTMLElement): void;
    private registerCodeEditorListeners;
    private toEditorPaneSelectionChangeReason;
    getSelection(): IEditorPaneSelection | undefined;
    protected abstract createEditorControl(parent: HTMLElement, initialOptions: ICodeEditorOptions): void;
    protected abstract updateEditorControlOptions(options: ICodeEditorOptions): void;
    protected abstract getMainControl(): ICodeEditor | undefined;
    setInput(input: EditorInput, options: ITextEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void>;
    clearInput(): void;
    getScrollPosition(): IEditorPaneScrollPosition;
    setScrollPosition(scrollPosition: IEditorPaneScrollPosition): void;
    protected setEditorVisible(visible: boolean): void;
    protected toEditorViewStateResource(input: EditorInput): URI | undefined;
    private updateEditorConfiguration;
    private getActiveResource;
    dispose(): void;
}
export declare class TextEditorPaneSelection implements IEditorPaneSelection {
    private readonly textSelection;
    private static readonly TEXT_EDITOR_SELECTION_THRESHOLD;
    constructor(textSelection: Selection);
    compare(other: IEditorPaneSelection): EditorPaneSelectionCompareResult;
    restore(options: IEditorOptions): ITextEditorOptions;
    log(): string;
}
