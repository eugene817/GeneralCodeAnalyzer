import { IDisposable } from "../../../base/common/lifecycle.js";
import { URI } from "../../../base/common/uri.js";
import { IOpener, IValidator, IExternalUriResolver, IExternalOpener, OpenInternalOptions, OpenExternalOptions, ResolveExternalUriOptions, IResolvedExternalUri } from "./opener.js";
export declare const IOpenerService: import("../../instantiation/common/instantiation.js").ServiceIdentifier<IOpenerService>;
export interface IOpenerService {
    readonly _serviceBrand: undefined;
    registerOpener(opener: IOpener): IDisposable;
    registerValidator(validator: IValidator): IDisposable;
    registerExternalUriResolver(resolver: IExternalUriResolver): IDisposable;
    setDefaultExternalOpener(opener: IExternalOpener): void;
    registerExternalOpener(opener: IExternalOpener): IDisposable;
    open(resource: URI | string, options?: OpenInternalOptions | OpenExternalOptions): Promise<boolean>;
    resolveExternalUri(resource: URI, options?: ResolveExternalUriOptions): Promise<IResolvedExternalUri>;
}
