import { IContextMenuDelegate } from "../../../base/browser/contextmenu.js";
import { StandardMouseEvent } from "../../../base/browser/mouseEvent.js";
import { AnchorAlignment, AnchorAxisAlignment, IAnchor } from "../../../base/browser/ui/contextview/contextview.js";
import { IAction } from "../../../base/common/actions.js";
import { IDisposable } from "../../../base/common/lifecycle.js";
import { IMenuActionOptions, MenuId } from "../../actions/common/actions.js";
import { IContextKeyService } from "../../contextkey/common/contextkey.service.js";
export interface IContextViewDelegate {
    canRelayout?: boolean;
    getAnchor(): HTMLElement | StandardMouseEvent | IAnchor;
    render(container: HTMLElement): IDisposable;
    onDOMEvent?(e: any, activeElement: HTMLElement): void;
    onHide?(data?: any): void;
    focus?(): void;
    anchorAlignment?: AnchorAlignment;
    anchorAxisAlignment?: AnchorAxisAlignment;
    layer?: number;
}
export interface IOpenContextView {
    close: () => void;
}
export type IContextMenuMenuDelegate = {
    menuId?: MenuId;
    menuActionOptions?: IMenuActionOptions;
    contextKeyService?: IContextKeyService;
    getActions?(): IAction[];
} & Omit<IContextMenuDelegate, "getActions">;
