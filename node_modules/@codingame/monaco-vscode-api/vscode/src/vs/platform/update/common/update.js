
import { upcast } from '../../../base/common/types.js';

var StateType;
(function (StateType) {
    StateType["Uninitialized"] = "uninitialized";
    StateType["Idle"] = "idle";
    StateType["Disabled"] = "disabled";
    StateType["CheckingForUpdates"] = "checking for updates";
    StateType["AvailableForDownload"] = "available for download";
    StateType["Downloading"] = "downloading";
    StateType["Downloaded"] = "downloaded";
    StateType["Updating"] = "updating";
    StateType["Ready"] = "ready";
})(StateType || (StateType = {}));
var UpdateType;
(function (UpdateType) {
    UpdateType[UpdateType["Setup"] = 0] = "Setup";
    UpdateType[UpdateType["Archive"] = 1] = "Archive";
    UpdateType[UpdateType["Snap"] = 2] = "Snap";
})(UpdateType || (UpdateType = {}));
var DisablementReason;
(function (DisablementReason) {
    DisablementReason[DisablementReason["NotBuilt"] = 0] = "NotBuilt";
    DisablementReason[DisablementReason["DisabledByEnvironment"] = 1] = "DisabledByEnvironment";
    DisablementReason[DisablementReason["ManuallyDisabled"] = 2] = "ManuallyDisabled";
    DisablementReason[DisablementReason["MissingConfiguration"] = 3] = "MissingConfiguration";
    DisablementReason[DisablementReason["InvalidConfiguration"] = 4] = "InvalidConfiguration";
    DisablementReason[DisablementReason["RunningAsAdmin"] = 5] = "RunningAsAdmin";
})(DisablementReason || (DisablementReason = {}));
const State = {
    Uninitialized: upcast({ type: StateType.Uninitialized }),
    Disabled: (reason) => ({ type: StateType.Disabled, reason }),
    Idle: (updateType, error) => ({ type: StateType.Idle, updateType, error }),
    CheckingForUpdates: (explicit) => ({ type: StateType.CheckingForUpdates, explicit }),
    AvailableForDownload: (update) => ({ type: StateType.AvailableForDownload, update }),
    Downloading: upcast({ type: StateType.Downloading }),
    Downloaded: (update) => ({ type: StateType.Downloaded, update }),
    Updating: (update) => ({ type: StateType.Updating, update }),
    Ready: (update) => ({ type: StateType.Ready, update }),
};

export { DisablementReason, State, StateType, UpdateType };
