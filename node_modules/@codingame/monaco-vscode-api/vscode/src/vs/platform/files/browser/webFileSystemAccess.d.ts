export declare namespace WebFileSystemAccess {
    function supported(obj: any & Window): boolean;
    function isFileSystemHandle(handle: unknown): handle is FileSystemHandle;
    function isFileSystemFileHandle(handle: FileSystemHandle): handle is FileSystemFileHandle;
    function isFileSystemDirectoryHandle(handle: FileSystemHandle): handle is FileSystemDirectoryHandle;
}
export declare namespace WebFileSystemObserver {
    function supported(obj: any & Window): boolean;
}
export interface FileSystemObserver {
    new (callback: (records: FileSystemObserverRecord[], observer: FileSystemObserver) => void): FileSystemObserver;
    observe(handle: FileSystemHandle): Promise<void>;
    observe(handle: FileSystemDirectoryHandle, options?: {
        recursive: boolean;
    }): Promise<void>;
    unobserve(handle: FileSystemHandle): void;
    disconnect(): void;
}
export interface FileSystemObserverRecord {
    readonly root: FileSystemHandle;
    readonly changedHandle: FileSystemHandle;
    readonly relativePathComponents: string[];
    readonly type: "appeared" | "disappeared" | "modified" | "moved" | "unknown" | "errored";
    readonly relativePathMovedFrom?: string[];
}
