import { Event } from "../../../base/common/event.js";
import { DisposableStore } from "../../../base/common/lifecycle.js";
import { StorageValue } from "../../../base/parts/storage/common/storage.js";
import { IUserDataProfile } from "../../userDataProfile/common/userDataProfile.js";
import { IAnyWorkspaceIdentifier } from "../../workspace/common/workspace.js";
import { StorageScope, IWorkspaceStorageValueChangeEvent, IProfileStorageValueChangeEvent, IApplicationStorageValueChangeEvent, IStorageValueChangeEvent, IStorageTargetChangeEvent, IWillSaveStateEvent, StorageTarget, IStorageEntry, WillSaveStateReason } from "./storage.js";
export declare const IStorageService: import("../../instantiation/common/instantiation.js").ServiceIdentifier<IStorageService>;
export interface IStorageService {
    readonly _serviceBrand: undefined;
    onDidChangeValue(scope: StorageScope.WORKSPACE, key: string | undefined, disposable: DisposableStore): Event<IWorkspaceStorageValueChangeEvent>;
    onDidChangeValue(scope: StorageScope.PROFILE, key: string | undefined, disposable: DisposableStore): Event<IProfileStorageValueChangeEvent>;
    onDidChangeValue(scope: StorageScope.APPLICATION, key: string | undefined, disposable: DisposableStore): Event<IApplicationStorageValueChangeEvent>;
    onDidChangeValue(scope: StorageScope, key: string | undefined, disposable: DisposableStore): Event<IStorageValueChangeEvent>;
    readonly onDidChangeTarget: Event<IStorageTargetChangeEvent>;
    readonly onWillSaveState: Event<IWillSaveStateEvent>;
    get(key: string, scope: StorageScope, fallbackValue: string): string;
    get(key: string, scope: StorageScope, fallbackValue?: string): string | undefined;
    getBoolean(key: string, scope: StorageScope, fallbackValue: boolean): boolean;
    getBoolean(key: string, scope: StorageScope, fallbackValue?: boolean): boolean | undefined;
    getNumber(key: string, scope: StorageScope, fallbackValue: number): number;
    getNumber(key: string, scope: StorageScope, fallbackValue?: number): number | undefined;
    getObject<T extends object>(key: string, scope: StorageScope, fallbackValue: T): T;
    getObject<T extends object>(key: string, scope: StorageScope, fallbackValue?: T): T | undefined;
    store(key: string, value: StorageValue, scope: StorageScope, target: StorageTarget): void;
    storeAll(entries: Array<IStorageEntry>, external: boolean): void;
    remove(key: string, scope: StorageScope): void;
    keys(scope: StorageScope, target: StorageTarget): string[];
    log(): void;
    hasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean;
    switch(to: IAnyWorkspaceIdentifier | IUserDataProfile, preserveData: boolean): Promise<void>;
    isNew(scope: StorageScope): boolean;
    optimize(scope: StorageScope): Promise<void>;
    flush(reason?: WillSaveStateReason): Promise<void>;
}
