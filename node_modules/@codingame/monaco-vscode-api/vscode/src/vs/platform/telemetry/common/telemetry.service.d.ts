import { ClassifiedEvent, OmitMetadata, IGDPRProperty, StrictPropertyCheck } from "./gdprTypings.js";
import { TelemetryLevel, ITelemetryData, type ITelemetryEndpoint } from "./telemetry.js";
export declare const ITelemetryService: import("../../instantiation/common/instantiation.js").ServiceIdentifier<ITelemetryService>;
export interface ITelemetryService {
    readonly _serviceBrand: undefined;
    readonly telemetryLevel: TelemetryLevel;
    readonly sessionId: string;
    readonly machineId: string;
    readonly sqmId: string;
    readonly devDeviceId: string;
    readonly firstSessionDate: string;
    readonly msftInternal?: boolean;
    readonly sendErrorTelemetry: boolean;
    publicLog(eventName: string, data?: ITelemetryData): void;
    publicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;
    publicLogError(errorEventName: string, data?: ITelemetryData): void;
    publicLogError2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;
    setExperimentProperty(name: string, value: string): void;
}
export declare const ICustomEndpointTelemetryService: import("../../instantiation/common/instantiation.js").ServiceIdentifier<ICustomEndpointTelemetryService>;
export interface ICustomEndpointTelemetryService {
    readonly _serviceBrand: undefined;
    publicLog(endpoint: ITelemetryEndpoint, eventName: string, data?: ITelemetryData): void;
    publicLogError(endpoint: ITelemetryEndpoint, errorEventName: string, data?: ITelemetryData): void;
}
