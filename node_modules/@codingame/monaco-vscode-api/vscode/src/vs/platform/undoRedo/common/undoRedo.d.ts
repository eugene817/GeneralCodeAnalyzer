import { IDisposable } from "../../../base/common/lifecycle.js";
import { URI } from "../../../base/common/uri.js";
export declare enum UndoRedoElementType {
    Resource = 0,
    Workspace = 1
}
export interface IResourceUndoRedoElement {
    readonly type: UndoRedoElementType.Resource;
    readonly resource: URI;
    readonly label: string;
    readonly code: string;
    readonly confirmBeforeUndo?: boolean;
    undo(): Promise<void> | void;
    redo(): Promise<void> | void;
}
export interface IWorkspaceUndoRedoElement {
    readonly type: UndoRedoElementType.Workspace;
    readonly resources: readonly URI[];
    readonly label: string;
    readonly code: string;
    readonly confirmBeforeUndo?: boolean;
    undo(): Promise<void> | void;
    redo(): Promise<void> | void;
    split?(): IResourceUndoRedoElement[];
    prepareUndoRedo?(): Promise<IDisposable> | IDisposable | void;
}
export type IUndoRedoElement = IResourceUndoRedoElement | IWorkspaceUndoRedoElement;
export interface IPastFutureElements {
    past: IUndoRedoElement[];
    future: IUndoRedoElement[];
}
export interface UriComparisonKeyComputer {
    getComparisonKey(uri: URI): string;
}
export declare class ResourceEditStackSnapshot {
    readonly resource: URI;
    readonly elements: number[];
    constructor(resource: URI, elements: number[]);
}
export declare class UndoRedoGroup {
    private static _ID;
    readonly id: number;
    private order;
    constructor();
    nextOrder(): number;
    static None: UndoRedoGroup;
}
export declare class UndoRedoSource {
    private static _ID;
    readonly id: number;
    private order;
    constructor();
    nextOrder(): number;
    static None: UndoRedoSource;
}
