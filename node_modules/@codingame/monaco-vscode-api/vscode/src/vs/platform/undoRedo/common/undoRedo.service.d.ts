import { IDisposable } from "../../../base/common/lifecycle.js";
import { URI } from "../../../base/common/uri.js";
import { UriComparisonKeyComputer, IUndoRedoElement, UndoRedoGroup, UndoRedoSource, IPastFutureElements, ResourceEditStackSnapshot } from "./undoRedo.js";
export declare const IUndoRedoService: import("../../instantiation/common/instantiation.js").ServiceIdentifier<IUndoRedoService>;
export interface IUndoRedoService {
    readonly _serviceBrand: undefined;
    registerUriComparisonKeyComputer(scheme: string, uriComparisonKeyComputer: UriComparisonKeyComputer): IDisposable;
    getUriComparisonKey(resource: URI): string;
    pushElement(element: IUndoRedoElement, group?: UndoRedoGroup, source?: UndoRedoSource): void;
    getLastElement(resource: URI): IUndoRedoElement | null;
    getElements(resource: URI): IPastFutureElements;
    setElementsValidFlag(resource: URI, isValid: boolean, filter: (element: IUndoRedoElement) => boolean): void;
    removeElements(resource: URI): void;
    createSnapshot(resource: URI): ResourceEditStackSnapshot;
    restoreSnapshot(snapshot: ResourceEditStackSnapshot): void;
    canUndo(resource: URI | UndoRedoSource): boolean;
    undo(resource: URI | UndoRedoSource): Promise<void> | void;
    canRedo(resource: URI | UndoRedoSource): boolean;
    redo(resource: URI | UndoRedoSource): Promise<void> | void;
}
