
import { equals } from '../../../base/common/arrays.js';

function isResolvedEditorModel(model) {
    const candidate = model;
    return typeof candidate?.resolve === 'function'
        && typeof candidate?.isResolved === 'function';
}
var EditorActivation;
(function (EditorActivation) {
    EditorActivation[EditorActivation["ACTIVATE"] = 1] = "ACTIVATE";
    EditorActivation[EditorActivation["RESTORE"] = 2] = "RESTORE";
    EditorActivation[EditorActivation["PRESERVE"] = 3] = "PRESERVE";
})(EditorActivation || (EditorActivation = {}));
var EditorResolution;
(function (EditorResolution) {
    EditorResolution[EditorResolution["PICK"] = 0] = "PICK";
    EditorResolution[EditorResolution["EXCLUSIVE_ONLY"] = 1] = "EXCLUSIVE_ONLY";
})(EditorResolution || (EditorResolution = {}));
var EditorOpenSource;
(function (EditorOpenSource) {
    EditorOpenSource[EditorOpenSource["API"] = 0] = "API";
    EditorOpenSource[EditorOpenSource["USER"] = 1] = "USER";
})(EditorOpenSource || (EditorOpenSource = {}));
var TextEditorSelectionRevealType;
(function (TextEditorSelectionRevealType) {
    TextEditorSelectionRevealType[TextEditorSelectionRevealType["Center"] = 0] = "Center";
    TextEditorSelectionRevealType[TextEditorSelectionRevealType["CenterIfOutsideViewport"] = 1] = "CenterIfOutsideViewport";
    TextEditorSelectionRevealType[TextEditorSelectionRevealType["NearTop"] = 2] = "NearTop";
    TextEditorSelectionRevealType[TextEditorSelectionRevealType["NearTopIfOutsideViewport"] = 3] = "NearTopIfOutsideViewport";
})(TextEditorSelectionRevealType || (TextEditorSelectionRevealType = {}));
var TextEditorSelectionSource;
(function (TextEditorSelectionSource) {
    TextEditorSelectionSource["PROGRAMMATIC"] = "api";
    TextEditorSelectionSource["NAVIGATION"] = "code.navigation";
    TextEditorSelectionSource["JUMP"] = "code.jump";
})(TextEditorSelectionSource || (TextEditorSelectionSource = {}));
function isTextEditorDiffInformationEqual(uriIdentityService, diff1, diff2) {
    return diff1?.documentVersion === diff2?.documentVersion &&
        uriIdentityService.extUri.isEqual(diff1?.original, diff2?.original) &&
        uriIdentityService.extUri.isEqual(diff1?.modified, diff2?.modified) &&
        equals(diff1?.changes, diff2?.changes, (a, b) => {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
        });
}

export { EditorActivation, EditorOpenSource, EditorResolution, TextEditorSelectionRevealType, TextEditorSelectionSource, isResolvedEditorModel, isTextEditorDiffInformationEqual };
