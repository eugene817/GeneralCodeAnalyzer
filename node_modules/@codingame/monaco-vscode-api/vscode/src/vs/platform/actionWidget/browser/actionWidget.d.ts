import { IAnchor } from "../../../base/browser/ui/contextview/contextview.js";
import { IAction } from "../../../base/common/actions.js";
import { Disposable } from "../../../base/common/lifecycle.js";
import { IActionListDelegate, IActionListItem } from "./actionList.js";
import { IContextKeyService } from "../../contextkey/common/contextkey.service.js";
import { IContextViewService } from "../../contextview/browser/contextView.service.js";
import { IInstantiationService } from "../../instantiation/common/instantiation.js";
import { IActionWidgetService } from "./actionWidget.service.js";
export declare class ActionWidgetService extends Disposable implements IActionWidgetService {
    private readonly _contextViewService;
    private readonly _contextKeyService;
    private readonly _instantiationService;
    readonly _serviceBrand: undefined;
    get isVisible(): boolean;
    private readonly _list;
    constructor(_contextViewService: IContextViewService, _contextKeyService: IContextKeyService, _instantiationService: IInstantiationService);
    show<T>(user: string, supportsPreview: boolean, items: readonly IActionListItem<T>[], delegate: IActionListDelegate<T>, anchor: IAnchor, container: HTMLElement | undefined, actionBarActions?: readonly IAction[]): void;
    acceptSelected(preview?: boolean): void;
    focusPrevious(): void;
    focusNext(): void;
    hide(didCancel?: boolean): void;
    clear(): void;
    private _renderWidget;
    private _createActionBar;
    private _onWidgetClosed;
}
