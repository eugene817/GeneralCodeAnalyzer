
import { localize } from '../../nls.js';
import { LANGUAGE_DEFAULT } from './platform.js';

const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const month = day * 30;
const year = day * 365;
function fromNow(date, appendAgoLabel, useFullTimeWords, disallowNow) {
    if (typeof date !== 'number') {
        date = date.getTime();
    }
    const seconds = Math.round((( new Date()).getTime() - date) / 1000);
    if (seconds < -30) {
        return localize(44, 'in {0}', fromNow(( new Date()).getTime() + seconds * 1000, false));
    }
    if (!disallowNow && seconds < 30) {
        return localize(45, 'now');
    }
    let value;
    if (seconds < minute) {
        value = seconds;
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(46, '{0} second ago', value))
                    : ( localize(47, '{0} sec ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(48, '{0} seconds ago', value))
                    : ( localize(49, '{0} secs ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(50, '{0} second', value))
                    : ( localize(51, '{0} sec', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(52, '{0} seconds', value))
                    : ( localize(53, '{0} secs', value));
            }
        }
    }
    if (seconds < hour) {
        value = Math.floor(seconds / minute);
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(54, '{0} minute ago', value))
                    : ( localize(55, '{0} min ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(56, '{0} minutes ago', value))
                    : ( localize(57, '{0} mins ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(58, '{0} minute', value))
                    : ( localize(59, '{0} min', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(60, '{0} minutes', value))
                    : ( localize(61, '{0} mins', value));
            }
        }
    }
    if (seconds < day) {
        value = Math.floor(seconds / hour);
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(62, '{0} hour ago', value))
                    : ( localize(63, '{0} hr ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(64, '{0} hours ago', value))
                    : ( localize(65, '{0} hrs ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(66, '{0} hour', value))
                    : ( localize(67, '{0} hr', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(68, '{0} hours', value))
                    : ( localize(69, '{0} hrs', value));
            }
        }
    }
    if (seconds < week) {
        value = Math.floor(seconds / day);
        if (appendAgoLabel) {
            return value === 1
                ? ( localize(70, '{0} day ago', value))
                : ( localize(71, '{0} days ago', value));
        }
        else {
            return value === 1
                ? ( localize(72, '{0} day', value))
                : ( localize(73, '{0} days', value));
        }
    }
    if (seconds < month) {
        value = Math.floor(seconds / week);
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(74, '{0} week ago', value))
                    : ( localize(75, '{0} wk ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(76, '{0} weeks ago', value))
                    : ( localize(77, '{0} wks ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(78, '{0} week', value))
                    : ( localize(79, '{0} wk', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(80, '{0} weeks', value))
                    : ( localize(81, '{0} wks', value));
            }
        }
    }
    if (seconds < year) {
        value = Math.floor(seconds / month);
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(82, '{0} month ago', value))
                    : ( localize(83, '{0} mo ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(84, '{0} months ago', value))
                    : ( localize(85, '{0} mos ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( localize(86, '{0} month', value))
                    : ( localize(87, '{0} mo', value));
            }
            else {
                return useFullTimeWords
                    ? ( localize(88, '{0} months', value))
                    : ( localize(89, '{0} mos', value));
            }
        }
    }
    value = Math.floor(seconds / year);
    if (appendAgoLabel) {
        if (value === 1) {
            return useFullTimeWords
                ? ( localize(90, '{0} year ago', value))
                : ( localize(91, '{0} yr ago', value));
        }
        else {
            return useFullTimeWords
                ? ( localize(92, '{0} years ago', value))
                : ( localize(93, '{0} yrs ago', value));
        }
    }
    else {
        if (value === 1) {
            return useFullTimeWords
                ? ( localize(94, '{0} year', value))
                : ( localize(95, '{0} yr', value));
        }
        else {
            return useFullTimeWords
                ? ( localize(96, '{0} years', value))
                : ( localize(97, '{0} yrs', value));
        }
    }
}
function fromNowByDay(date, appendAgoLabel, useFullTimeWords) {
    if (typeof date !== 'number') {
        date = date.getTime();
    }
    const todayMidnightTime = ( new Date());
    todayMidnightTime.setHours(0, 0, 0, 0);
    const yesterdayMidnightTime = ( new Date(todayMidnightTime.getTime()));
    yesterdayMidnightTime.setDate(yesterdayMidnightTime.getDate() - 1);
    if (date > todayMidnightTime.getTime()) {
        return localize(98, 'Today');
    }
    if (date > yesterdayMidnightTime.getTime()) {
        return localize(99, 'Yesterday');
    }
    return fromNow(date, appendAgoLabel, useFullTimeWords);
}
function getDurationString(ms, useFullTimeWords) {
    const seconds = Math.abs(ms / 1000);
    if (seconds < 1) {
        return localize(100, '{0}ms', ms);
    }
    if (seconds < minute) {
        return localize(101, '{0}s', Math.round(ms) / 1000);
    }
    if (seconds < hour) {
        return localize(102, '{0} mins', Math.round(ms / (1000 * minute)));
    }
    if (seconds < day) {
        return localize(103, '{0} hrs', Math.round(ms / (1000 * hour)));
    }
    return localize(104, '{0} days', Math.round(ms / (1000 * day)));
}
function toLocalISOString(date) {
    return date.getFullYear() +
        '-' + String(date.getMonth() + 1).padStart(2, '0') +
        '-' + String(date.getDate()).padStart(2, '0') +
        'T' + String(date.getHours()).padStart(2, '0') +
        ':' + String(date.getMinutes()).padStart(2, '0') +
        ':' + String(date.getSeconds()).padStart(2, '0') +
        '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5) +
        'Z';
}
const safeIntl = {
    DateTimeFormat(locales, options) {
        try {
            return new Intl.DateTimeFormat(locales, options);
        }
        catch {
            return new Intl.DateTimeFormat(undefined, options);
        }
    },
    Collator(locales, options) {
        try {
            return new Intl.Collator(locales, options);
        }
        catch {
            return new Intl.Collator(undefined, options);
        }
    },
    Segmenter(locales, options) {
        try {
            return new Intl.Segmenter(locales, options);
        }
        catch {
            return new Intl.Segmenter(undefined, options);
        }
    },
    Locale(tag, options) {
        try {
            return new Intl.Locale(tag, options);
        }
        catch {
            return new Intl.Locale(LANGUAGE_DEFAULT, options);
        }
    }
};

export { fromNow, fromNowByDay, getDurationString, safeIntl, toLocalISOString };
