import { VSBufferReadableStream } from "../../../../base/common/buffer.js";
import { CancellationToken } from "../../../../base/common/cancellation.js";
import { Event } from "../../../../base/common/event.js";
import { IDisposable } from "../../../../base/common/lifecycle.js";
import { URI } from "../../../../base/common/uri.js";
import { ConfigurationTarget } from "../../../../platform/configuration/common/configuration.js";
import { SnapshotContext } from "@codingame/monaco-vscode-bba55be6-41a2-50cd-a3cc-8bafa35bfa89-common/vscode/vs/workbench/services/workingCopy/common/fileWorkingCopy";
import { NotebookCellTextModel } from "@codingame/monaco-vscode-9a6d8b6c-ad4c-5ea3-9558-f43d6dc4c0ad-common/vscode/vs/workbench/contrib/notebook/common/model/notebookCellTextModel";
import { NotebookTextModel } from "@codingame/monaco-vscode-notebook-service-override/vscode/vs/workbench/contrib/notebook/common/model/notebookTextModel";
import { NotebookExtensionDescription, IOutputDto, IOrderedMimeType, INotebookRendererInfo, INotebookStaticPreloadInfo, INotebookContributionData } from "./notebookCommon.js";
import { NotebookProviderInfo } from "@codingame/monaco-vscode-notebook-service-override/vscode/vs/workbench/contrib/notebook/common/notebookProvider";
import { INotebookSerializer, SimpleNotebookProviderInfo } from "@codingame/monaco-vscode-9b5a5e82-d649-5455-b4bf-ef90d6afd294-common/vscode/vs/workbench/contrib/notebook/common/notebookService";
export declare const INotebookService: import("../../../../platform/instantiation/common/instantiation.js").ServiceIdentifier<INotebookService>;
export interface INotebookService {
    readonly _serviceBrand: undefined;
    canResolve(viewType: string): Promise<boolean>;
    readonly onAddViewType: Event<string>;
    readonly onWillRemoveViewType: Event<string>;
    readonly onDidChangeOutputRenderers: Event<void>;
    readonly onWillAddNotebookDocument: Event<NotebookTextModel>;
    readonly onDidAddNotebookDocument: Event<NotebookTextModel>;
    readonly onWillRemoveNotebookDocument: Event<NotebookTextModel>;
    readonly onDidRemoveNotebookDocument: Event<NotebookTextModel>;
    registerNotebookSerializer(viewType: string, extensionData: NotebookExtensionDescription, serializer: INotebookSerializer): IDisposable;
    withNotebookDataProvider(viewType: string): Promise<SimpleNotebookProviderInfo>;
    tryGetDataProviderSync(viewType: string): SimpleNotebookProviderInfo | undefined;
    getOutputMimeTypeInfo(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined, output: IOutputDto): readonly IOrderedMimeType[];
    getViewTypeProvider(viewType: string): string | undefined;
    getRendererInfo(id: string): INotebookRendererInfo | undefined;
    getRenderers(): INotebookRendererInfo[];
    getStaticPreloads(viewType: string): Iterable<INotebookStaticPreloadInfo>;
    updateMimePreferredRenderer(viewType: string, mimeType: string, rendererId: string, otherMimetypes: readonly string[]): void;
    saveMimeDisplayOrder(target: ConfigurationTarget): void;
    createNotebookTextModel(viewType: string, uri: URI, stream?: VSBufferReadableStream): Promise<NotebookTextModel>;
    createNotebookTextDocumentSnapshot(uri: URI, context: SnapshotContext, token: CancellationToken): Promise<VSBufferReadableStream>;
    restoreNotebookTextModelFromSnapshot(uri: URI, viewType: string, snapshot: VSBufferReadableStream): Promise<NotebookTextModel>;
    getNotebookTextModel(uri: URI): NotebookTextModel | undefined;
    getNotebookTextModels(): Iterable<NotebookTextModel>;
    listNotebookDocuments(): readonly NotebookTextModel[];
    registerContributedNotebookType(viewType: string, data: INotebookContributionData): IDisposable;
    getContributedNotebookType(viewType: string): NotebookProviderInfo | undefined;
    getContributedNotebookTypes(resource?: URI): readonly NotebookProviderInfo[];
    hasSupportedNotebooks(resource: URI): boolean;
    getNotebookProviderResourceRoots(): URI[];
    setToCopy(items: NotebookCellTextModel[], isCopy: boolean): void;
    getToCopy(): {
        items: NotebookCellTextModel[];
        isCopy: boolean;
    } | undefined;
    clearEditorCache(): void;
}
