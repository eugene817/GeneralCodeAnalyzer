
import { localize } from '../../../../nls.js';
import { RawContextKey, ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';
import { IsWebContext } from '../../../../platform/contextkey/common/contextkeys.js';
import { RemoteNameContext } from '../../../common/contextkeys.js';

var ChatContextKeys;
(function (ChatContextKeys) {
    ChatContextKeys.responseVote = ( new RawContextKey(
        'chatSessionResponseVote',
        '',
        { type: 'string', description: ( localize(
            4817,
            "When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string."
        )) }
    ));
    ChatContextKeys.responseDetectedAgentCommand = ( new RawContextKey(
        'chatSessionResponseDetectedAgentOrCommand',
        false,
        { type: 'boolean', description: ( localize(4818, "When the agent or command was automatically detected")) }
    ));
    ChatContextKeys.responseSupportsIssueReporting = ( new RawContextKey(
        'chatResponseSupportsIssueReporting',
        false,
        { type: 'boolean', description: ( localize(4819, "True when the current chat response supports issue reporting.")) }
    ));
    ChatContextKeys.responseIsFiltered = ( new RawContextKey(
        'chatSessionResponseFiltered',
        false,
        { type: 'boolean', description: ( localize(4820, "True when the chat response was filtered out by the server.")) }
    ));
    ChatContextKeys.responseHasError = ( new RawContextKey(
        'chatSessionResponseError',
        false,
        { type: 'boolean', description: ( localize(4821, "True when the chat response resulted in an error.")) }
    ));
    ChatContextKeys.requestInProgress = ( new RawContextKey(
        'chatSessionRequestInProgress',
        false,
        { type: 'boolean', description: ( localize(4822, "True when the current request is still in progress.")) }
    ));
    ChatContextKeys.isRequestPaused = ( new RawContextKey(
        'chatRequestIsPaused',
        false,
        { type: 'boolean', description: ( localize(4823, "True when the current request is paused.")) }
    ));
    ChatContextKeys.canRequestBePaused = ( new RawContextKey(
        'chatCanRequestBePaused',
        false,
        { type: 'boolean', description: ( localize(4824, "True when the current request can be paused.")) }
    ));
    ChatContextKeys.isResponse = ( new RawContextKey('chatResponse', false, { type: 'boolean', description: ( localize(4825, "The chat item is a response.")) }));
    ChatContextKeys.isRequest = ( new RawContextKey('chatRequest', false, { type: 'boolean', description: ( localize(4826, "The chat item is a request")) }));
    ChatContextKeys.itemId = ( new RawContextKey('chatItemId', '', { type: 'string', description: ( localize(4827, "The id of the chat item.")) }));
    ChatContextKeys.lastItemId = ( new RawContextKey('chatLastItemId', [], { type: 'string', description: ( localize(4828, "The id of the last chat item.")) }));
    ChatContextKeys.editApplied = ( new RawContextKey('chatEditApplied', false, { type: 'boolean', description: ( localize(4829, "True when the chat text edits have been applied.")) }));
    ChatContextKeys.inputHasText = ( new RawContextKey('chatInputHasText', false, { type: 'boolean', description: ( localize(4830, "True when the chat input has text.")) }));
    ChatContextKeys.inputHasFocus = ( new RawContextKey('chatInputHasFocus', false, { type: 'boolean', description: ( localize(4831, "True when the chat input has focus.")) }));
    ChatContextKeys.inChatInput = ( new RawContextKey('inChatInput', false, { type: 'boolean', description: ( localize(4832, "True when focus is in the chat input, false otherwise.")) }));
    ChatContextKeys.inChatSession = ( new RawContextKey('inChat', false, { type: 'boolean', description: ( localize(4833, "True when focus is in the chat widget, false otherwise.")) }));
    ChatContextKeys.instructionsAttached = ( new RawContextKey(
        'chatInstructionsAttached',
        false,
        { type: 'boolean', description: ( localize(4834, "True when the chat has a prompt instructions attached.")) }
    ));
    ChatContextKeys.supported = ( ContextKeyExpr.or(( IsWebContext.toNegated()), ( RemoteNameContext.notEqualsTo(''))));
    ChatContextKeys.enabled = ( new RawContextKey('chatIsEnabled', false, { type: 'boolean', description: ( localize(
        4835,
        "True when chat is enabled because a default chat participant is activated with an implementation."
    )) }));
    ChatContextKeys.panelParticipantRegistered = ( new RawContextKey(
        'chatPanelParticipantRegistered',
        false,
        { type: 'boolean', description: ( localize(4836, "True when a default chat participant is registered for the panel.")) }
    ));
    ChatContextKeys.editingParticipantRegistered = ( new RawContextKey(
        'chatEditingParticipantRegistered',
        false,
        { type: 'boolean', description: ( localize(4837, "True when a default chat participant is registered for editing.")) }
    ));
    ChatContextKeys.chatEditingCanUndo = ( new RawContextKey(
        'chatEditingCanUndo',
        false,
        { type: 'boolean', description: ( localize(
            4838,
            "True when it is possible to undo an interaction in the editing panel."
        )) }
    ));
    ChatContextKeys.chatEditingCanRedo = ( new RawContextKey(
        'chatEditingCanRedo',
        false,
        { type: 'boolean', description: ( localize(
            4839,
            "True when it is possible to redo an interaction in the editing panel."
        )) }
    ));
    ChatContextKeys.extensionInvalid = ( new RawContextKey(
        'chatExtensionInvalid',
        false,
        { type: 'boolean', description: ( localize(
            4840,
            "True when the installed chat extension is invalid and needs to be updated."
        )) }
    ));
    ChatContextKeys.inputCursorAtTop = ( new RawContextKey('chatCursorAtTop', false));
    ChatContextKeys.inputHasAgent = ( new RawContextKey('chatInputHasAgent', false));
    ChatContextKeys.location = ( new RawContextKey('chatLocation', undefined));
    ChatContextKeys.inQuickChat = ( new RawContextKey('quickChatHasFocus', false, { type: 'boolean', description: ( localize(4841, "True when the quick chat UI has focus, false otherwise.")) }));
    ChatContextKeys.hasFileAttachments = ( new RawContextKey(
        'chatHasFileAttachments',
        false,
        { type: 'boolean', description: ( localize(4842, "True when the chat has file attachments.")) }
    ));
    ChatContextKeys.languageModelsAreUserSelectable = ( new RawContextKey(
        'chatModelsAreUserSelectable',
        false,
        { type: 'boolean', description: ( localize(4843, "True when the chat model can be selected manually by the user.")) }
    ));
    ChatContextKeys.Setup = {
        signedOut: ( new RawContextKey('chatSetupSignedOut', false, true)),
        hidden: ( new RawContextKey('chatSetupHidden', false, true)),
        installed: ( new RawContextKey('chatSetupInstalled', false, true)),
        canSignUp: ( new RawContextKey('chatPlanCanSignUp', false, true)),
        limited: ( new RawContextKey('chatPlanLimited', false, true)),
        pro: ( new RawContextKey('chatPlanPro', false, true))
    };
    ChatContextKeys.SetupViewKeys = ( new Set(
        [ChatContextKeys.Setup.hidden.key, ChatContextKeys.Setup.installed.key, ChatContextKeys.Setup.signedOut.key, ChatContextKeys.Setup.canSignUp.key]
    ));
    ChatContextKeys.SetupViewCondition = ( ContextKeyExpr.or(( ContextKeyExpr.and(( ChatContextKeys.Setup.hidden.negate()), ( ChatContextKeys.Setup.installed.negate()))), ( ContextKeyExpr.and(ChatContextKeys.Setup.canSignUp, ChatContextKeys.Setup.installed)), ( ContextKeyExpr.and(ChatContextKeys.Setup.signedOut, ChatContextKeys.Setup.installed))));
    ChatContextKeys.chatQuotaExceeded = ( new RawContextKey('chatQuotaExceeded', false, true));
    ChatContextKeys.completionsQuotaExceeded = ( new RawContextKey('completionsQuotaExceeded', false, true));
    ChatContextKeys.Editing = {
        hasToolsAgent: ( new RawContextKey('chatHasToolsAgent', false, { type: 'boolean', description: ( localize(4844, "True when a tools agent is registered.")) })),
        agentMode: ( new RawContextKey('chatAgentMode', false, { type: 'boolean', description: ( localize(4845, "True when edits is in agent mode.")) })),
        agentModeDisallowed: ( new RawContextKey(
            'chatAgentModeDisallowed',
            undefined,
            { type: 'boolean', description: ( localize(4846, "True when agent mode is not allowed.")) }
        )),
        hasToolConfirmation: ( new RawContextKey(
            'chatHasToolConfirmation',
            false,
            { type: 'boolean', description: ( localize(4847, "True when a tool confirmation is present.")) }
        )),
    };
})(ChatContextKeys || (ChatContextKeys = {}));

export { ChatContextKeys };
