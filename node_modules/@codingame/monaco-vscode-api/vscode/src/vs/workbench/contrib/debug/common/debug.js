
import { URI } from '../../../../base/common/uri.js';
import { localize } from '../../../../nls.js';
import { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';

const VIEWLET_ID = 'workbench.view.debug';
const VARIABLES_VIEW_ID = 'workbench.debug.variablesView';
const WATCH_VIEW_ID = 'workbench.debug.watchExpressionsView';
const CALLSTACK_VIEW_ID = 'workbench.debug.callStackView';
const LOADED_SCRIPTS_VIEW_ID = 'workbench.debug.loadedScriptsView';
const BREAKPOINTS_VIEW_ID = 'workbench.debug.breakPointsView';
const DISASSEMBLY_VIEW_ID = 'workbench.debug.disassemblyView';
const DEBUG_PANEL_ID = 'workbench.panel.repl';
const REPL_VIEW_ID = 'workbench.panel.repl.view';
const CONTEXT_DEBUG_TYPE = ( new RawContextKey('debugType', undefined, { type: 'string', description: ( localize(5767, "Debug type of the active debug session. For example 'python'.")) }));
const CONTEXT_DEBUG_CONFIGURATION_TYPE = ( new RawContextKey(
    'debugConfigurationType',
    undefined,
    { type: 'string', description: ( localize(
        5768,
        "Debug type of the selected launch configuration. For example 'python'."
    )) }
));
const CONTEXT_DEBUG_STATE = ( new RawContextKey('debugState', 'inactive', { type: 'string', description: ( localize(
    5769,
    "State that the focused debug session is in. One of the following: 'inactive', 'initializing', 'stopped' or 'running'."
)) }));
const CONTEXT_DEBUG_UX_KEY = 'debugUx';
const CONTEXT_DEBUG_UX = ( new RawContextKey(
    CONTEXT_DEBUG_UX_KEY,
    'default',
    { type: 'string', description: ( localize(
        5770,
        "Debug UX state. When there are no debug configurations it is 'simple', otherwise 'default'. Used to decide when to show welcome views in the debug viewlet."
    )) }
));
const CONTEXT_HAS_DEBUGGED = ( new RawContextKey('hasDebugged', false, { type: 'boolean', description: ( localize(
    5771,
    "True when a debug session has been started at least once, false otherwise."
)) }));
const CONTEXT_IN_DEBUG_MODE = ( new RawContextKey('inDebugMode', false, { type: 'boolean', description: ( localize(5772, "True when debugging, false otherwise.")) }));
const CONTEXT_IN_DEBUG_REPL = ( new RawContextKey('inDebugRepl', false, { type: 'boolean', description: ( localize(5773, "True when focus is in the debug console, false otherwise.")) }));
const CONTEXT_BREAKPOINT_WIDGET_VISIBLE = ( new RawContextKey(
    'breakpointWidgetVisible',
    false,
    { type: 'boolean', description: ( localize(
        5774,
        "True when breakpoint editor zone widget is visible, false otherwise."
    )) }
));
const CONTEXT_IN_BREAKPOINT_WIDGET = ( new RawContextKey(
    'inBreakpointWidget',
    false,
    { type: 'boolean', description: ( localize(
        5775,
        "True when focus is in the breakpoint editor zone widget, false otherwise."
    )) }
));
const CONTEXT_BREAKPOINTS_FOCUSED = ( new RawContextKey('breakpointsFocused', true, { type: 'boolean', description: ( localize(5776, "True when the BREAKPOINTS view is focused, false otherwise.")) }));
const CONTEXT_WATCH_EXPRESSIONS_FOCUSED = ( new RawContextKey(
    'watchExpressionsFocused',
    true,
    { type: 'boolean', description: ( localize(5777, "True when the WATCH view is focused, false otherwise.")) }
));
const CONTEXT_WATCH_EXPRESSIONS_EXIST = ( new RawContextKey(
    'watchExpressionsExist',
    false,
    { type: 'boolean', description: ( localize(5778, "True when at least one watch expression exists, false otherwise.")) }
));
const CONTEXT_VARIABLES_FOCUSED = ( new RawContextKey('variablesFocused', true, { type: 'boolean', description: ( localize(5779, "True when the VARIABLES views is focused, false otherwise")) }));
const CONTEXT_EXPRESSION_SELECTED = ( new RawContextKey(
    'expressionSelected',
    false,
    { type: 'boolean', description: ( localize(
        5780,
        "True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise."
    )) }
));
const CONTEXT_BREAKPOINT_INPUT_FOCUSED = ( new RawContextKey(
    'breakpointInputFocused',
    false,
    { type: 'boolean', description: ( localize(5781, "True when the input box has focus in the BREAKPOINTS view.")) }
));
const CONTEXT_CALLSTACK_ITEM_TYPE = ( new RawContextKey(
    'callStackItemType',
    undefined,
    { type: 'string', description: ( localize(
        5782,
        "Represents the item type of the focused element in the CALL STACK view. For example: 'session', 'thread', 'stackFrame'"
    )) }
));
const CONTEXT_CALLSTACK_SESSION_IS_ATTACH = ( new RawContextKey(
    'callStackSessionIsAttach',
    false,
    { type: 'boolean', description: ( localize(
        5783,
        "True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view."
    )) }
));
const CONTEXT_CALLSTACK_ITEM_STOPPED = ( new RawContextKey(
    'callStackItemStopped',
    false,
    { type: 'boolean', description: ( localize(
        5784,
        "True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view."
    )) }
));
const CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD = ( new RawContextKey(
    'callStackSessionHasOneThread',
    false,
    { type: 'boolean', description: ( localize(
        5785,
        "True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view."
    )) }
));
const CONTEXT_CALLSTACK_FOCUSED = ( new RawContextKey('callStackFocused', true, { type: 'boolean', description: ( localize(5786, "True when the CALLSTACK view is focused, false otherwise.")) }));
const CONTEXT_WATCH_ITEM_TYPE = ( new RawContextKey('watchItemType', undefined, { type: 'string', description: ( localize(
    5787,
    "Represents the item type of the focused element in the WATCH view. For example: 'expression', 'variable'"
)) }));
const CONTEXT_CAN_VIEW_MEMORY = ( new RawContextKey('canViewMemory', undefined, { type: 'boolean', description: ( localize(
    5788,
    "Indicates whether the item in the view has an associated memory refrence."
)) }));
const CONTEXT_BREAKPOINT_ITEM_TYPE = ( new RawContextKey(
    'breakpointItemType',
    undefined,
    { type: 'string', description: ( localize(
        5789,
        "Represents the item type of the focused element in the BREAKPOINTS view. For example: 'breakpoint', 'exceptionBreakppint', 'functionBreakpoint', 'dataBreakpoint'"
    )) }
));
const CONTEXT_BREAKPOINT_ITEM_IS_DATA_BYTES = ( new RawContextKey(
    'breakpointItemBytes',
    undefined,
    { type: 'boolean', description: ( localize(5790, "Whether the breakpoint item is a data breakpoint on a byte range.")) }
));
const CONTEXT_BREAKPOINT_HAS_MODES = ( new RawContextKey(
    'breakpointHasModes',
    false,
    { type: 'boolean', description: ( localize(5791, "Whether the breakpoint has multiple modes it can switch to.")) }
));
const CONTEXT_BREAKPOINT_SUPPORTS_CONDITION = ( new RawContextKey(
    'breakpointSupportsCondition',
    false,
    { type: 'boolean', description: ( localize(5792, "True when the focused breakpoint supports conditions.")) }
));
const CONTEXT_LOADED_SCRIPTS_SUPPORTED = ( new RawContextKey(
    'loadedScriptsSupported',
    false,
    { type: 'boolean', description: ( localize(5793, "True when the focused sessions supports the LOADED SCRIPTS view")) }
));
const CONTEXT_LOADED_SCRIPTS_ITEM_TYPE = ( new RawContextKey(
    'loadedScriptsItemType',
    undefined,
    { type: 'string', description: ( localize(
        5794,
        "Represents the item type of the focused element in the LOADED SCRIPTS view."
    )) }
));
const CONTEXT_FOCUSED_SESSION_IS_ATTACH = ( new RawContextKey(
    'focusedSessionIsAttach',
    false,
    { type: 'boolean', description: ( localize(5795, "True when the focused session is 'attach'.")) }
));
const CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG = ( new RawContextKey(
    'focusedSessionIsNoDebug',
    false,
    { type: 'boolean', description: ( localize(5796, "True when the focused session is run without debugging.")) }
));
const CONTEXT_STEP_BACK_SUPPORTED = ( new RawContextKey('stepBackSupported', false, { type: 'boolean', description: ( localize(5797, "True when the focused session supports 'stepBack' requests.")) }));
const CONTEXT_RESTART_FRAME_SUPPORTED = ( new RawContextKey(
    'restartFrameSupported',
    false,
    { type: 'boolean', description: ( localize(5798, "True when the focused session supports 'restartFrame' requests.")) }
));
const CONTEXT_STACK_FRAME_SUPPORTS_RESTART = ( new RawContextKey(
    'stackFrameSupportsRestart',
    false,
    { type: 'boolean', description: ( localize(5799, "True when the focused stack frame supports 'restartFrame'.")) }
));
const CONTEXT_JUMP_TO_CURSOR_SUPPORTED = ( new RawContextKey(
    'jumpToCursorSupported',
    false,
    { type: 'boolean', description: ( localize(5800, "True when the focused session supports 'jumpToCursor' request.")) }
));
const CONTEXT_STEP_INTO_TARGETS_SUPPORTED = ( new RawContextKey(
    'stepIntoTargetsSupported',
    false,
    { type: 'boolean', description: ( localize(5801, "True when the focused session supports 'stepIntoTargets' request.")) }
));
const CONTEXT_BREAKPOINTS_EXIST = ( new RawContextKey('breakpointsExist', false, { type: 'boolean', description: ( localize(5802, "True when at least one breakpoint exists.")) }));
const CONTEXT_DEBUGGERS_AVAILABLE = ( new RawContextKey(
    'debuggersAvailable',
    false,
    { type: 'boolean', description: ( localize(5803, "True when there is at least one debug extensions active.")) }
));
const CONTEXT_DEBUG_EXTENSION_AVAILABLE = ( new RawContextKey(
    'debugExtensionAvailable',
    true,
    { type: 'boolean', description: ( localize(
        5804,
        "True when there is at least one debug extension installed and enabled."
    )) }
));
const CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT = ( new RawContextKey(
    'debugProtocolVariableMenuContext',
    undefined,
    { type: 'string', description: ( localize(
        5805,
        "Represents the context the debug adapter sets on the focused variable in the VARIABLES view."
    )) }
));
const CONTEXT_SET_VARIABLE_SUPPORTED = ( new RawContextKey(
    'debugSetVariableSupported',
    false,
    { type: 'boolean', description: ( localize(5806, "True when the focused session supports 'setVariable' request.")) }
));
const CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED = ( new RawContextKey(
    'debugSetDataBreakpointAddressSupported',
    false,
    { type: 'boolean', description: ( localize(
        5807,
        "True when the focused session supports 'getBreakpointInfo' request on an address."
    )) }
));
const CONTEXT_SET_EXPRESSION_SUPPORTED = ( new RawContextKey(
    'debugSetExpressionSupported',
    false,
    { type: 'boolean', description: ( localize(5808, "True when the focused session supports 'setExpression' request.")) }
));
const CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED = ( new RawContextKey(
    'breakWhenValueChangesSupported',
    false,
    { type: 'boolean', description: ( localize(
        5809,
        "True when the focused session supports to break when value changes."
    )) }
));
const CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED = ( new RawContextKey(
    'breakWhenValueIsAccessedSupported',
    false,
    { type: 'boolean', description: ( localize(
        5810,
        "True when the focused breakpoint supports to break when value is accessed."
    )) }
));
const CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED = ( new RawContextKey(
    'breakWhenValueIsReadSupported',
    false,
    { type: 'boolean', description: ( localize(
        5811,
        "True when the focused breakpoint supports to break when value is read."
    )) }
));
const CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED = ( new RawContextKey(
    'terminateDebuggeeSupported',
    false,
    { type: 'boolean', description: ( localize(
        5812,
        "True when the focused session supports the terminate debuggee capability."
    )) }
));
const CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED = ( new RawContextKey(
    'suspendDebuggeeSupported',
    false,
    { type: 'boolean', description: ( localize(
        5813,
        "True when the focused session supports the suspend debuggee capability."
    )) }
));
const CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT = ( new RawContextKey(
    'variableEvaluateNamePresent',
    false,
    { type: 'boolean', description: ( localize(5814, "True when the focused variable has an 'evalauteName' field set.")) }
));
const CONTEXT_VARIABLE_IS_READONLY = ( new RawContextKey(
    'variableIsReadonly',
    false,
    { type: 'boolean', description: ( localize(5815, "True when the focused variable is read-only.")) }
));
const CONTEXT_VARIABLE_VALUE = ( new RawContextKey('variableValue', false, { type: 'string', description: ( localize(5816, "Value of the variable, present for debug visualization clauses.")) }));
const CONTEXT_VARIABLE_TYPE = ( new RawContextKey('variableType', false, { type: 'string', description: ( localize(5817, "Type of the variable, present for debug visualization clauses.")) }));
const CONTEXT_VARIABLE_INTERFACES = ( new RawContextKey('variableInterfaces', false, { type: 'array', description: ( localize(
    5818,
    "Any interfaces or contracts that the variable satisfies, present for debug visualization clauses."
)) }));
const CONTEXT_VARIABLE_NAME = ( new RawContextKey('variableName', false, { type: 'string', description: ( localize(5819, "Name of the variable, present for debug visualization clauses.")) }));
const CONTEXT_VARIABLE_LANGUAGE = ( new RawContextKey('variableLanguage', false, { type: 'string', description: ( localize(
    5820,
    "Language of the variable source, present for debug visualization clauses."
)) }));
const CONTEXT_VARIABLE_EXTENSIONID = ( new RawContextKey(
    'variableExtensionId',
    false,
    { type: 'string', description: ( localize(
        5821,
        "Extension ID of the variable source, present for debug visualization clauses."
    )) }
));
const CONTEXT_EXCEPTION_WIDGET_VISIBLE = ( new RawContextKey(
    'exceptionWidgetVisible',
    false,
    { type: 'boolean', description: ( localize(5822, "True when the exception widget is visible.")) }
));
const CONTEXT_MULTI_SESSION_REPL = ( new RawContextKey('multiSessionRepl', false, { type: 'boolean', description: ( localize(5823, "True when there is more than 1 debug console.")) }));
const CONTEXT_MULTI_SESSION_DEBUG = ( new RawContextKey('multiSessionDebug', false, { type: 'boolean', description: ( localize(5824, "True when there is more than 1 active debug session.")) }));
const CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED = ( new RawContextKey(
    'disassembleRequestSupported',
    false,
    { type: 'boolean', description: ( localize(5825, "True when the focused sessions supports disassemble request.")) }
));
const CONTEXT_DISASSEMBLY_VIEW_FOCUS = ( new RawContextKey(
    'disassemblyViewFocus',
    false,
    { type: 'boolean', description: ( localize(5826, "True when the Disassembly View is focused.")) }
));
const CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST = ( new RawContextKey(
    'languageSupportsDisassembleRequest',
    false,
    { type: 'boolean', description: ( localize(
        5827,
        "True when the language in the current editor supports disassemble request."
    )) }
));
const CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE = ( new RawContextKey(
    'focusedStackFrameHasInstructionReference',
    false,
    { type: 'boolean', description: ( localize(
        5828,
        "True when the focused stack frame has instruction pointer reference."
    )) }
));
const debuggerDisabledMessage = (debugType) => ( localize(
    5829,
    "Configured debug type '{0}' is installed but not supported in this environment.",
    debugType
));
const EDITOR_CONTRIBUTION_ID = 'editor.contrib.debug';
const BREAKPOINT_EDITOR_CONTRIBUTION_ID = 'editor.contrib.breakpoint';
const DEBUG_SCHEME = 'debug';
const INTERNAL_CONSOLE_OPTIONS_SCHEMA = {
    enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart'],
    default: 'openOnFirstSessionStart',
    description: ( localize(5830, "Controls when the internal Debug Console should open."))
};
var State;
(function (State) {
    State[State["Inactive"] = 0] = "Inactive";
    State[State["Initializing"] = 1] = "Initializing";
    State[State["Stopped"] = 2] = "Stopped";
    State[State["Running"] = 3] = "Running";
})(State || (State = {}));
function getStateLabel(state) {
    switch (state) {
        case State.Initializing: return 'initializing';
        case State.Stopped: return 'stopped';
        case State.Running: return 'running';
        default: return 'inactive';
    }
}
var MemoryRangeType;
(function (MemoryRangeType) {
    MemoryRangeType[MemoryRangeType["Valid"] = 0] = "Valid";
    MemoryRangeType[MemoryRangeType["Unreadable"] = 1] = "Unreadable";
    MemoryRangeType[MemoryRangeType["Error"] = 2] = "Error";
})(MemoryRangeType || (MemoryRangeType = {}));
const DEBUG_MEMORY_SCHEME = 'vscode-debug-memory';
function isFrameDeemphasized(frame) {
    const hint = frame.presentationHint ?? frame.source.presentationHint;
    return hint === 'deemphasize' || hint === 'subtle';
}
var DataBreakpointSetType;
(function (DataBreakpointSetType) {
    DataBreakpointSetType[DataBreakpointSetType["Variable"] = 0] = "Variable";
    DataBreakpointSetType[DataBreakpointSetType["Address"] = 1] = "Address";
})(DataBreakpointSetType || (DataBreakpointSetType = {}));
var DebugConfigurationProviderTriggerKind;
(function (DebugConfigurationProviderTriggerKind) {
    DebugConfigurationProviderTriggerKind[DebugConfigurationProviderTriggerKind["Initial"] = 1] = "Initial";
    DebugConfigurationProviderTriggerKind[DebugConfigurationProviderTriggerKind["Dynamic"] = 2] = "Dynamic";
})(DebugConfigurationProviderTriggerKind || (DebugConfigurationProviderTriggerKind = {}));
var DebuggerString;
(function (DebuggerString) {
    DebuggerString["UnverifiedBreakpoints"] = "unverifiedBreakpoints";
})(DebuggerString || (DebuggerString = {}));
var BreakpointWidgetContext;
(function (BreakpointWidgetContext) {
    BreakpointWidgetContext[BreakpointWidgetContext["CONDITION"] = 0] = "CONDITION";
    BreakpointWidgetContext[BreakpointWidgetContext["HIT_COUNT"] = 1] = "HIT_COUNT";
    BreakpointWidgetContext[BreakpointWidgetContext["LOG_MESSAGE"] = 2] = "LOG_MESSAGE";
    BreakpointWidgetContext[BreakpointWidgetContext["TRIGGER_POINT"] = 3] = "TRIGGER_POINT";
})(BreakpointWidgetContext || (BreakpointWidgetContext = {}));
var DebugVisualizationType;
(function (DebugVisualizationType) {
    DebugVisualizationType[DebugVisualizationType["Command"] = 0] = "Command";
    DebugVisualizationType[DebugVisualizationType["Tree"] = 1] = "Tree";
})(DebugVisualizationType || (DebugVisualizationType = {}));
var DebugTreeItemCollapsibleState;
(function (DebugTreeItemCollapsibleState) {
    DebugTreeItemCollapsibleState[DebugTreeItemCollapsibleState["None"] = 0] = "None";
    DebugTreeItemCollapsibleState[DebugTreeItemCollapsibleState["Collapsed"] = 1] = "Collapsed";
    DebugTreeItemCollapsibleState[DebugTreeItemCollapsibleState["Expanded"] = 2] = "Expanded";
})(DebugTreeItemCollapsibleState || (DebugTreeItemCollapsibleState = {}));
var IDebugVisualizationTreeItem;
(function (IDebugVisualizationTreeItem) {
    IDebugVisualizationTreeItem.deserialize = (v) => v;
    IDebugVisualizationTreeItem.serialize = (item) => item;
})(IDebugVisualizationTreeItem || (IDebugVisualizationTreeItem = {}));
var IDebugVisualization;
(function (IDebugVisualization) {
    IDebugVisualization.deserialize = (v) => ({
        id: v.id,
        name: v.name,
        iconPath: v.iconPath && { light: URI.revive(v.iconPath.light), dark: URI.revive(v.iconPath.dark) },
        iconClass: v.iconClass,
        visualization: v.visualization,
    });
    IDebugVisualization.serialize = (visualizer) => visualizer;
})(IDebugVisualization || (IDebugVisualization = {}));

export { BREAKPOINTS_VIEW_ID, BREAKPOINT_EDITOR_CONTRIBUTION_ID, BreakpointWidgetContext, CALLSTACK_VIEW_ID, CONTEXT_BREAKPOINTS_EXIST, CONTEXT_BREAKPOINTS_FOCUSED, CONTEXT_BREAKPOINT_HAS_MODES, CONTEXT_BREAKPOINT_INPUT_FOCUSED, CONTEXT_BREAKPOINT_ITEM_IS_DATA_BYTES, CONTEXT_BREAKPOINT_ITEM_TYPE, CONTEXT_BREAKPOINT_SUPPORTS_CONDITION, CONTEXT_BREAKPOINT_WIDGET_VISIBLE, CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED, CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED, CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED, CONTEXT_CALLSTACK_FOCUSED, CONTEXT_CALLSTACK_ITEM_STOPPED, CONTEXT_CALLSTACK_ITEM_TYPE, CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD, CONTEXT_CALLSTACK_SESSION_IS_ATTACH, CONTEXT_CAN_VIEW_MEMORY, CONTEXT_DEBUGGERS_AVAILABLE, CONTEXT_DEBUG_CONFIGURATION_TYPE, CONTEXT_DEBUG_EXTENSION_AVAILABLE, CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT, CONTEXT_DEBUG_STATE, CONTEXT_DEBUG_TYPE, CONTEXT_DEBUG_UX, CONTEXT_DEBUG_UX_KEY, CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED, CONTEXT_DISASSEMBLY_VIEW_FOCUS, CONTEXT_EXCEPTION_WIDGET_VISIBLE, CONTEXT_EXPRESSION_SELECTED, CONTEXT_FOCUSED_SESSION_IS_ATTACH, CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG, CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE, CONTEXT_HAS_DEBUGGED, CONTEXT_IN_BREAKPOINT_WIDGET, CONTEXT_IN_DEBUG_MODE, CONTEXT_IN_DEBUG_REPL, CONTEXT_JUMP_TO_CURSOR_SUPPORTED, CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST, CONTEXT_LOADED_SCRIPTS_ITEM_TYPE, CONTEXT_LOADED_SCRIPTS_SUPPORTED, CONTEXT_MULTI_SESSION_DEBUG, CONTEXT_MULTI_SESSION_REPL, CONTEXT_RESTART_FRAME_SUPPORTED, CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED, CONTEXT_SET_EXPRESSION_SUPPORTED, CONTEXT_SET_VARIABLE_SUPPORTED, CONTEXT_STACK_FRAME_SUPPORTS_RESTART, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_STEP_INTO_TARGETS_SUPPORTED, CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED, CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED, CONTEXT_VARIABLES_FOCUSED, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, CONTEXT_VARIABLE_EXTENSIONID, CONTEXT_VARIABLE_INTERFACES, CONTEXT_VARIABLE_IS_READONLY, CONTEXT_VARIABLE_LANGUAGE, CONTEXT_VARIABLE_NAME, CONTEXT_VARIABLE_TYPE, CONTEXT_VARIABLE_VALUE, CONTEXT_WATCH_EXPRESSIONS_EXIST, CONTEXT_WATCH_EXPRESSIONS_FOCUSED, CONTEXT_WATCH_ITEM_TYPE, DEBUG_MEMORY_SCHEME, DEBUG_PANEL_ID, DEBUG_SCHEME, DISASSEMBLY_VIEW_ID, DataBreakpointSetType, DebugConfigurationProviderTriggerKind, DebugTreeItemCollapsibleState, DebugVisualizationType, DebuggerString, EDITOR_CONTRIBUTION_ID, IDebugVisualization, IDebugVisualizationTreeItem, INTERNAL_CONSOLE_OPTIONS_SCHEMA, LOADED_SCRIPTS_VIEW_ID, MemoryRangeType, REPL_VIEW_ID, State, VARIABLES_VIEW_ID, VIEWLET_ID, WATCH_VIEW_ID, debuggerDisabledMessage, getStateLabel, isFrameDeemphasized };
