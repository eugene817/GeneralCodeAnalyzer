import { CancellationToken } from "../../../../base/common/cancellation.js";
import { Event } from "../../../../base/common/event.js";
import { IDisposable } from "../../../../base/common/lifecycle.js";
import { URI } from "../../../../base/common/uri.js";
import { Position } from "../../../../editor/common/core/position.js";
import { Location } from "../../../../editor/common/languages.js";
import { MutableObservableValue } from "@codingame/monaco-vscode-testing-service-override/vscode/vs/workbench/contrib/testing/common/observableValue";
import { TestExclusions } from "@codingame/monaco-vscode-testing-service-override/vscode/vs/workbench/contrib/testing/common/testExclusions";
import { ITestResult } from "@codingame/monaco-vscode-6845754f-e617-5ed9-8aaa-6ca3653a9532-common/vscode/vs/workbench/contrib/testing/common/testResult";
import { IMainThreadTestCollection, IMainThreadTestHostProxy, IMainThreadTestController, AmbiguousRunTestsRequest, ITestFollowups } from "@codingame/monaco-vscode-testing-service-override/vscode/vs/workbench/contrib/testing/common/testService";
import { TestsDiff, ResolvedTestRunRequest, TestMessageFollowupRequest, InternalTestItem } from "./testTypes.js";
export declare const ITestService: import("../../../../platform/instantiation/common/instantiation.js").ServiceIdentifier<ITestService>;
export interface ITestService {
    readonly _serviceBrand: undefined;
    readonly onDidCancelTestRun: Event<{
        runId: string | undefined;
        taskId: string | undefined;
    }>;
    readonly excluded: TestExclusions;
    readonly collection: IMainThreadTestCollection;
    readonly onWillProcessDiff: Event<TestsDiff>;
    readonly onDidProcessDiff: Event<TestsDiff>;
    readonly showInlineOutput: MutableObservableValue<boolean>;
    registerExtHost(controller: IMainThreadTestHostProxy): IDisposable;
    registerTestController(providerId: string, controller: IMainThreadTestController): IDisposable;
    getTestController(controllerId: string): IMainThreadTestController | undefined;
    refreshTests(controllerId?: string): Promise<void>;
    cancelRefreshTests(): void;
    startContinuousRun(req: ResolvedTestRunRequest, token: CancellationToken): Promise<void>;
    runTests(req: AmbiguousRunTestsRequest, token?: CancellationToken): Promise<ITestResult>;
    runResolvedTests(req: ResolvedTestRunRequest, token?: CancellationToken): Promise<ITestResult>;
    provideTestFollowups(req: TestMessageFollowupRequest, token: CancellationToken): Promise<ITestFollowups>;
    syncTests(): Promise<void>;
    cancelTestRun(runId?: string, taskId?: string): void;
    publishDiff(controllerId: string, diff: TestsDiff): void;
    getTestsRelatedToCode(uri: URI, position: Position, token?: CancellationToken): Promise<InternalTestItem[]>;
    getCodeRelatedToTest(test: InternalTestItem, token?: CancellationToken): Promise<Location[]>;
}
