import { Emitter, Event } from "../../../../base/common/event.js";
import { IDebugAdapter } from "./debug.js";
export declare abstract class AbstractDebugAdapter implements IDebugAdapter {
    private sequence;
    private pendingRequests;
    private requestCallback;
    private eventCallback;
    private messageCallback;
    private queue;
    protected readonly _onError: Emitter<Error>;
    protected readonly _onExit: Emitter<number | null>;
    constructor();
    abstract startSession(): Promise<void>;
    abstract stopSession(): Promise<void>;
    abstract sendMessage(message: DebugProtocol.ProtocolMessage): void;
    get onError(): Event<Error>;
    get onExit(): Event<number | null>;
    onMessage(callback: (message: DebugProtocol.ProtocolMessage) => void): void;
    onEvent(callback: (event: DebugProtocol.Event) => void): void;
    onRequest(callback: (request: DebugProtocol.Request) => void): void;
    sendResponse(response: DebugProtocol.Response): void;
    sendRequest(command: string, args: any, clb: (result: DebugProtocol.Response) => void, timeout?: number): number;
    acceptMessage(message: DebugProtocol.ProtocolMessage): void;
    protected needsTaskBoundaryBetween(messageA: DebugProtocol.ProtocolMessage, messageB: DebugProtocol.ProtocolMessage): boolean;
    private processQueue;
    private internalSend;
    protected cancelPendingRequests(): Promise<void>;
    getPendingRequestIds(): number[];
    dispose(): void;
}
