import { Event } from "../../../../base/common/event.js";
import { URI } from "../../../../base/common/uri.js";
import { RawContextKey } from "../../../../platform/contextkey/common/contextkey.js";
import { LogLevel } from "../../../../platform/log/common/log.js";
import { Range } from "../../../../editor/common/core/range.js";
export declare const OUTPUT_MIME = "text/x-code-output";
export declare const OUTPUT_MODE_ID = "Log";
export declare const LOG_MIME = "text/x-code-log-output";
export declare const LOG_MODE_ID = "log";
export declare const OUTPUT_VIEW_ID = "workbench.panel.output";
export declare const CONTEXT_IN_OUTPUT: RawContextKey<boolean>;
export declare const CONTEXT_ACTIVE_FILE_OUTPUT: RawContextKey<boolean>;
export declare const CONTEXT_ACTIVE_LOG_FILE_OUTPUT: RawContextKey<boolean>;
export declare const CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE: RawContextKey<boolean>;
export declare const CONTEXT_ACTIVE_OUTPUT_LEVEL: RawContextKey<string>;
export declare const CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT: RawContextKey<boolean>;
export declare const CONTEXT_OUTPUT_SCROLL_LOCK: RawContextKey<boolean>;
export declare const ACTIVE_OUTPUT_CHANNEL_CONTEXT: RawContextKey<string>;
export declare const SHOW_TRACE_FILTER_CONTEXT: RawContextKey<boolean>;
export declare const SHOW_DEBUG_FILTER_CONTEXT: RawContextKey<boolean>;
export declare const SHOW_INFO_FILTER_CONTEXT: RawContextKey<boolean>;
export declare const SHOW_WARNING_FILTER_CONTEXT: RawContextKey<boolean>;
export declare const SHOW_ERROR_FILTER_CONTEXT: RawContextKey<boolean>;
export declare const OUTPUT_FILTER_FOCUS_CONTEXT: RawContextKey<boolean>;
export declare const HIDE_CATEGORY_FILTER_CONTEXT: RawContextKey<string>;
export interface IOutputViewFilters {
    readonly onDidChange: Event<void>;
    text: string;
    trace: boolean;
    debug: boolean;
    info: boolean;
    warning: boolean;
    error: boolean;
    categories: string;
    toggleCategory(category: string): void;
    hasCategory(category: string): boolean;
}
export declare enum OutputChannelUpdateMode {
    Append = 1,
    Replace = 2,
    Clear = 3
}
export interface ILogEntry {
    readonly range: Range;
    readonly timestamp: number;
    readonly timestampRange: Range;
    readonly logLevel: LogLevel;
    readonly logLevelRange: Range;
    readonly category: string | undefined;
}
export interface IOutputChannel {
    readonly id: string;
    readonly label: string;
    readonly uri: URI;
    getLogEntries(): readonly ILogEntry[];
    append(output: string): void;
    clear(): void;
    replace(output: string): void;
    update(mode: OutputChannelUpdateMode.Append): void;
    update(mode: OutputChannelUpdateMode, till: number): void;
    dispose(): void;
}
export declare const Extensions: {
    OutputChannels: string;
};
export interface IOutputChannelDescriptor {
    id: string;
    label: string;
    log: boolean;
    languageId?: string;
    source?: IOutputContentSource | ReadonlyArray<IOutputContentSource>;
    extensionId?: string;
    user?: boolean;
}
export interface ISingleSourceOutputChannelDescriptor extends IOutputChannelDescriptor {
    source: IOutputContentSource;
}
export interface IMultiSourceOutputChannelDescriptor extends IOutputChannelDescriptor {
    source: ReadonlyArray<IOutputContentSource>;
}
export declare function isSingleSourceOutputChannelDescriptor(descriptor: IOutputChannelDescriptor): descriptor is ISingleSourceOutputChannelDescriptor;
export declare function isMultiSourceOutputChannelDescriptor(descriptor: IOutputChannelDescriptor): descriptor is IMultiSourceOutputChannelDescriptor;
export interface IOutputContentSource {
    readonly name?: string;
    readonly resource: URI;
}
export interface IOutputChannelRegistry {
    readonly onDidRegisterChannel: Event<string>;
    readonly onDidRemoveChannel: Event<IOutputChannelDescriptor>;
    readonly onDidUpdateChannelSources: Event<IMultiSourceOutputChannelDescriptor>;
    registerChannel(descriptor: IOutputChannelDescriptor): void;
    updateChannelSources(id: string, sources: IOutputContentSource[]): void;
    getChannels(): IOutputChannelDescriptor[];
    getChannel(id: string): IOutputChannelDescriptor | undefined;
    removeChannel(id: string): void;
}
