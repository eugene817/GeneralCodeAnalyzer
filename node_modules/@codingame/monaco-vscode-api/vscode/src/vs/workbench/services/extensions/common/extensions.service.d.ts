import { Event } from "../../../../base/common/event.js";
import { ExtensionIdentifier, IExtensionDescription, IExtensionContributions, IExtension } from "../../../../platform/extensions/common/extensions.js";
import { ExtensionHostKind } from "./extensionHostKind.js";
import { IWillActivateEvent, IResponsiveStateChangeEvent, WillStopExtensionHostsEvent, ActivationKind, ExtensionActivationReason, ExtensionPointContribution, IExtensionsStatus } from "./extensions.js";
import { IExtensionPoint } from "./extensionsRegistry.js";
export declare const IExtensionService: import("../../../../platform/instantiation/common/instantiation.js").ServiceIdentifier<IExtensionService>;
export interface IExtensionService {
    readonly _serviceBrand: undefined;
    onDidRegisterExtensions: Event<void>;
    onDidChangeExtensionsStatus: Event<ExtensionIdentifier[]>;
    onDidChangeExtensions: Event<{
        readonly added: readonly IExtensionDescription[];
        readonly removed: readonly IExtensionDescription[];
    }>;
    readonly extensions: readonly IExtensionDescription[];
    onWillActivateByEvent: Event<IWillActivateEvent>;
    onDidChangeResponsiveChange: Event<IResponsiveStateChangeEvent>;
    onWillStop: Event<WillStopExtensionHostsEvent>;
    activateByEvent(activationEvent: string, activationKind?: ActivationKind): Promise<void>;
    activateById(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void>;
    activationEventIsDone(activationEvent: string): boolean;
    whenInstalledExtensionsRegistered(): Promise<boolean>;
    getExtension(id: string): Promise<IExtensionDescription | undefined>;
    canAddExtension(extension: IExtensionDescription): boolean;
    canRemoveExtension(extension: IExtensionDescription): boolean;
    readExtensionPointContributions<T extends IExtensionContributions[keyof IExtensionContributions]>(extPoint: IExtensionPoint<T>): Promise<ExtensionPointContribution<T>[]>;
    getExtensionsStatus(): {
        [id: string]: IExtensionsStatus;
    };
    getInspectPorts(extensionHostKind: ExtensionHostKind, tryEnableInspector: boolean): Promise<{
        port: number;
        host: string;
    }[]>;
    stopExtensionHosts(reason: string, auto?: boolean): Promise<boolean>;
    startExtensionHosts(updates?: {
        readonly toAdd: readonly IExtension[];
        readonly toRemove: readonly string[];
    }): Promise<void>;
    setRemoteEnvironment(env: {
        [key: string]: string | null;
    }): Promise<void>;
}
