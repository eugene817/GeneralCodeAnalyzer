import { CancellationToken } from "../../../../base/common/cancellation.js";
import { Event } from "../../../../base/common/event.js";
import { URI } from "../../../../base/common/uri.js";
import { SaveSource } from "../../../common/editor.js";
import { IWorkingCopyHistoryEvent, IWorkingCopyHistoryEntryDescriptor, IWorkingCopyHistoryEntry } from "@codingame/monaco-vscode-working-copy-service-override/vscode/vs/workbench/services/workingCopy/common/workingCopyHistory";
export declare const IWorkingCopyHistoryService: import("../../../../platform/instantiation/common/instantiation.js").ServiceIdentifier<IWorkingCopyHistoryService>;
export interface IWorkingCopyHistoryService {
    readonly _serviceBrand: undefined;
    onDidAddEntry: Event<IWorkingCopyHistoryEvent>;
    onDidChangeEntry: Event<IWorkingCopyHistoryEvent>;
    onDidReplaceEntry: Event<IWorkingCopyHistoryEvent>;
    onDidRemoveEntry: Event<IWorkingCopyHistoryEvent>;
    onDidMoveEntries: Event<void>;
    onDidRemoveEntries: Event<void>;
    addEntry(descriptor: IWorkingCopyHistoryEntryDescriptor, token: CancellationToken): Promise<IWorkingCopyHistoryEntry | undefined>;
    updateEntry(entry: IWorkingCopyHistoryEntry, properties: {
        source: SaveSource;
    }, token: CancellationToken): Promise<void>;
    removeEntry(entry: IWorkingCopyHistoryEntry, token: CancellationToken): Promise<boolean>;
    moveEntries(source: URI, target: URI): Promise<URI[]>;
    getEntries(resource: URI, token: CancellationToken): Promise<readonly IWorkingCopyHistoryEntry[]>;
    getAll(token: CancellationToken): Promise<readonly URI[]>;
    removeAll(token: CancellationToken): Promise<void>;
}
