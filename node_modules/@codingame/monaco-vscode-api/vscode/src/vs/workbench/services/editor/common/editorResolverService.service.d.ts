import { Event } from "../../../../base/common/event.js";
import * as glob from "../../../../base/common/glob.js";
import { IDisposable } from "../../../../base/common/lifecycle.js";
import { URI } from "../../../../base/common/uri.js";
import { IUntypedEditorInput } from "../../../common/editor.js";
import { EditorAssociations, RegisteredEditorInfo, RegisteredEditorOptions, EditorInputFactoryObject, ResolvedEditor } from "./editorResolverService.js";
import { PreferredGroup } from "./editorService.js";
export declare const IEditorResolverService: import("../../../../platform/instantiation/common/instantiation.js").ServiceIdentifier<IEditorResolverService>;
export interface IEditorResolverService {
    readonly _serviceBrand: undefined;
    getAssociationsForResource(resource: URI): EditorAssociations;
    updateUserAssociations(globPattern: string, editorID: string): void;
    readonly onDidChangeEditorRegistrations: Event<void>;
    bufferChangeEvents(callback: Function): void;
    registerEditor(globPattern: string | glob.IRelativePattern, editorInfo: RegisteredEditorInfo, options: RegisteredEditorOptions, editorFactoryObject: EditorInputFactoryObject): IDisposable;
    resolveEditor(editor: IUntypedEditorInput, preferredGroup: PreferredGroup | undefined): Promise<ResolvedEditor>;
    getEditors(resource: URI): RegisteredEditorInfo[];
    getEditors(): RegisteredEditorInfo[];
    getAllUserAssociations(): EditorAssociations;
}
