import { IDiagnosticInfoOptions, IDiagnosticInfo } from "../../../../platform/diagnostics/common/diagnostics.js";
import { IRemoteAgentEnvironment } from "../../../../platform/remote/common/remoteAgentEnvironment.js";
import { TelemetryLevel, ITelemetryData } from "../../../../platform/telemetry/common/telemetry.js";
import { IRemoteAgentConnection, IExtensionHostExitInfo } from "@codingame/monaco-vscode-remote-agent-service-override/vscode/vs/workbench/services/remote/common/remoteAgentService";
export declare const IRemoteAgentService: import("../../../../platform/instantiation/common/instantiation.js").ServiceIdentifier<IRemoteAgentService>;
export interface IRemoteAgentService {
    readonly _serviceBrand: undefined;
    getConnection(): IRemoteAgentConnection | null;
    getEnvironment(): Promise<IRemoteAgentEnvironment | null>;
    getRawEnvironment(): Promise<IRemoteAgentEnvironment | null>;
    getExtensionHostExitInfo(reconnectionToken: string): Promise<IExtensionHostExitInfo | null>;
    getRoundTripTime(): Promise<number | undefined>;
    endConnection(): Promise<void>;
    getDiagnosticInfo(options: IDiagnosticInfoOptions): Promise<IDiagnosticInfo | undefined>;
    updateTelemetryLevel(telemetryLevel: TelemetryLevel): Promise<void>;
    logTelemetry(eventName: string, data?: ITelemetryData): Promise<void>;
    flushTelemetry(): Promise<void>;
}
