import { Event } from "../../../../base/common/event.js";
import { LogLevel } from "../../../../platform/log/common/log.js";
import { IOutputViewFilters, IOutputChannel, IOutputChannelDescriptor } from "./output.js";
export declare const IOutputService: import("../../../../platform/instantiation/common/instantiation.js").ServiceIdentifier<IOutputService>;
export interface IOutputService {
    readonly _serviceBrand: undefined;
    readonly filters: IOutputViewFilters;
    getChannel(id: string): IOutputChannel | undefined;
    getChannelDescriptor(id: string): IOutputChannelDescriptor | undefined;
    getChannelDescriptors(): IOutputChannelDescriptor[];
    getActiveChannel(): IOutputChannel | undefined;
    showChannel(id: string, preserveFocus?: boolean): Promise<void>;
    onActiveOutputChannel: Event<string>;
    registerCompoundLogChannel(channels: IOutputChannelDescriptor[]): string;
    saveOutputAs(...channels: IOutputChannelDescriptor[]): Promise<void>;
    canSetLogLevel(channel: IOutputChannelDescriptor): boolean;
    getLogLevel(channel: IOutputChannelDescriptor): LogLevel | undefined;
    setLogLevel(channel: IOutputChannelDescriptor, logLevel: LogLevel): void;
}
