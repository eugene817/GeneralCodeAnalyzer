import { IDimension } from "../../../../base/browser/dom.js";
import { Direction } from "@codingame/monaco-vscode-6980eeab-47bb-5a48-8e15-32caf0785565-common/vscode/vs/base/browser/ui/grid/grid";
import { IViewSize } from "@codingame/monaco-vscode-6980eeab-47bb-5a48-8e15-32caf0785565-common/vscode/vs/base/browser/ui/grid/gridview";
import { Event } from "../../../../base/common/event.js";
import { IDisposable } from "../../../../base/common/lifecycle.js";
import { ILayoutService } from "../../../../platform/layout/browser/layoutService.service.js";
import { Part } from "@codingame/monaco-vscode-d8236b3b-b91a-522d-89f4-94d70a546f6a-common/vscode/vs/workbench/browser/part";
import { PanelAlignment, Parts, SINGLE_WINDOW_PARTS, MULTI_WINDOW_PARTS, Position } from "@codingame/monaco-vscode-81f603ca-d6ea-5402-90dd-3014dffc63b4-common/vscode/vs/workbench/services/layout/browser/layoutService";
export declare const IWorkbenchLayoutService: import("../../../../platform/instantiation/common/instantiation.js").ServiceIdentifier<IWorkbenchLayoutService>;
export interface IWorkbenchLayoutService extends ILayoutService {
    readonly _serviceBrand: undefined;
    readonly onDidChangeZenMode: Event<boolean>;
    readonly onDidChangeWindowMaximized: Event<{
        readonly windowId: number;
        readonly maximized: boolean;
    }>;
    readonly onDidChangeMainEditorCenteredLayout: Event<boolean>;
    readonly onDidChangePanelPosition: Event<string>;
    readonly onDidChangePanelAlignment: Event<PanelAlignment>;
    readonly onDidChangePartVisibility: Event<void>;
    readonly onDidChangeNotificationsVisibility: Event<boolean>;
    readonly openedDefaultEditors: boolean;
    layout(): void;
    isRestored(): boolean;
    readonly whenRestored: Promise<void>;
    hasFocus(part: Parts): boolean;
    focusPart(part: SINGLE_WINDOW_PARTS): void;
    focusPart(part: MULTI_WINDOW_PARTS, targetWindow: Window): void;
    focusPart(part: Parts, targetWindow: Window): void;
    getContainer(targetWindow: Window): HTMLElement;
    getContainer(targetWindow: Window, part: Parts): HTMLElement | undefined;
    isVisible(part: SINGLE_WINDOW_PARTS): boolean;
    isVisible(part: MULTI_WINDOW_PARTS, targetWindow: Window): boolean;
    isVisible(part: Parts, targetWindow: Window): boolean;
    setPartHidden(hidden: boolean, part: Exclude<SINGLE_WINDOW_PARTS, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>): void;
    setPartHidden(hidden: boolean, part: Exclude<MULTI_WINDOW_PARTS, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>, targetWindow: Window): void;
    setPartHidden(hidden: boolean, part: Exclude<Parts, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>, targetWindow: Window): void;
    toggleMaximizedPanel(): void;
    hasMainWindowBorder(): boolean;
    getMainWindowBorderRadius(): string | undefined;
    isPanelMaximized(): boolean;
    getSideBarPosition(): Position;
    toggleMenuBar(): void;
    getPanelPosition(): Position;
    setPanelPosition(position: Position): void;
    getPanelAlignment(): PanelAlignment;
    setPanelAlignment(alignment: PanelAlignment): void;
    getMaximumEditorDimensions(container: HTMLElement): IDimension;
    toggleZenMode(): void;
    isMainEditorLayoutCentered(): boolean;
    centerMainEditorLayout(active: boolean): void;
    getSize(part: Parts): IViewSize;
    setSize(part: Parts, size: IViewSize): void;
    resizePart(part: Parts, sizeChangeWidth: number, sizeChangeHeight: number): void;
    registerPart(part: Part): IDisposable;
    isWindowMaximized(targetWindow: Window): boolean;
    updateWindowMaximizedState(targetWindow: Window, maximized: boolean): void;
    getVisibleNeighborPart(part: Parts, direction: Direction): Parts | undefined;
}
