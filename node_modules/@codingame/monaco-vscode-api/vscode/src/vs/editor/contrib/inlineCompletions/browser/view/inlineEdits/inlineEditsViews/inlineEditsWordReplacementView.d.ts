import { IMouseEvent } from "../../../../../../../base/browser/mouseEvent.js";
import { Disposable } from "../../../../../../../base/common/lifecycle.js";
import { ObservableCodeEditor } from "../../../../../../browser/observableCodeEditor.js";
import { Range } from "../../../../../../common/core/range.js";
import { SingleTextEdit } from "../../../../../../common/core/textEdit.js";
import { ILanguageService } from "../../../../../../common/languages/language.service.js";
import { IInlineEditsView, IInlineEditsViewHost } from "../inlineEditsViewInterface.js";
export declare class InlineEditsWordReplacementView extends Disposable implements IInlineEditsView {
    private readonly _editor;
    private readonly _edit;
    private readonly _innerEdits;
    private readonly _host;
    private readonly _languageService;
    static MAX_LENGTH: number;
    private readonly _onDidClick;
    readonly onDidClick: import("../../../../../../../base/common/event.js").Event<IMouseEvent>;
    private readonly _start;
    private readonly _end;
    private readonly _line;
    private readonly _hoverableElement;
    readonly isHovered: import("../../../../../../../base/common/observable.js").IObservable<boolean>;
    constructor(_editor: ObservableCodeEditor, _edit: SingleTextEdit, _innerEdits: SingleTextEdit[], _host: IInlineEditsViewHost, _languageService: ILanguageService);
    private readonly _renderTextEffect;
    private readonly _editLocations;
    private readonly _layout;
    private readonly _root;
}
export declare function rangesToBubbleRanges(ranges: Range[]): Range[];
export interface Replacement {
    originalRange: Range;
    modifiedRange: Range;
}
