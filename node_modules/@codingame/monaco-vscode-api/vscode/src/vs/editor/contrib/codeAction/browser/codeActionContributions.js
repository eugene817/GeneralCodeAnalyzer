
import { registerEditorContribution, EditorContributionInstantiation, registerEditorAction, registerEditorCommand } from '../../../browser/editorExtensions.js';
import { editorConfigurationBaseNode } from '../../../common/config/editorConfigurationSchema.js';
import { QuickFixAction, RefactorAction, SourceAction, OrganizeImportsAction, AutoFixAction, FixAllAction, CodeActionCommand } from './codeActionCommands.js';
import { CodeActionController } from './codeActionController.js';
import { LightBulbWidget } from './lightBulbWidget.js';
import { localize } from '../../../../nls.js';
import { Extensions, ConfigurationScope } from '../../../../platform/configuration/common/configurationRegistry.js';
import { Registry } from '../../../../platform/registry/common/platform.js';

registerEditorContribution(CodeActionController.ID, CodeActionController, EditorContributionInstantiation.Eventually);
registerEditorContribution(LightBulbWidget.ID, LightBulbWidget, EditorContributionInstantiation.Lazy);
registerEditorAction(QuickFixAction);
registerEditorAction(RefactorAction);
registerEditorAction(SourceAction);
registerEditorAction(OrganizeImportsAction);
registerEditorAction(AutoFixAction);
registerEditorAction(FixAllAction);
registerEditorCommand(( new CodeActionCommand()));
( Registry.as(Extensions.Configuration)).registerConfiguration({
    ...editorConfigurationBaseNode,
    properties: {
        'editor.codeActionWidget.showHeaders': {
            type: 'boolean',
            scope: ConfigurationScope.LANGUAGE_OVERRIDABLE,
            description: ( localize(893, "Enable/disable showing group headers in the Code Action menu.")),
            default: true,
        },
    }
});
( Registry.as(Extensions.Configuration)).registerConfiguration({
    ...editorConfigurationBaseNode,
    properties: {
        'editor.codeActionWidget.includeNearbyQuickFixes': {
            type: 'boolean',
            scope: ConfigurationScope.LANGUAGE_OVERRIDABLE,
            description: ( localize(
                894,
                "Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic."
            )),
            default: true,
        },
    }
});
( Registry.as(Extensions.Configuration)).registerConfiguration({
    ...editorConfigurationBaseNode,
    properties: {
        'editor.codeActions.triggerOnFocusChange': {
            type: 'boolean',
            scope: ConfigurationScope.LANGUAGE_OVERRIDABLE,
            markdownDescription: ( localize(
                895,
                'Enable triggering {0} when {1} is set to {2}. Code Actions must be set to {3} to be triggered for window and focus changes.',
                '`#editor.codeActionsOnSave#`',
                '`#files.autoSave#`',
                '`afterDelay`',
                '`always`'
            )),
            default: false,
        },
    }
});
