import { Event } from "../../../base/common/event.js";
import { IDisposable } from "../../../base/common/lifecycle.js";
import { URI } from "../../../base/common/uri.js";
import { ILanguageIdCodec } from "../languages.js";
import { ILanguageExtensionPoint, ILanguageNameIdPair, ILanguageIcon, ILanguageSelection } from "./language.js";
export declare const ILanguageService: import("../../../platform/instantiation/common/instantiation.js").ServiceIdentifier<ILanguageService>;
export interface ILanguageService {
    readonly _serviceBrand: undefined;
    readonly languageIdCodec: ILanguageIdCodec;
    onDidRequestBasicLanguageFeatures: Event<string>;
    onDidRequestRichLanguageFeatures: Event<string>;
    onDidChange: Event<void>;
    registerLanguage(def: ILanguageExtensionPoint): IDisposable;
    isRegisteredLanguageId(languageId: string): boolean;
    getRegisteredLanguageIds(): string[];
    getSortedRegisteredLanguageNames(): ILanguageNameIdPair[];
    getLanguageName(languageId: string): string | null;
    getMimeType(languageId: string): string | null;
    getIcon(languageId: string): ILanguageIcon | null;
    getExtensions(languageId: string): ReadonlyArray<string>;
    getFilenames(languageId: string): ReadonlyArray<string>;
    getConfigurationFiles(languageId: string): ReadonlyArray<URI>;
    getLanguageIdByLanguageName(languageName: string): string | null;
    getLanguageIdByMimeType(mimeType: string | null | undefined): string | null;
    guessLanguageIdByFilepathOrFirstLine(resource: URI, firstLine?: string): string | null;
    createById(languageId: string | null | undefined): ILanguageSelection;
    createByMimeType(mimeType: string | null | undefined): ILanguageSelection;
    createByFilepathOrFirstLine(resource: URI | null, firstLine?: string): ILanguageSelection;
    requestBasicLanguageFeatures(languageId: string): void;
    requestRichLanguageFeatures(languageId: string): void;
}
