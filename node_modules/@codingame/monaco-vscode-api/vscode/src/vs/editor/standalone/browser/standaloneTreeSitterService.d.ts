import type * as Parser from "@vscode/tree-sitter-wasm";
import { Event } from "../../../base/common/event.js";
import { ITextModel } from "../../common/model.js";
import { ITextModelTreeSitter, ITreeSitterParseResult, TreeUpdateEvent } from "@codingame/monaco-vscode-treesitter-service-override/vscode/vs/editor/common/services/treeSitterParserService";
import { ITreeSitterParserService } from "../../common/services/treeSitterParserService.service.js";
export declare class StandaloneTreeSitterParserService implements ITreeSitterParserService {
    getLanguage(languageId: string): Promise<Parser.Language | undefined>;
    getTreeSync(content: string, languageId: string): Parser.Tree | undefined;
    getTextModelTreeSitter(model: ITextModel, parseImmediately?: boolean): Promise<ITextModelTreeSitter | undefined>;
    getTree(content: string, languageId: string): Promise<Parser.Tree | undefined>;
    onDidUpdateTree: Event<TreeUpdateEvent>;
    readonly _serviceBrand: undefined;
    onDidAddLanguage: Event<{
        id: string;
        language: Parser.Language;
    }>;
    getOrInitLanguage(_languageId: string): Parser.Language | undefined;
    getParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined;
}
