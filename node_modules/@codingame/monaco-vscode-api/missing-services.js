
import { __decorate, __param } from './external/tslib/tslib.es6.js';
import { mainWindow } from './vscode/src/vs/base/browser/window.js';
import { Event, DynamicListEventMultiplexer } from './vscode/src/vs/base/common/event.js';
import { Disposable } from './vscode/src/vs/base/common/lifecycle.js';
import { ResourceSet } from './vscode/src/vs/base/common/map.js';
import { OS } from './vscode/src/vs/base/common/platform.js';
import { joinPath } from './vscode/src/vs/base/common/resources.js';
import { URI } from './vscode/src/vs/base/common/uri.js';
import { ICodeEditorService } from './vscode/src/vs/editor/browser/services/codeEditorService.service.js';
import { ITreeSitterTokenizationStoreService } from './vscode/src/vs/editor/common/model/treeSitterTokenStoreService.service.js';
import { IModelService } from './vscode/src/vs/editor/common/services/model.service.js';
import { ITreeViewsDnDService } from './vscode/src/vs/editor/common/services/treeViewsDndService.service.js';
import { StandaloneServices } from './vscode/src/vs/editor/standalone/browser/standaloneServices.js';
import { IAccessibleViewService } from './vscode/src/vs/platform/accessibility/browser/accessibleView.service.js';
import { IActionViewItemService } from './vscode/src/vs/platform/actions/browser/actionViewItemService.service.js';
import { IContextKeyService } from './vscode/src/vs/platform/contextkey/common/contextkey.service.js';
import { IExtensionHostDebugService } from './vscode/src/vs/platform/debug/common/extensionHostDebug.service.js';
import { NullDiagnosticsService } from './vscode/src/vs/platform/diagnostics/common/diagnostics.js';
import { IDiagnosticsService } from './vscode/src/vs/platform/diagnostics/common/diagnostics.service.js';
import { IFileDialogService } from './vscode/src/vs/platform/dialogs/common/dialogs.service.js';
import { IDownloadService } from './vscode/src/vs/platform/download/common/download.service.js';
import { IEncryptionService } from './vscode/src/vs/platform/encryption/common/encryptionService.service.js';
import { IEnvironmentService } from './vscode/src/vs/platform/environment/common/environment.service.js';
import { IExtensionTipsService, IGlobalExtensionEnablementService, IExtensionGalleryService, IAllowedExtensionsService } from './vscode/src/vs/platform/extensionManagement/common/extensionManagement.service.js';
import { IExtensionStorageService } from './vscode/src/vs/platform/extensionManagement/common/extensionStorage.service.js';
import { IExtensionsProfileScannerService } from './vscode/src/vs/platform/extensionManagement/common/extensionsProfileScannerService.service.js';
import { IExtensionsScannerService } from './vscode/src/vs/platform/extensionManagement/common/extensionsScannerService.service.js';
import { IExtensionRecommendationNotificationService } from './vscode/src/vs/platform/extensionRecommendations/common/extensionRecommendations.service.js';
import { IExtensionResourceLoaderService } from './vscode/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.service.js';
import { IBuiltinExtensionsScannerService } from './vscode/src/vs/platform/extensions/common/extensions.service.js';
import { IFileService } from './vscode/src/vs/platform/files/common/files.service.js';
import { registerSingleton, InstantiationType } from './vscode/src/vs/platform/instantiation/common/extensions.js';
import { IKeyboardLayoutService } from './vscode/src/vs/platform/keyboardLayout/common/keyboardLayout.service.js';
import { ILanguagePackService } from './vscode/src/vs/platform/languagePacks/common/languagePacks.service.js';
import { AbstractLoggerService, LogLevel, NullLogger } from './vscode/src/vs/platform/log/common/log.js';
import { ILoggerService } from './vscode/src/vs/platform/log/common/log.service.js';
import { NullPolicyService } from './vscode/src/vs/platform/policy/common/policy.js';
import { IPolicyService } from './vscode/src/vs/platform/policy/common/policy.service.js';
import { IProductService } from './vscode/src/vs/platform/product/common/productService.service.js';
import { IRemoteAuthorityResolverService } from './vscode/src/vs/platform/remote/common/remoteAuthorityResolver.service.js';
import { IRemoteExtensionsScannerService } from './vscode/src/vs/platform/remote/common/remoteExtensionsScanner.service.js';
import { IRemoteSocketFactoryService } from './vscode/src/vs/platform/remote/common/remoteSocketFactoryService.service.js';
import { IRequestService } from './vscode/src/vs/platform/request/common/request.service.js';
import { ISecretStorageService } from './vscode/src/vs/platform/secrets/common/secrets.service.js';
import { ISignService } from './vscode/src/vs/platform/sign/common/sign.service.js';
import { ICustomEndpointTelemetryService } from './vscode/src/vs/platform/telemetry/common/telemetry.service.js';
import { NullEndpointTelemetryService } from './vscode/src/vs/platform/telemetry/common/telemetryUtils.js';
import { TerminalLocation } from './vscode/src/vs/platform/terminal/common/terminal.js';
import { ITerminalLogService } from './vscode/src/vs/platform/terminal/common/terminal.service.js';
import { ITunnelService } from './vscode/src/vs/platform/tunnel/common/tunnel.service.js';
import { State } from './vscode/src/vs/platform/update/common/update.js';
import { IUpdateService } from './vscode/src/vs/platform/update/common/update.service.js';
import { IUriIdentityService } from './vscode/src/vs/platform/uriIdentity/common/uriIdentity.service.js';
import { UriIdentityService } from './vscode/src/vs/platform/uriIdentity/common/uriIdentityService.js';
import { IURLService } from './vscode/src/vs/platform/url/common/url.service.js';
import { toUserDataProfile } from './vscode/src/vs/platform/userDataProfile/common/userDataProfile.js';
import { IUserDataProfilesService } from './vscode/src/vs/platform/userDataProfile/common/userDataProfile.service.js';
import { IUserDataProfileStorageService } from './vscode/src/vs/platform/userDataProfile/common/userDataProfileStorageService.service.js';
import { IIgnoredExtensionsManagementService } from './vscode/src/vs/platform/userDataSync/common/ignoredExtensions.service.js';
import { SyncStatus } from './vscode/src/vs/platform/userDataSync/common/userDataSync.js';
import { IUserDataAutoSyncService, IUserDataSyncEnablementService, IUserDataSyncStoreManagementService, IUserDataSyncStoreService, IUserDataSyncLogService, IUserDataSyncService, IUserDataSyncResourceProviderService, IUserDataSyncLocalStoreService, IUserDataSyncUtilService } from './vscode/src/vs/platform/userDataSync/common/userDataSync.service.js';
import { IUserDataSyncAccountService } from './vscode/src/vs/platform/userDataSync/common/userDataSyncAccount.service.js';
import { IUserDataSyncMachinesService } from './vscode/src/vs/platform/userDataSync/common/userDataSyncMachines.service.js';
import { ICanonicalUriService } from './vscode/src/vs/platform/workspace/common/canonicalUri.service.js';
import { IEditSessionIdentityService } from './vscode/src/vs/platform/workspace/common/editSessions.service.js';
import { WorkspaceTrustUriResponse } from './vscode/src/vs/platform/workspace/common/workspaceTrust.js';
import { IWorkspaceTrustRequestService, IWorkspaceTrustEnablementService } from './vscode/src/vs/platform/workspace/common/workspaceTrust.service.js';
import { IWorkspacesService } from './vscode/src/vs/platform/workspaces/common/workspaces.service.js';
import { StatusBarUpdateKind, IExtensionStatusBarItemService } from './vscode/src/vs/workbench/api/browser/statusBarService.js';
import { IBreadcrumbsService } from './vscode/src/vs/workbench/browser/parts/editor/breadcrumbs.service.js';
import { DEFAULT_EDITOR_PART_OPTIONS } from './vscode/src/vs/workbench/browser/parts/editor/editor.js';
import { IViewDescriptorService } from './vscode/src/vs/workbench/common/views.service.js';
import { IQuickChatService, IChatWidgetService, IChatAccessibilityService, IChatCodeBlockContextProviderService } from './vscode/src/vs/workbench/contrib/chat/browser/chat.service.js';
import { IChatQuotasService } from './vscode/src/vs/workbench/contrib/chat/common/chatQuotasService.service.js';
import { IChatAgentService, IChatAgentNameService } from './vscode/src/vs/workbench/contrib/chat/common/chatAgents.service.js';
import { ICodeMapperService } from './vscode/src/vs/workbench/contrib/chat/common/chatCodeMapperService.service.js';
import { IChatEditingService } from './vscode/src/vs/workbench/contrib/chat/common/chatEditingService.service.js';
import { IChatService } from './vscode/src/vs/workbench/contrib/chat/common/chatService.service.js';
import { IChatSlashCommandService } from './vscode/src/vs/workbench/contrib/chat/common/chatSlashCommands.service.js';
import { IChatVariablesService } from './vscode/src/vs/workbench/contrib/chat/common/chatVariables.service.js';
import { IChatWidgetHistoryService } from './vscode/src/vs/workbench/contrib/chat/common/chatWidgetHistoryService.service.js';
import { ILanguageModelIgnoredFilesService } from './vscode/src/vs/workbench/contrib/chat/common/ignoredFiles.service.js';
import { ILanguageModelStatsService } from './vscode/src/vs/workbench/contrib/chat/common/languageModelStats.service.js';
import { ILanguageModelToolsService } from './vscode/src/vs/workbench/contrib/chat/common/languageModelToolsService.service.js';
import { ILanguageModelsService } from './vscode/src/vs/workbench/contrib/chat/common/languageModels.service.js';
import { ICommentService } from './vscode/src/vs/workbench/contrib/comments/browser/commentService.service.js';
import { ICustomEditorService } from './vscode/src/vs/workbench/contrib/customEditor/common/customEditor.service.js';
import { IDebugService } from './vscode/src/vs/workbench/contrib/debug/common/debug.service.js';
import { IDebugVisualizerService } from './vscode/src/vs/workbench/contrib/debug/common/debugVisualizers.service.js';
import { IEditSessionsLogService, IEditSessionsStorageService } from './vscode/src/vs/workbench/contrib/editSessions/common/editSessions.service.js';
import { IExtensionsWorkbenchService } from './vscode/src/vs/workbench/contrib/extensions/common/extensions.service.js';
import { IExternalUriOpenerService } from './vscode/src/vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService.service.js';
import { IExplorerService } from './vscode/src/vs/workbench/contrib/files/browser/files.service.js';
import { IInlineChatSessionService } from './vscode/src/vs/workbench/contrib/inlineChat/browser/inlineChatSessionService.service.js';
import { IInteractiveDocumentService } from './vscode/src/vs/workbench/contrib/interactive/browser/interactiveDocumentService.service.js';
import { IInteractiveHistoryService } from './vscode/src/vs/workbench/contrib/interactive/browser/interactiveHistoryService.service.js';
import { ITroubleshootIssueService } from './vscode/src/vs/workbench/contrib/issue/browser/issueTroubleshoot.service.js';
import { IWorkbenchIssueService, IIssueFormService } from './vscode/src/vs/workbench/contrib/issue/common/issue.service.js';
import { IDefaultLogLevelsService } from './vscode/src/vs/workbench/contrib/logs/common/defaultLogLevels.service.js';
import { IMultiDiffSourceResolverService } from './vscode/src/vs/workbench/contrib/multiDiffEditor/browser/multiDiffSourceResolverService.service.js';
import { INotebookOriginalCellModelFactory } from './vscode/src/vs/workbench/contrib/notebook/browser/contrib/chatEdit/notebookOriginalCellModelFactory.service.js';
import { INotebookOriginalModelReferenceFactory } from './vscode/src/vs/workbench/contrib/notebook/browser/contrib/chatEdit/notebookOriginalModelRefFactory.service.js';
import { INotebookModelSynchronizerFactory } from './vscode/src/vs/workbench/contrib/notebook/browser/contrib/chatEdit/notebookSynchronizer.service.js';
import { INotebookEditorService } from './vscode/src/vs/workbench/contrib/notebook/browser/services/notebookEditorService.service.js';
import { INotebookCellStatusBarService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookCellStatusBarService.service.js';
import { INotebookEditorModelResolverService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookEditorModelResolverService.service.js';
import { INotebookExecutionService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookExecutionService.service.js';
import { INotebookExecutionStateService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookExecutionStateService.service.js';
import { INotebookKernelService, INotebookKernelHistoryService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookKernelService.service.js';
import { INotebookKeymapService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookKeymapService.service.js';
import { INotebookLoggingService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookLoggingService.service.js';
import { INotebookRendererMessagingService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookRendererMessagingService.service.js';
import { INotebookService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookService.service.js';
import { INotebookSynchronizerService } from './vscode/src/vs/workbench/contrib/notebook/common/notebookSynchronizerService.service.js';
import { INotebookEditorWorkerService } from './vscode/src/vs/workbench/contrib/notebook/common/services/notebookWorkerService.service.js';
import { IPreferencesSearchService } from './vscode/src/vs/workbench/contrib/preferences/common/preferences.service.js';
import { IQuickDiffModelService } from './vscode/src/vs/workbench/contrib/scm/browser/quickDiffModel.service.js';
import { IQuickDiffService } from './vscode/src/vs/workbench/contrib/scm/common/quickDiff.service.js';
import { ISCMService, ISCMViewService } from './vscode/src/vs/workbench/contrib/scm/common/scm.service.js';
import { IReplaceService } from './vscode/src/vs/workbench/contrib/search/browser/replace.service.js';
import { ISearchViewModelWorkbenchService } from './vscode/src/vs/workbench/contrib/search/browser/searchTreeModel/searchViewModelWorkbenchService.service.js';
import { INotebookSearchService } from './vscode/src/vs/workbench/contrib/search/common/notebookSearch.service.js';
import { ISearchHistoryService } from './vscode/src/vs/workbench/contrib/search/common/searchHistoryService.service.js';
import { IShareService } from './vscode/src/vs/workbench/contrib/share/common/share.service.js';
import { ISnippetsService } from './vscode/src/vs/workbench/contrib/snippets/browser/snippets.service.js';
import { ISpeechService } from './vscode/src/vs/workbench/contrib/speech/common/speechService.service.js';
import { NoOpWorkspaceTagsService } from './vscode/src/vs/workbench/contrib/tags/browser/workspaceTagsService.js';
import { IWorkspaceTagsService } from './vscode/src/vs/workbench/contrib/tags/common/workspaceTags.service.js';
import { ITaskService } from './vscode/src/vs/workbench/contrib/tasks/common/taskService.service.js';
import { TerminalConnectionState } from './vscode/src/vs/workbench/contrib/terminal/browser/terminal.js';
import { ITerminalService, ITerminalConfigurationService, ITerminalEditorService, ITerminalGroupService, ITerminalInstanceService } from './vscode/src/vs/workbench/contrib/terminal/browser/terminal.service.js';
import { IEnvironmentVariableService } from './vscode/src/vs/workbench/contrib/terminal/common/environmentVariable.service.js';
import { ITerminalProfileService, ITerminalProfileResolverService } from './vscode/src/vs/workbench/contrib/terminal/common/terminal.service.js';
import { ITerminalContributionService } from './vscode/src/vs/workbench/contrib/terminal/common/terminalExtensionPoints.service.js';
import { ITerminalLinkProviderService } from './vscode/src/vs/workbench/contrib/terminalContrib/links/browser/links.service.js';
import { ITerminalQuickFixService } from './vscode/src/vs/workbench/contrib/terminalContrib/quickFix/browser/quickFix.service.js';
import { ITerminalCompletionService } from './vscode/src/vs/workbench/contrib/terminalContrib/suggest/browser/terminalCompletionService.service.js';
import { ITestCoverageService } from './vscode/src/vs/workbench/contrib/testing/common/testCoverageService.service.js';
import { ITestExplorerFilterState } from './vscode/src/vs/workbench/contrib/testing/common/testExplorerFilterState.service.js';
import { ITestProfileService } from './vscode/src/vs/workbench/contrib/testing/common/testProfileService.service.js';
import { ITestResultService } from './vscode/src/vs/workbench/contrib/testing/common/testResultService.service.js';
import { ITestResultStorage } from './vscode/src/vs/workbench/contrib/testing/common/testResultStorage.service.js';
import { ITestService } from './vscode/src/vs/workbench/contrib/testing/common/testService.service.js';
import { ITestingContinuousRunService } from './vscode/src/vs/workbench/contrib/testing/common/testingContinuousRunService.service.js';
import { ITestingDecorationsService } from './vscode/src/vs/workbench/contrib/testing/common/testingDecorations.service.js';
import { ITestingPeekOpener } from './vscode/src/vs/workbench/contrib/testing/common/testingPeekOpener.service.js';
import { ITimelineService } from './vscode/src/vs/workbench/contrib/timeline/common/timeline.service.js';
import { ITrustedDomainService } from './vscode/src/vs/workbench/contrib/url/browser/trustedDomainService.service.js';
import { IWebviewService } from './vscode/src/vs/workbench/contrib/webview/browser/webview.service.js';
import { IWebviewWorkbenchService } from './vscode/src/vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService.service.js';
import { IWebviewViewService } from './vscode/src/vs/workbench/contrib/webviewView/browser/webviewViewService.service.js';
import { IWalkthroughsService } from './vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.service.js';
import { IAccessibleViewInformationService } from './vscode/src/vs/workbench/services/accessibility/common/accessibleViewInformationService.service.js';
import { IActivityService } from './vscode/src/vs/workbench/services/activity/common/activity.service.js';
import { IAiEmbeddingVectorService } from './vscode/src/vs/workbench/services/aiEmbeddingVector/common/aiEmbeddingVectorService.service.js';
import { IAiRelatedInformationService } from './vscode/src/vs/workbench/services/aiRelatedInformation/common/aiRelatedInformation.service.js';
import { IWorkbenchAssignmentService } from './vscode/src/vs/workbench/services/assignment/common/assignmentService.service.js';
import { IAuthenticationAccessService } from './vscode/src/vs/workbench/services/authentication/browser/authenticationAccessService.service.js';
import { IAuthenticationUsageService } from './vscode/src/vs/workbench/services/authentication/browser/authenticationUsageService.service.js';
import { IAuthenticationService, IAuthenticationExtensionsService } from './vscode/src/vs/workbench/services/authentication/common/authentication.service.js';
import { IAuxiliaryWindowService } from './vscode/src/vs/workbench/services/auxiliaryWindow/browser/auxiliaryWindowService.service.js';
import { IBannerService } from './vscode/src/vs/workbench/services/banner/browser/bannerService.service.js';
import { IJSONEditingService } from './vscode/src/vs/workbench/services/configuration/common/jsonEditing.service.js';
import { IConfigurationResolverService } from './vscode/src/vs/workbench/services/configurationResolver/common/configurationResolver.service.js';
import { IDecorationsService } from './vscode/src/vs/workbench/services/decorations/common/decorations.service.js';
import { ICustomEditorLabelService } from './vscode/src/vs/workbench/services/editor/common/customEditorLabelService.service.js';
import { GroupOrientation } from './vscode/src/vs/workbench/services/editor/common/editorGroupsService.js';
import { IEditorGroupsService } from './vscode/src/vs/workbench/services/editor/common/editorGroupsService.service.js';
import { IEditorPaneService } from './vscode/src/vs/workbench/services/editor/common/editorPaneService.service.js';
import { IEditorResolverService } from './vscode/src/vs/workbench/services/editor/common/editorResolverService.service.js';
import { IEditorService } from './vscode/src/vs/workbench/services/editor/common/editorService.service.js';
import { IExtensionBisectService } from './vscode/src/vs/workbench/services/extensionManagement/browser/extensionBisect.service.js';
import { IExtensionFeaturesManagementService } from './vscode/src/vs/workbench/services/extensionManagement/common/extensionFeatures.service.js';
import { EnablementState } from './vscode/src/vs/workbench/services/extensionManagement/common/extensionManagement.js';
import { IExtensionManagementServerService, IWebExtensionsScannerService, IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from './vscode/src/vs/workbench/services/extensionManagement/common/extensionManagement.service.js';
import { IExtensionRecommendationsService, IExtensionIgnoredRecommendationsService } from './vscode/src/vs/workbench/services/extensionRecommendations/common/extensionRecommendations.service.js';
import { IWorkspaceExtensionsConfigService } from './vscode/src/vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig.service.js';
import { IExtensionUrlHandler } from './vscode/src/vs/workbench/services/extensions/browser/extensionUrlHandler.service.js';
import { IExtensionManifestPropertiesService } from './vscode/src/vs/workbench/services/extensions/common/extensionManifestPropertiesService.service.js';
import { NullExtensionService } from './vscode/src/vs/workbench/services/extensions/common/extensions.js';
import { IExtensionService } from './vscode/src/vs/workbench/services/extensions/common/extensions.service.js';
import { IElevatedFileService } from './vscode/src/vs/workbench/services/files/common/elevatedFileService.service.js';
import { IFilesConfigurationService } from './vscode/src/vs/workbench/services/filesConfiguration/common/filesConfigurationService.service.js';
import { IHistoryService } from './vscode/src/vs/workbench/services/history/common/history.service.js';
import { IHostService } from './vscode/src/vs/workbench/services/host/browser/host.service.js';
import { IIntegrityService } from './vscode/src/vs/workbench/services/integrity/common/integrity.service.js';
import { FallbackKeyboardMapper } from './vscode/src/vs/workbench/services/keybinding/common/fallbackKeyboardMapper.js';
import { IKeybindingEditingService } from './vscode/src/vs/workbench/services/keybinding/common/keybindingEditing.service.js';
import { ILanguageDetectionService } from './vscode/src/vs/workbench/services/languageDetection/common/languageDetectionWorkerService.service.js';
import { ILanguageStatusService } from './vscode/src/vs/workbench/services/languageStatus/common/languageStatusService.service.js';
import { ILifecycleService } from './vscode/src/vs/workbench/services/lifecycle/common/lifecycle.service.js';
import { AbstractLifecycleService } from './vscode/src/vs/workbench/services/lifecycle/common/lifecycleService.js';
import { ILocaleService, IActiveLanguagePackService } from './vscode/src/vs/workbench/services/localization/common/locale.service.js';
import { INotebookDocumentService } from './vscode/src/vs/workbench/services/notebook/common/notebookDocumentService.service.js';
import { IOutlineService } from './vscode/src/vs/workbench/services/outline/browser/outline.service.js';
import { IOutputService } from './vscode/src/vs/workbench/services/output/common/output.service.js';
import { IPaneCompositePartService } from './vscode/src/vs/workbench/services/panecomposite/browser/panecomposite.service.js';
import { IPathService } from './vscode/src/vs/workbench/services/path/common/pathService.service.js';
import { IPreferencesService } from './vscode/src/vs/workbench/services/preferences/common/preferences.service.js';
import { IRemoteAgentService } from './vscode/src/vs/workbench/services/remote/common/remoteAgentService.service.js';
import { PortsEnablement } from './vscode/src/vs/workbench/services/remote/common/remoteExplorerService.js';
import { IRemoteExplorerService } from './vscode/src/vs/workbench/services/remote/common/remoteExplorerService.service.js';
import { ISearchService } from './vscode/src/vs/workbench/services/search/common/search.service.js';
import { IStatusbarService } from './vscode/src/vs/workbench/services/statusbar/browser/statusbar.service.js';
import { IEmbedderTerminalService } from './vscode/src/vs/workbench/services/terminal/common/embedderTerminalService.service.js';
import { ITextMateTokenizationService } from './vscode/src/vs/workbench/services/textMate/browser/textMateTokenizationFeature.service.js';
import { ITextEditorService } from './vscode/src/vs/workbench/services/textfile/common/textEditorService.service.js';
import { ITextFileService } from './vscode/src/vs/workbench/services/textfile/common/textfiles.service.js';
import { IHostColorSchemeService } from './vscode/src/vs/workbench/services/themes/common/hostColorSchemeService.service.js';
import { ITimerService } from './vscode/src/vs/workbench/services/timer/browser/timerService.service.js';
import { ITitleService } from './vscode/src/vs/workbench/services/title/browser/titleService.service.js';
import { ITreeSitterTokenizationFeature } from './vscode/src/vs/workbench/services/treeSitter/browser/treeSitterTokenizationFeature.service.js';
import { IUntitledTextEditorService } from './vscode/src/vs/workbench/services/untitled/common/untitledTextEditorService.service.js';
import { IUserActivityService } from './vscode/src/vs/workbench/services/userActivity/common/userActivityService.service.js';
import { IUserDataInitializationService } from './vscode/src/vs/workbench/services/userData/browser/userDataInit.service.js';
import { IRemoteUserDataProfilesService } from './vscode/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.service.js';
import { IUserDataProfileService, IUserDataProfileImportExportService, IUserDataProfileManagementService } from './vscode/src/vs/workbench/services/userDataProfile/common/userDataProfile.service.js';
import { UserDataProfileService } from './vscode/src/vs/workbench/services/userDataProfile/common/userDataProfileService.js';
import { AccountStatus } from './vscode/src/vs/workbench/services/userDataSync/common/userDataSync.js';
import { IUserDataSyncWorkbenchService } from './vscode/src/vs/workbench/services/userDataSync/common/userDataSync.service.js';
import { IViewsService } from './vscode/src/vs/workbench/services/views/common/viewsService.service.js';
import { IWorkingCopyBackupService } from './vscode/src/vs/workbench/services/workingCopy/common/workingCopyBackup.service.js';
import { IWorkingCopyEditorService } from './vscode/src/vs/workbench/services/workingCopy/common/workingCopyEditorService.service.js';
import { IWorkingCopyFileService } from './vscode/src/vs/workbench/services/workingCopy/common/workingCopyFileService.service.js';
import { IWorkingCopyHistoryService } from './vscode/src/vs/workbench/services/workingCopy/common/workingCopyHistory.service.js';
import { IWorkingCopyService } from './vscode/src/vs/workbench/services/workingCopy/common/workingCopyService.service.js';
import { IWorkspaceEditingService } from './vscode/src/vs/workbench/services/workspaces/common/workspaceEditing.service.js';
import { IWorkspaceIdentityService } from './vscode/src/vs/workbench/services/workspaces/common/workspaceIdentityService.service.js';
import { IChatMarkdownAnchorService } from './vscode/src/vs/workbench/contrib/chat/browser/chatContentParts/chatMarkdownAnchorService.service.js';
import { getBuiltInExtensionTranslationsUris, getExtensionIdProvidingCurrentLocale } from './l10n.js';
import { unsupported } from './tools.js';
import { ITreeSitterImporter } from './vscode/src/vs/editor/common/services/treeSitterParserService.service.js';
import { IChatEntitlementsService } from './vscode/src/vs/workbench/contrib/chat/common/chatEntitlementsService.service.js';
import { IPromptsService } from './vscode/src/vs/workbench/contrib/chat/common/promptSyntax/service/types.service.js';
import { ISuggestMemoryService } from './vscode/src/vs/editor/contrib/suggest/browser/suggestMemory.service.js';
import { LanguageConfigurationService } from './vscode/src/vs/editor/common/languages/languageConfigurationRegistry.js';
import { ILanguageConfigurationService } from './vscode/src/vs/editor/common/languages/languageConfigurationRegistry.service.js';
import { ISemanticTokensStylingService } from './vscode/src/vs/editor/common/services/semanticTokensStyling.service.js';
import { ILanguageFeatureDebounceService } from './vscode/src/vs/editor/common/services/languageFeatureDebounce.service.js';
import { ILanguageFeaturesService } from './vscode/src/vs/editor/common/services/languageFeatures.service.js';
import { IDiffProviderFactoryService } from './vscode/src/vs/editor/browser/widget/diffEditor/diffProviderFactoryService.service.js';
import { IOutlineModelService } from './vscode/src/vs/editor/contrib/documentSymbols/browser/outlineModel.service.js';
import { IMarkerNavigationService } from './vscode/src/vs/editor/contrib/gotoError/browser/markerNavigationService.service.js';
import { ICodeLensCache } from './vscode/src/vs/editor/contrib/codelens/browser/codeLensCache.service.js';
import { IInlayHintsCache } from './vscode/src/vs/editor/contrib/inlayHints/browser/inlayHintsController.service.js';
import { ISymbolNavigationService } from './vscode/src/vs/editor/contrib/gotoSymbol/browser/symbolNavigation.service.js';
import { IEditorCancellationTokens } from './vscode/src/vs/editor/contrib/editorState/browser/keybindingCancellation.service.js';
import { IPeekViewService } from './vscode/src/vs/editor/contrib/peekView/browser/peekView.service.js';
import { SemanticTokensStylingService } from './vscode/src/vs/editor/common/services/semanticTokensStylingService.js';
import { LanguageFeatureDebounceService } from './vscode/src/vs/editor/common/services/languageFeatureDebounce.js';
import { CodeEditorService } from './vscode/src/vs/workbench/services/editor/browser/codeEditorService.js';
import { LanguageFeaturesService } from './vscode/src/vs/editor/common/services/languageFeaturesService.js';
import { WorkerBasedDiffProviderFactoryService } from './vscode/src/vs/editor/browser/widget/diffEditor/diffProviderFactoryService.js';
import { OutlineModelService } from './vscode/src/vs/editor/contrib/documentSymbols/browser/outlineModel.js';
import { SuggestMemoryService } from './vscode/src/vs/editor/contrib/suggest/browser/suggestMemory.js';
import { CodeLensCache } from './vscode/src/vs/editor/contrib/codelens/browser/codeLensCache.js';
import { PeekViewService } from './vscode/src/vs/editor/contrib/peekView/browser/peekView.js';
import { MarkerNavigationService } from './vscode/src/vs/editor/contrib/gotoError/browser/markerNavigationService.js';
import { InlayHintsCache } from './vscode/src/vs/editor/contrib/inlayHints/browser/inlayHintsController.js';
import { IUndoRedoService } from './vscode/src/vs/platform/undoRedo/common/undoRedo.service.js';
import { UndoRedoService } from './vscode/src/vs/platform/undoRedo/common/undoRedoService.js';
import { ActionWidgetService } from './vscode/src/vs/platform/actionWidget/browser/actionWidget.js';
import { IActionWidgetService } from './vscode/src/vs/platform/actionWidget/browser/actionWidget.service.js';
import { EditorCancellationTokens } from './vscode/src/vs/editor/contrib/editorState/browser/keybindingCancellation.js';
import { SymbolNavigationService } from './vscode/src/vs/editor/contrib/gotoSymbol/browser/symbolNavigation.js';
import { IHoverService } from './vscode/src/vs/platform/hover/browser/hover.service.js';
import { HoverService } from './vscode/src/vs/editor/browser/services/hoverService/hoverService.js';

function Unsupported(target, propertyKey, descriptor) {
    function unsupported() {
        throw new Error(`Unsupported: ${target.constructor.name}.${propertyKey} is not supported. You are using a feature without registering the corresponding service override.`);
    }
    if (descriptor.value != null) {
        descriptor.value = unsupported;
    }
    else if (descriptor.get != null) {
        descriptor.get = unsupported;
    }
}
registerSingleton(ILanguageConfigurationService, LanguageConfigurationService, InstantiationType.Delayed);
registerSingleton(ISemanticTokensStylingService, SemanticTokensStylingService, InstantiationType.Delayed);
registerSingleton(ILanguageFeatureDebounceService, LanguageFeatureDebounceService, InstantiationType.Delayed);
registerSingleton(ILanguageFeaturesService, LanguageFeaturesService, InstantiationType.Delayed);
registerSingleton(ICodeEditorService, CodeEditorService, InstantiationType.Delayed);
registerSingleton(IDiffProviderFactoryService, WorkerBasedDiffProviderFactoryService, InstantiationType.Delayed);
registerSingleton(ISymbolNavigationService, SymbolNavigationService, InstantiationType.Delayed);
registerSingleton(IEditorCancellationTokens, EditorCancellationTokens, InstantiationType.Delayed);
registerSingleton(IPeekViewService, PeekViewService, InstantiationType.Delayed);
registerSingleton(IOutlineModelService, OutlineModelService, InstantiationType.Delayed);
registerSingleton(IMarkerNavigationService, MarkerNavigationService, InstantiationType.Delayed);
registerSingleton(ISuggestMemoryService, SuggestMemoryService, InstantiationType.Delayed);
registerSingleton(ICodeLensCache, CodeLensCache, InstantiationType.Delayed);
registerSingleton(IHoverService, HoverService, InstantiationType.Delayed);
registerSingleton(IInlayHintsCache, InlayHintsCache, InstantiationType.Delayed);
registerSingleton(IActionWidgetService, ActionWidgetService, InstantiationType.Delayed);
registerSingleton(IUndoRedoService, UndoRedoService, InstantiationType.Delayed);
registerSingleton(ILoggerService, class NullLoggerService extends AbstractLoggerService {
    constructor() {
        super(LogLevel.Info, URI.file('logs.log'));
    }
    doCreateLogger() {
        return new NullLogger();
    }
}, InstantiationType.Eager);
class EditorService {
    constructor() {
        this._serviceBrand = undefined;
        this.getVisibleTextEditorControls = () => [];
        this.onWillOpenEditor = Event.None;
        this.onDidActiveEditorChange = Event.None;
        this.onDidVisibleEditorsChange = Event.None;
        this.onDidEditorsChange = Event.None;
        this.onDidCloseEditor = Event.None;
        this.activeEditorPane = undefined;
        this.activeEditor = undefined;
        this.activeTextEditorLanguageId = undefined;
        this.visibleEditorPanes = [];
        this.visibleEditors = [];
        this.visibleTextEditorControls = [];
        this.editors = [];
        this.count = 0;
        this.getEditors = () => [];
        this.replaceEditors = async () => { };
        this.isOpened = () => false;
        this.isVisible = () => false;
        this.closeEditor = async () => { };
        this.closeEditors = async () => { };
        this.findEditors = () => [];
        this.save = async () => ({ success: false, editors: [] });
        this.saveAll = async () => ({ success: false, editors: [] });
        this.revert = async () => false;
        this.revertAll = async () => false;
    }
    get activeTextEditorControl() {
        return StandaloneServices.get(ICodeEditorService).getFocusedCodeEditor() ?? undefined;
    }
    openEditor() {
        unsupported();
    }
    openEditors() {
        unsupported();
    }
    createScoped() {
        return this;
    }
}
__decorate([
    Unsupported
], EditorService.prototype, "openEditor", null);
__decorate([
    Unsupported
], EditorService.prototype, "openEditors", null);
registerSingleton(IEditorService, EditorService, InstantiationType.Eager);
class PaneCompositePartService {
    constructor() {
        this._serviceBrand = undefined;
        this.getPaneCompositeIds = () => [];
        this.onDidPaneCompositeOpen = Event.None;
        this.onDidPaneCompositeClose = Event.None;
        this.openPaneComposite = async () => undefined;
        this.getActivePaneComposite = () => undefined;
        this.getPaneComposite = () => undefined;
        this.getPaneComposites = () => [];
        this.getPinnedPaneCompositeIds = () => [];
        this.getVisiblePaneCompositeIds = () => [];
        this.getProgressIndicator = () => undefined;
        this.hideActivePaneComposite = () => { };
        this.showActivity = () => Disposable.None;
    }
    getLastActivePaneCompositeId() {
        unsupported();
    }
}
__decorate([
    Unsupported
], PaneCompositePartService.prototype, "getLastActivePaneCompositeId", null);
registerSingleton(IPaneCompositePartService, PaneCompositePartService, InstantiationType.Eager);
registerSingleton(IUriIdentityService, UriIdentityService, InstantiationType.Delayed);
class TextFileService {
    getEncoding() {
        unsupported();
    }
    get files() {
        return unsupported();
    }
    get untitled() {
        return unsupported();
    }
    get encoding() {
        return unsupported();
    }
    isDirty() {
        unsupported();
    }
    save() {
        unsupported();
    }
    saveAs() {
        unsupported();
    }
    revert() {
        unsupported();
    }
    read() {
        unsupported();
    }
    readStream() {
        unsupported();
    }
    write() {
        unsupported();
    }
    create() {
        unsupported();
    }
    getEncodedReadable() {
        unsupported();
    }
    getDecodedStream() {
        unsupported();
    }
    dispose() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TextFileService.prototype, "getEncoding", null);
__decorate([
    Unsupported
], TextFileService.prototype, "files", null);
__decorate([
    Unsupported
], TextFileService.prototype, "untitled", null);
__decorate([
    Unsupported
], TextFileService.prototype, "encoding", null);
__decorate([
    Unsupported
], TextFileService.prototype, "isDirty", null);
__decorate([
    Unsupported
], TextFileService.prototype, "save", null);
__decorate([
    Unsupported
], TextFileService.prototype, "saveAs", null);
__decorate([
    Unsupported
], TextFileService.prototype, "revert", null);
__decorate([
    Unsupported
], TextFileService.prototype, "read", null);
__decorate([
    Unsupported
], TextFileService.prototype, "readStream", null);
__decorate([
    Unsupported
], TextFileService.prototype, "write", null);
__decorate([
    Unsupported
], TextFileService.prototype, "create", null);
__decorate([
    Unsupported
], TextFileService.prototype, "getEncodedReadable", null);
__decorate([
    Unsupported
], TextFileService.prototype, "getDecodedStream", null);
__decorate([
    Unsupported
], TextFileService.prototype, "dispose", null);
registerSingleton(ITextFileService, TextFileService, InstantiationType.Eager);
class FileService {
    constructor() {
        this._serviceBrand = undefined;
        this.onDidChangeFileSystemProviderRegistrations = Event.None;
        this.onDidChangeFileSystemProviderCapabilities = Event.None;
        this.onWillActivateFileSystemProvider = Event.None;
        this.getProvider = function () {
            return undefined;
        };
        this.activateProvider = async () => { };
        this.canHandleResource = async () => false;
        this.hasProvider = () => false;
        this.hasCapability = () => false;
        this.listCapabilities = () => [];
        this.onDidFilesChange = Event.None;
        this.onDidRunOperation = Event.None;
        this.exists = async () => false;
        this.onDidWatchError = Event.None;
    }
    registerProvider() {
        unsupported();
    }
    resolve() {
        unsupported();
    }
    resolveAll() {
        unsupported();
    }
    stat() {
        unsupported();
    }
    readFile() {
        unsupported();
    }
    readFileStream() {
        unsupported();
    }
    writeFile() {
        unsupported();
    }
    move() {
        unsupported();
    }
    canMove() {
        unsupported();
    }
    copy() {
        unsupported();
    }
    canCopy() {
        unsupported();
    }
    cloneFile() {
        unsupported();
    }
    createFile() {
        unsupported();
    }
    canCreateFile() {
        unsupported();
    }
    createFolder() {
        unsupported();
    }
    del() {
        unsupported();
    }
    canDelete() {
        unsupported();
    }
    watch() {
        unsupported();
    }
    createWatcher() {
        unsupported();
    }
    dispose() {
    }
}
__decorate([
    Unsupported
], FileService.prototype, "registerProvider", null);
__decorate([
    Unsupported
], FileService.prototype, "resolve", null);
__decorate([
    Unsupported
], FileService.prototype, "resolveAll", null);
__decorate([
    Unsupported
], FileService.prototype, "stat", null);
__decorate([
    Unsupported
], FileService.prototype, "readFile", null);
__decorate([
    Unsupported
], FileService.prototype, "readFileStream", null);
__decorate([
    Unsupported
], FileService.prototype, "writeFile", null);
__decorate([
    Unsupported
], FileService.prototype, "move", null);
__decorate([
    Unsupported
], FileService.prototype, "canMove", null);
__decorate([
    Unsupported
], FileService.prototype, "copy", null);
__decorate([
    Unsupported
], FileService.prototype, "canCopy", null);
__decorate([
    Unsupported
], FileService.prototype, "cloneFile", null);
__decorate([
    Unsupported
], FileService.prototype, "createFile", null);
__decorate([
    Unsupported
], FileService.prototype, "canCreateFile", null);
__decorate([
    Unsupported
], FileService.prototype, "createFolder", null);
__decorate([
    Unsupported
], FileService.prototype, "del", null);
__decorate([
    Unsupported
], FileService.prototype, "canDelete", null);
__decorate([
    Unsupported
], FileService.prototype, "watch", null);
__decorate([
    Unsupported
], FileService.prototype, "createWatcher", null);
registerSingleton(IFileService, FileService, InstantiationType.Eager);
class EmptyEditorGroup {
    constructor() {
        this.selectedEditors = [];
        this.isSelected = () => false;
        this.isTransient = () => false;
        this.windowId = mainWindow.vscodeWindowId;
        this.onDidFocus = Event.None;
        this.onDidOpenEditorFail = Event.None;
        this.whenRestored = Promise.resolve();
        this.disposed = false;
        this.minimumWidth = 0;
        this.maximumWidth = Number.POSITIVE_INFINITY;
        this.minimumHeight = 0;
        this.maximumHeight = Number.POSITIVE_INFINITY;
        this.onDidChange = Event.None;
        this.onDidModelChange = Event.None;
        this.onWillDispose = Event.None;
        this.onDidActiveEditorChange = Event.None;
        this.onWillCloseEditor = Event.None;
        this.onDidCloseEditor = Event.None;
        this.onWillMoveEditor = Event.None;
        this.onWillOpenEditor = Event.None;
        this.id = 0;
        this.index = 0;
        this.label = 'main';
        this.ariaLabel = 'main';
        this.activeEditorPane = undefined;
        this.activeEditor = null;
        this.previewEditor = null;
        this.count = 0;
        this.isEmpty = false;
        this.isLocked = false;
        this.stickyCount = 0;
        this.editors = [];
        this.getEditors = () => [];
        this.findEditors = () => [];
        this.getEditorByIndex = () => undefined;
        this.isPinned = () => false;
        this.isSticky = () => false;
        this.isActive = () => false;
        this.contains = () => false;
        this.pinEditor = () => { };
        this.stickEditor = () => { };
        this.unstickEditor = () => { };
        this.lock = () => { };
    }
    setSelection() {
        unsupported();
    }
    get groupsView() {
        return unsupported();
    }
    notifyLabelChanged() { }
    createEditorActions() {
        unsupported();
    }
    get titleHeight() {
        return unsupported();
    }
    setActive() {
        unsupported();
    }
    notifyIndexChanged() {
        unsupported();
    }
    relayout() {
        unsupported();
    }
    dispose() {
        unsupported();
    }
    toJSON() {
        unsupported();
    }
    get element() {
        return unsupported();
    }
    layout() {
        unsupported();
    }
    get scopedContextKeyService() {
        return StandaloneServices.get(IContextKeyService);
    }
    getIndexOfEditor() {
        unsupported();
    }
    openEditor() {
        unsupported();
    }
    openEditors() {
        unsupported();
    }
    moveEditor() {
        unsupported();
    }
    moveEditors() {
        unsupported();
    }
    copyEditor() {
        unsupported();
    }
    copyEditors() {
        unsupported();
    }
    closeEditor() {
        unsupported();
    }
    closeEditors() {
        unsupported();
    }
    closeAllEditors() {
        unsupported();
    }
    replaceEditors() {
        unsupported();
    }
    focus() {
    }
    isFirst() {
        unsupported();
    }
    isLast() {
        unsupported();
    }
}
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "setSelection", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "groupsView", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "createEditorActions", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "titleHeight", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "setActive", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "notifyIndexChanged", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "relayout", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "dispose", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "toJSON", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "element", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "layout", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "getIndexOfEditor", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "openEditor", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "openEditors", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "moveEditor", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "moveEditors", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "copyEditor", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "copyEditors", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "closeEditor", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "closeEditors", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "closeAllEditors", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "replaceEditors", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "isFirst", null);
__decorate([
    Unsupported
], EmptyEditorGroup.prototype, "isLast", null);
const fakeActiveGroup = new EmptyEditorGroup();
class EmptyEditorPart {
    constructor() {
        this.onWillDispose = Event.None;
        this.windowId = mainWindow.vscodeWindowId;
        this.hasMaximizedGroup = () => false;
        this.onDidLayout = Event.None;
        this.onDidScroll = Event.None;
        this.isReady = true;
        this.whenReady = Promise.resolve();
        this.whenRestored = Promise.resolve();
        this.hasRestorableState = false;
        this.onDidChangeActiveGroup = Event.None;
        this.onDidAddGroup = Event.None;
        this.onDidRemoveGroup = Event.None;
        this.onDidMoveGroup = Event.None;
        this.onDidActivateGroup = Event.None;
        this.onDidChangeGroupIndex = Event.None;
        this.onDidChangeGroupLocked = Event.None;
        this.onDidChangeGroupMaximized = Event.None;
        this.activeGroup = fakeActiveGroup;
        this.groups = [fakeActiveGroup];
        this.count = 0;
        this.orientation = GroupOrientation.HORIZONTAL;
        this.getGroups = () => [];
        this.getGroup = () => undefined;
        this.findGroup = () => undefined;
        this.partOptions = DEFAULT_EDITOR_PART_OPTIONS;
        this.onDidChangeEditorPartOptions = Event.None;
    }
    get contentDimension() {
        return unsupported();
    }
    centerLayout() {
        unsupported();
    }
    isLayoutCentered() {
        unsupported();
    }
    enforcePartOptions() {
        unsupported();
    }
    get sideGroup() {
        return unsupported();
    }
    activateGroup() {
        unsupported();
    }
    getSize() {
        unsupported();
    }
    setSize() {
        unsupported();
    }
    arrangeGroups() {
        unsupported();
    }
    toggleMaximizeGroup() {
        unsupported();
    }
    toggleExpandGroup() {
        unsupported();
    }
    applyLayout() {
        unsupported();
    }
    getLayout() {
        unsupported();
    }
    setGroupOrientation() {
        unsupported();
    }
    addGroup() {
        unsupported();
    }
    removeGroup() {
        unsupported();
    }
    moveGroup() {
        unsupported();
    }
    mergeGroup() {
        unsupported();
    }
    mergeAllGroups() {
        unsupported();
    }
    copyGroup() {
        unsupported();
    }
    createEditorDropTarget() {
        unsupported();
    }
}
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "contentDimension", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "centerLayout", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "isLayoutCentered", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "enforcePartOptions", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "sideGroup", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "activateGroup", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "getSize", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "setSize", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "arrangeGroups", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "toggleMaximizeGroup", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "toggleExpandGroup", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "applyLayout", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "getLayout", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "setGroupOrientation", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "addGroup", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "removeGroup", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "moveGroup", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "mergeGroup", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "mergeAllGroups", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "copyGroup", null);
__decorate([
    Unsupported
], EmptyEditorPart.prototype, "createEditorDropTarget", null);
class EmptyEditorGroupsService {
    constructor() {
        this.onDidCreateAuxiliaryEditorPart = Event.None;
        this.mainPart = new EmptyEditorPart();
        this.activePart = this.mainPart;
        this.parts = [this.mainPart];
        this.onDidChangeGroupMaximized = Event.None;
        this.partOptions = DEFAULT_EDITOR_PART_OPTIONS;
        this._serviceBrand = undefined;
        this.onDidChangeActiveGroup = Event.None;
        this.onDidAddGroup = Event.None;
        this.onDidRemoveGroup = Event.None;
        this.onDidMoveGroup = Event.None;
        this.onDidActivateGroup = Event.None;
        this.onDidLayout = Event.None;
        this.onDidScroll = Event.None;
        this.onDidChangeGroupIndex = Event.None;
        this.onDidChangeGroupLocked = Event.None;
        this.activeGroup = fakeActiveGroup;
        this.groups = [fakeActiveGroup];
        this.count = 0;
        this.orientation = GroupOrientation.HORIZONTAL;
        this.isReady = false;
        this.whenReady = Promise.resolve();
        this.whenRestored = Promise.resolve();
        this.hasRestorableState = false;
        this.getGroups = () => [];
        this.getGroup = () => undefined;
        this.isLayoutCentered = () => false;
        this.findGroup = () => undefined;
        this.onDidChangeEditorPartOptions = Event.None;
    }
    getScopedInstantiationService() {
        unsupported();
    }
    registerContextKeyProvider() {
        unsupported();
    }
    saveWorkingSet() {
        unsupported();
    }
    getWorkingSets() {
        unsupported();
    }
    applyWorkingSet() {
        unsupported();
    }
    deleteWorkingSet() {
        unsupported();
    }
    getPart() {
        unsupported();
    }
    createAuxiliaryEditorPart() {
        unsupported();
    }
    toggleMaximizeGroup() {
        unsupported();
    }
    toggleExpandGroup() {
        unsupported();
    }
    createEditorDropTarget() {
        unsupported();
    }
    getLayout() {
        unsupported();
    }
    get contentDimension() {
        return unsupported();
    }
    get sideGroup() {
        return unsupported();
    }
    activateGroup() {
        unsupported();
    }
    getSize() {
        unsupported();
    }
    setSize() {
        unsupported();
    }
    arrangeGroups() {
        unsupported();
    }
    applyLayout() {
        unsupported();
    }
    centerLayout() {
        unsupported();
    }
    setGroupOrientation() {
        unsupported();
    }
    addGroup() {
        unsupported();
    }
    removeGroup() {
        unsupported();
    }
    moveGroup() {
        unsupported();
    }
    mergeGroup() {
        unsupported();
    }
    mergeAllGroups() {
        unsupported();
    }
    copyGroup() {
        unsupported();
    }
    enforcePartOptions() {
        unsupported();
    }
}
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "getScopedInstantiationService", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "registerContextKeyProvider", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "saveWorkingSet", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "getWorkingSets", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "applyWorkingSet", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "deleteWorkingSet", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "getPart", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "createAuxiliaryEditorPart", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "toggleMaximizeGroup", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "toggleExpandGroup", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "createEditorDropTarget", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "getLayout", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "contentDimension", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "sideGroup", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "activateGroup", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "getSize", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "setSize", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "arrangeGroups", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "applyLayout", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "centerLayout", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "setGroupOrientation", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "addGroup", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "removeGroup", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "moveGroup", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "mergeGroup", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "mergeAllGroups", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "copyGroup", null);
__decorate([
    Unsupported
], EmptyEditorGroupsService.prototype, "enforcePartOptions", null);
registerSingleton(IEditorGroupsService, EmptyEditorGroupsService, InstantiationType.Eager);
class BannerService {
    focus() { }
    focusNextAction() { }
    focusPreviousAction() { }
    hide() { }
    show() { }
}
registerSingleton(IBannerService, BannerService, InstantiationType.Eager);
class TitleService {
    constructor() {
        this.onMenubarVisibilityChange = Event.None;
        this.isCommandCenterVisible = false;
        this.onDidChangeCommandCenterVisibility = Event.None;
        this.registerVariables = () => { };
    }
    getPart() {
        unsupported();
    }
    createAuxiliaryTitlebarPart() {
        unsupported();
    }
    dispose() {
        unsupported();
    }
    updateProperties() { }
}
__decorate([
    Unsupported
], TitleService.prototype, "getPart", null);
__decorate([
    Unsupported
], TitleService.prototype, "createAuxiliaryTitlebarPart", null);
__decorate([
    Unsupported
], TitleService.prototype, "dispose", null);
registerSingleton(ITitleService, TitleService, InstantiationType.Eager);
class WorkingCopyFileService {
    constructor() {
        this.onWillRunWorkingCopyFileOperation = Event.None;
        this.onDidFailWorkingCopyFileOperation = Event.None;
        this.onDidRunWorkingCopyFileOperation = Event.None;
        this.hasSaveParticipants = false;
        this.getDirty = () => [];
    }
    addFileOperationParticipant() {
        unsupported();
    }
    addSaveParticipant() {
        unsupported();
    }
    runSaveParticipants() {
        unsupported();
    }
    create() {
        unsupported();
    }
    createFolder() {
        unsupported();
    }
    move() {
        unsupported();
    }
    copy() {
        unsupported();
    }
    delete() {
        unsupported();
    }
    registerWorkingCopyProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkingCopyFileService.prototype, "addFileOperationParticipant", null);
__decorate([
    Unsupported
], WorkingCopyFileService.prototype, "addSaveParticipant", null);
__decorate([
    Unsupported
], WorkingCopyFileService.prototype, "runSaveParticipants", null);
__decorate([
    Unsupported
], WorkingCopyFileService.prototype, "create", null);
__decorate([
    Unsupported
], WorkingCopyFileService.prototype, "createFolder", null);
__decorate([
    Unsupported
], WorkingCopyFileService.prototype, "move", null);
__decorate([
    Unsupported
], WorkingCopyFileService.prototype, "copy", null);
__decorate([
    Unsupported
], WorkingCopyFileService.prototype, "delete", null);
__decorate([
    Unsupported
], WorkingCopyFileService.prototype, "registerWorkingCopyProvider", null);
registerSingleton(IWorkingCopyFileService, WorkingCopyFileService, InstantiationType.Eager);
class PathService {
    constructor() {
        this.defaultUriScheme = 'file';
        this.resolvedUserHome = undefined;
    }
    get path() {
        return unsupported();
    }
    fileURI() {
        unsupported();
    }
    userHome() {
        unsupported();
    }
    hasValidBasename() {
        unsupported();
    }
}
__decorate([
    Unsupported
], PathService.prototype, "path", null);
__decorate([
    Unsupported
], PathService.prototype, "fileURI", null);
__decorate([
    Unsupported
], PathService.prototype, "userHome", null);
__decorate([
    Unsupported
], PathService.prototype, "hasValidBasename", null);
registerSingleton(IPathService, PathService, InstantiationType.Delayed);
class ProductService {
    constructor() {
        this._serviceBrand = undefined;
        this.version = "1.98.2";
        this.commit = "ddc367ed5c8936efe395cffeec279b04ffd7db78";
        this.quality = 'oss';
        this.nameShort = 'Code - OSS Dev';
        this.nameLong = 'Code - OSS Dev';
        this.applicationName = 'code-oss';
        this.dataFolderName = '.vscode-oss';
        this.urlProtocol = 'code-oss';
        this.reportIssueUrl = 'https://github.com/microsoft/vscode/issues/new';
        this.licenseName = 'MIT';
        this.licenseUrl = 'https://github.com/microsoft/vscode/blob/main/LICENSE.txt';
        this.serverApplicationName = 'code-server-oss';
    }
}
registerSingleton(IProductService, ProductService, InstantiationType.Eager);
class ExtensionTipsService {
    constructor() {
        this._serviceBrand = undefined;
        this.getConfigBasedTips = async () => [];
        this.getImportantExecutableBasedTips = async () => [];
        this.getOtherExecutableBasedTips = async () => [];
    }
}
registerSingleton(IExtensionTipsService, ExtensionTipsService, InstantiationType.Eager);
class LanguageStatusService {
    constructor() {
        this.onDidChange = Event.None;
    }
    addStatus() {
        unsupported();
    }
    getLanguageStatus() {
        unsupported();
    }
}
__decorate([
    Unsupported
], LanguageStatusService.prototype, "addStatus", null);
__decorate([
    Unsupported
], LanguageStatusService.prototype, "getLanguageStatus", null);
registerSingleton(ILanguageStatusService, LanguageStatusService, InstantiationType.Delayed);
class HostService {
    constructor() {
        this.getNativeWindowHandle = async () => undefined;
        this.getScreenshot = async () => undefined;
        this.getPathForFile = () => undefined;
        this.onDidChangeFullScreen = Event.None;
        this.onDidChangeFocus = Event.None;
        this.hasFocus = false;
        this.hadLastFocus = async () => false;
        this.onDidChangeActiveWindow = Event.None;
    }
    focus() {
        unsupported();
    }
    openWindow() {
        unsupported();
    }
    toggleFullScreen() {
        unsupported();
    }
    moveTop() {
        unsupported();
    }
    getCursorScreenPoint() {
        unsupported();
    }
    restart() {
        unsupported();
    }
    reload() {
        unsupported();
    }
    close() {
        unsupported();
    }
    withExpectedShutdown() {
        unsupported();
    }
}
__decorate([
    Unsupported
], HostService.prototype, "focus", null);
__decorate([
    Unsupported
], HostService.prototype, "openWindow", null);
__decorate([
    Unsupported
], HostService.prototype, "toggleFullScreen", null);
__decorate([
    Unsupported
], HostService.prototype, "moveTop", null);
__decorate([
    Unsupported
], HostService.prototype, "getCursorScreenPoint", null);
__decorate([
    Unsupported
], HostService.prototype, "restart", null);
__decorate([
    Unsupported
], HostService.prototype, "reload", null);
__decorate([
    Unsupported
], HostService.prototype, "close", null);
__decorate([
    Unsupported
], HostService.prototype, "withExpectedShutdown", null);
registerSingleton(IHostService, HostService, InstantiationType.Eager);
class LifecycleService extends AbstractLifecycleService {
    shutdown() {
        unsupported();
    }
}
__decorate([
    Unsupported
], LifecycleService.prototype, "shutdown", null);
registerSingleton(ILifecycleService, LifecycleService, InstantiationType.Eager);
class LanguageDetectionService {
    isEnabledForLanguage() {
        return false;
    }
    async detectLanguage() {
        return undefined;
    }
}
registerSingleton(ILanguageDetectionService, LanguageDetectionService, InstantiationType.Eager);
registerSingleton(IExtensionService, NullExtensionService, InstantiationType.Eager);
class KeyboardLayoutService {
    constructor() {
        this.onDidChangeKeyboardLayout = Event.None;
        this.getRawKeyboardMapping = () => null;
        this.getCurrentKeyboardLayout = () => null;
        this.getAllKeyboardLayouts = () => [];
        this.getKeyboardMapper = () => new FallbackKeyboardMapper(false, OS);
        this.validateCurrentKeyboardMapping = () => { };
    }
}
registerSingleton(IKeyboardLayoutService, KeyboardLayoutService, InstantiationType.Delayed);
class NullUserDataInitializationService {
    async requiresInitialization() {
        return false;
    }
    async whenInitializationFinished() { }
    async initializeRequiredResources() { }
    async initializeInstalledExtensions() { }
    async initializeOtherResources() { }
}
registerSingleton(IUserDataInitializationService, NullUserDataInitializationService, InstantiationType.Eager);
class HostColorSchemeService {
    constructor() {
        this.dark = false;
        this.highContrast = false;
        this.onDidChangeColorScheme = Event.None;
    }
}
registerSingleton(IHostColorSchemeService, HostColorSchemeService, InstantiationType.Eager);
let PreferencesService = class PreferencesService {
    constructor(profileService) {
        this.profileService = profileService;
        this.onDidDefaultSettingsContentChanged = Event.None;
        this.getDefaultSettingsContent = () => undefined;
        this.hasDefaultSettingsContent = () => false;
        this.getSetting = () => undefined;
        this.userSettingsResource = this.profileService.currentProfile.settingsResource;
        this.workspaceSettingsResource = null;
    }
    getFolderSettingsResource() {
        unsupported();
    }
    createPreferencesEditorModel() {
        unsupported();
    }
    resolveModel() {
        unsupported();
    }
    createSettings2EditorModel() {
        unsupported();
    }
    openRawDefaultSettings() {
        unsupported();
    }
    openSettings() {
        unsupported();
    }
    openUserSettings() {
        unsupported();
    }
    openRemoteSettings() {
        unsupported();
    }
    openWorkspaceSettings() {
        unsupported();
    }
    openFolderSettings() {
        unsupported();
    }
    openGlobalKeybindingSettings() {
        unsupported();
    }
    openDefaultKeybindingsFile() {
        unsupported();
    }
    getEditableSettingsURI() {
        unsupported();
    }
    createSplitJsonEditorInput() {
        unsupported();
    }
    openApplicationSettings() {
        unsupported();
    }
    openLanguageSpecificSettings() {
        unsupported();
    }
};
__decorate([
    Unsupported
], PreferencesService.prototype, "getFolderSettingsResource", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "createPreferencesEditorModel", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "resolveModel", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "createSettings2EditorModel", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openRawDefaultSettings", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openSettings", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openUserSettings", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openRemoteSettings", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openWorkspaceSettings", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openFolderSettings", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openGlobalKeybindingSettings", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openDefaultKeybindingsFile", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "getEditableSettingsURI", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "createSplitJsonEditorInput", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openApplicationSettings", null);
__decorate([
    Unsupported
], PreferencesService.prototype, "openLanguageSpecificSettings", null);
PreferencesService = __decorate([
    __param(0, IUserDataProfileService)
], PreferencesService);
registerSingleton(IPreferencesService, PreferencesService, InstantiationType.Eager);
class NullTextMateService {
    constructor() {
        this.onDidEncounterLanguage = Event.None;
    }
    createGrammar() {
        unsupported();
    }
    startDebugMode() {
        unsupported();
    }
    createTokenizer() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NullTextMateService.prototype, "createGrammar", null);
__decorate([
    Unsupported
], NullTextMateService.prototype, "startDebugMode", null);
__decorate([
    Unsupported
], NullTextMateService.prototype, "createTokenizer", null);
registerSingleton(ITextMateTokenizationService, NullTextMateService, InstantiationType.Eager);
let UserDataProfilesService = class UserDataProfilesService {
    constructor(profileService) {
        this.profileService = profileService;
        this.onDidResetWorkspaces = Event.None;
        this.isEnabled = () => false;
        this.defaultProfile = this.profileService.currentProfile;
        this.onDidChangeProfiles = Event.None;
        this.profiles = [this.profileService.currentProfile];
        this.getProfile = () => this.profileService.currentProfile;
    }
    createNamedProfile() {
        unsupported();
    }
    createTransientProfile() {
        unsupported();
    }
    resetWorkspaces() {
        unsupported();
    }
    cleanUp() {
        unsupported();
    }
    cleanUpTransientProfiles() {
        unsupported();
    }
    get profilesHome() {
        return unsupported();
    }
    createProfile() {
        unsupported();
    }
    updateProfile() {
        unsupported();
    }
    setProfileForWorkspace() {
        unsupported();
    }
    removeProfile() {
        unsupported();
    }
};
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "createNamedProfile", null);
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "createTransientProfile", null);
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "resetWorkspaces", null);
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "cleanUp", null);
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "cleanUpTransientProfiles", null);
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "profilesHome", null);
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "createProfile", null);
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "updateProfile", null);
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "setProfileForWorkspace", null);
__decorate([
    Unsupported
], UserDataProfilesService.prototype, "removeProfile", null);
UserDataProfilesService = __decorate([
    __param(0, IUserDataProfileService)
], UserDataProfilesService);
registerSingleton(IUserDataProfilesService, UserDataProfilesService, InstantiationType.Eager);
class UserDataProfileStorageService {
    constructor() {
        this.onDidChange = Event.None;
    }
    readStorageData() {
        unsupported();
    }
    updateStorageData() {
        unsupported();
    }
    withProfileScopedStorageService() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataProfileStorageService.prototype, "readStorageData", null);
__decorate([
    Unsupported
], UserDataProfileStorageService.prototype, "updateStorageData", null);
__decorate([
    Unsupported
], UserDataProfileStorageService.prototype, "withProfileScopedStorageService", null);
registerSingleton(IUserDataProfileStorageService, UserDataProfileStorageService, InstantiationType.Eager);
let InjectedUserDataProfileService = class InjectedUserDataProfileService extends UserDataProfileService {
    constructor(environmentService) {
        super({
            ...toUserDataProfile('__default__profile__', 'Default', environmentService.userRoamingDataHome, joinPath(environmentService.cacheHome, 'CachedProfilesData')),
            isDefault: true
        });
    }
};
InjectedUserDataProfileService = __decorate([
    __param(0, IEnvironmentService)
], InjectedUserDataProfileService);
registerSingleton(IUserDataProfileService, InjectedUserDataProfileService, InstantiationType.Eager);
registerSingleton(IPolicyService, NullPolicyService, InstantiationType.Eager);
class SnippetsService {
    constructor() {
        this.getSnippets = async () => [];
    }
    getSnippetFiles() {
        unsupported();
    }
    isEnabled() {
        unsupported();
    }
    updateEnablement() {
        unsupported();
    }
    updateUsageTimestamp() {
        unsupported();
    }
    getSnippetsSync() {
        unsupported();
    }
}
__decorate([
    Unsupported
], SnippetsService.prototype, "getSnippetFiles", null);
__decorate([
    Unsupported
], SnippetsService.prototype, "isEnabled", null);
__decorate([
    Unsupported
], SnippetsService.prototype, "updateEnablement", null);
__decorate([
    Unsupported
], SnippetsService.prototype, "updateUsageTimestamp", null);
__decorate([
    Unsupported
], SnippetsService.prototype, "getSnippetsSync", null);
registerSingleton(ISnippetsService, SnippetsService, InstantiationType.Eager);
const debugModel = {
    getSession: () => undefined,
    getSessions: () => [],
    getBreakpoints: () => [],
    areBreakpointsActivated: () => false,
    getFunctionBreakpoints: () => [],
    getDataBreakpoints: () => [],
    getExceptionBreakpoints: () => [],
    getExceptionBreakpointsForSession: () => [],
    getInstructionBreakpoints: () => [],
    getWatchExpressions: () => [],
    onDidChangeBreakpoints: Event.None,
    onDidChangeCallStack: Event.None,
    onDidChangeWatchExpressions: Event.None,
    fetchCallstack: unsupported,
    getId: unsupported,
    registerBreakpointModes: unsupported,
    getBreakpointModes: () => [],
    onDidChangeWatchExpressionValue: Event.None
};
class FakeViewModel {
    constructor() {
        this.getVisualizedExpression = () => undefined;
        this.onDidChangeVisualization = Event.None;
        this.focusedSession = undefined;
        this.focusedThread = undefined;
        this.focusedStackFrame = undefined;
        this.onDidFocusSession = Event.None;
        this.onDidFocusStackFrame = Event.None;
        this.onDidSelectExpression = Event.None;
        this.onDidEvaluateLazyExpression = Event.None;
        this.onWillUpdateViews = Event.None;
        this.onDidFocusThread = Event.None;
    }
    setVisualizedExpression() {
        unsupported();
    }
    getId() {
        unsupported();
    }
    getSelectedExpression() {
        unsupported();
    }
    setSelectedExpression() {
        unsupported();
    }
    updateViews() {
        unsupported();
    }
    isMultiSessionView() {
        unsupported();
    }
    evaluateLazyExpression() {
        unsupported();
    }
}
__decorate([
    Unsupported
], FakeViewModel.prototype, "setVisualizedExpression", null);
__decorate([
    Unsupported
], FakeViewModel.prototype, "getId", null);
__decorate([
    Unsupported
], FakeViewModel.prototype, "getSelectedExpression", null);
__decorate([
    Unsupported
], FakeViewModel.prototype, "setSelectedExpression", null);
__decorate([
    Unsupported
], FakeViewModel.prototype, "updateViews", null);
__decorate([
    Unsupported
], FakeViewModel.prototype, "isMultiSessionView", null);
__decorate([
    Unsupported
], FakeViewModel.prototype, "evaluateLazyExpression", null);
class FakeAdapterManager {
    constructor() {
        this.onDidRegisterDebugger = Event.None;
        this.hasEnabledDebuggers = () => false;
        this.someDebuggerInterestedInLanguage = () => false;
        this.getDebugger = () => undefined;
        this.registerDebugAdapterFactory = () => Disposable.None;
        this.onDidDebuggersExtPointRead = Event.None;
    }
    getDebugAdapterDescriptor() {
        unsupported();
    }
    getDebuggerLabel() {
        unsupported();
    }
    activateDebuggers() {
        unsupported();
    }
    createDebugAdapter() {
        unsupported();
    }
    registerDebugAdapterDescriptorFactory() {
        unsupported();
    }
    unregisterDebugAdapterDescriptorFactory() {
        unsupported();
    }
    substituteVariables() {
        unsupported();
    }
    runInTerminal() {
        unsupported();
    }
    getEnabledDebugger() {
        unsupported();
    }
    guessDebugger() {
        unsupported();
    }
}
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "getDebugAdapterDescriptor", null);
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "getDebuggerLabel", null);
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "activateDebuggers", null);
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "createDebugAdapter", null);
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "registerDebugAdapterDescriptorFactory", null);
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "unregisterDebugAdapterDescriptorFactory", null);
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "substituteVariables", null);
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "runInTerminal", null);
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "getEnabledDebugger", null);
__decorate([
    Unsupported
], FakeAdapterManager.prototype, "guessDebugger", null);
class DebugService {
    constructor() {
        this.initializingOptions = undefined;
        this.onDidChangeState = Event.None;
        this.onDidNewSession = Event.None;
        this.onWillNewSession = Event.None;
        this.onDidEndSession = Event.None;
        this.getAdapterManager = () => new FakeAdapterManager();
        this.getModel = () => debugModel;
        this.getViewModel = () => new FakeViewModel();
    }
    sendBreakpoints() {
        unsupported();
    }
    updateDataBreakpoint() {
        unsupported();
    }
    get state() {
        return unsupported();
    }
    getConfigurationManager() {
        unsupported();
    }
    focusStackFrame() {
        unsupported();
    }
    canSetBreakpointsIn() {
        unsupported();
    }
    addBreakpoints() {
        unsupported();
    }
    updateBreakpoints() {
        unsupported();
    }
    enableOrDisableBreakpoints() {
        unsupported();
    }
    setBreakpointsActivated() {
        unsupported();
    }
    removeBreakpoints() {
        unsupported();
    }
    addFunctionBreakpoint() {
        unsupported();
    }
    updateFunctionBreakpoint() {
        unsupported();
    }
    removeFunctionBreakpoints() {
        unsupported();
    }
    addDataBreakpoint() {
        unsupported();
    }
    removeDataBreakpoints() {
        unsupported();
    }
    addInstructionBreakpoint() {
        unsupported();
    }
    removeInstructionBreakpoints() {
        unsupported();
    }
    setExceptionBreakpointCondition() {
        unsupported();
    }
    setExceptionBreakpointsForSession() {
        unsupported();
    }
    sendAllBreakpoints() {
        unsupported();
    }
    addWatchExpression() {
        unsupported();
    }
    renameWatchExpression() {
        unsupported();
    }
    moveWatchExpression() {
        unsupported();
    }
    removeWatchExpressions() {
        unsupported();
    }
    startDebugging() {
        unsupported();
    }
    restartSession() {
        unsupported();
    }
    stopSession() {
        unsupported();
    }
    sourceIsNotAvailable() {
        unsupported();
    }
    runTo() {
        unsupported();
    }
}
__decorate([
    Unsupported
], DebugService.prototype, "sendBreakpoints", null);
__decorate([
    Unsupported
], DebugService.prototype, "updateDataBreakpoint", null);
__decorate([
    Unsupported
], DebugService.prototype, "state", null);
__decorate([
    Unsupported
], DebugService.prototype, "getConfigurationManager", null);
__decorate([
    Unsupported
], DebugService.prototype, "focusStackFrame", null);
__decorate([
    Unsupported
], DebugService.prototype, "canSetBreakpointsIn", null);
__decorate([
    Unsupported
], DebugService.prototype, "addBreakpoints", null);
__decorate([
    Unsupported
], DebugService.prototype, "updateBreakpoints", null);
__decorate([
    Unsupported
], DebugService.prototype, "enableOrDisableBreakpoints", null);
__decorate([
    Unsupported
], DebugService.prototype, "setBreakpointsActivated", null);
__decorate([
    Unsupported
], DebugService.prototype, "removeBreakpoints", null);
__decorate([
    Unsupported
], DebugService.prototype, "addFunctionBreakpoint", null);
__decorate([
    Unsupported
], DebugService.prototype, "updateFunctionBreakpoint", null);
__decorate([
    Unsupported
], DebugService.prototype, "removeFunctionBreakpoints", null);
__decorate([
    Unsupported
], DebugService.prototype, "addDataBreakpoint", null);
__decorate([
    Unsupported
], DebugService.prototype, "removeDataBreakpoints", null);
__decorate([
    Unsupported
], DebugService.prototype, "addInstructionBreakpoint", null);
__decorate([
    Unsupported
], DebugService.prototype, "removeInstructionBreakpoints", null);
__decorate([
    Unsupported
], DebugService.prototype, "setExceptionBreakpointCondition", null);
__decorate([
    Unsupported
], DebugService.prototype, "setExceptionBreakpointsForSession", null);
__decorate([
    Unsupported
], DebugService.prototype, "sendAllBreakpoints", null);
__decorate([
    Unsupported
], DebugService.prototype, "addWatchExpression", null);
__decorate([
    Unsupported
], DebugService.prototype, "renameWatchExpression", null);
__decorate([
    Unsupported
], DebugService.prototype, "moveWatchExpression", null);
__decorate([
    Unsupported
], DebugService.prototype, "removeWatchExpressions", null);
__decorate([
    Unsupported
], DebugService.prototype, "startDebugging", null);
__decorate([
    Unsupported
], DebugService.prototype, "restartSession", null);
__decorate([
    Unsupported
], DebugService.prototype, "stopSession", null);
__decorate([
    Unsupported
], DebugService.prototype, "sourceIsNotAvailable", null);
__decorate([
    Unsupported
], DebugService.prototype, "runTo", null);
registerSingleton(IDebugService, DebugService, InstantiationType.Eager);
class RequestService {
    lookupAuthorization() {
        unsupported();
    }
    lookupKerberosAuthorization() {
        unsupported();
    }
    request() {
        unsupported();
    }
    resolveProxy() {
        unsupported();
    }
    loadCertificates() {
        unsupported();
    }
}
__decorate([
    Unsupported
], RequestService.prototype, "lookupAuthorization", null);
__decorate([
    Unsupported
], RequestService.prototype, "lookupKerberosAuthorization", null);
__decorate([
    Unsupported
], RequestService.prototype, "request", null);
__decorate([
    Unsupported
], RequestService.prototype, "resolveProxy", null);
__decorate([
    Unsupported
], RequestService.prototype, "loadCertificates", null);
registerSingleton(IRequestService, RequestService, InstantiationType.Eager);
class WorkspaceTrustRequestService {
    constructor() {
        this.onDidInitiateOpenFilesTrustRequest = Event.None;
        this.onDidInitiateWorkspaceTrustRequest = Event.None;
        this.onDidInitiateWorkspaceTrustRequestOnStartup = Event.None;
        this.requestOpenFilesTrust = async () => WorkspaceTrustUriResponse.Open;
        this.requestWorkspaceTrust = async () => true;
        this.requestWorkspaceTrustOnStartup = () => null;
    }
    completeOpenFilesTrustRequest() {
        unsupported();
    }
    cancelWorkspaceTrustRequest() {
        unsupported();
    }
    completeWorkspaceTrustRequest() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkspaceTrustRequestService.prototype, "completeOpenFilesTrustRequest", null);
__decorate([
    Unsupported
], WorkspaceTrustRequestService.prototype, "cancelWorkspaceTrustRequest", null);
__decorate([
    Unsupported
], WorkspaceTrustRequestService.prototype, "completeWorkspaceTrustRequest", null);
registerSingleton(IWorkspaceTrustRequestService, WorkspaceTrustRequestService, InstantiationType.Eager);
class ActivityService {
    constructor() {
        this.onDidChangeActivity = Event.None;
        this.showViewContainerActivity = () => Disposable.None;
        this.showViewActivity = () => Disposable.None;
        this.showAccountsActivity = () => Disposable.None;
        this.showGlobalActivity = () => Disposable.None;
    }
    getViewContainerActivities() {
        unsupported();
    }
    getActivity() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ActivityService.prototype, "getViewContainerActivities", null);
__decorate([
    Unsupported
], ActivityService.prototype, "getActivity", null);
registerSingleton(IActivityService, ActivityService, InstantiationType.Eager);
class ExtensionHostDebugService {
    constructor() {
        this.onReload = Event.None;
        this.onClose = Event.None;
        this.onAttachSession = Event.None;
        this.onTerminateSession = Event.None;
    }
    reload() {
        unsupported();
    }
    close() {
        unsupported();
    }
    attachSession() {
        unsupported();
    }
    terminateSession() {
        unsupported();
    }
    openExtensionDevelopmentHostWindow() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionHostDebugService.prototype, "reload", null);
__decorate([
    Unsupported
], ExtensionHostDebugService.prototype, "close", null);
__decorate([
    Unsupported
], ExtensionHostDebugService.prototype, "attachSession", null);
__decorate([
    Unsupported
], ExtensionHostDebugService.prototype, "terminateSession", null);
__decorate([
    Unsupported
], ExtensionHostDebugService.prototype, "openExtensionDevelopmentHostWindow", null);
registerSingleton(IExtensionHostDebugService, ExtensionHostDebugService, InstantiationType.Eager);
class ViewsService {
    constructor() {
        this.getFocusedView = () => null;
        this.isViewContainerActive = () => false;
        this.onDidChangeFocusedView = Event.None;
        this.onDidChangeViewContainerVisibility = Event.None;
        this.isViewContainerVisible = () => false;
        this.getActiveViewPaneContainerWithId = () => null;
        this.onDidChangeViewVisibility = Event.None;
        this.isViewVisible = () => false;
        this.openView = async () => null;
        this.getActiveViewWithId = () => null;
        this.getViewWithId = () => null;
        this.getViewProgressIndicator = () => undefined;
    }
    getFocusedViewName() {
        unsupported();
    }
    openViewContainer() {
        unsupported();
    }
    closeViewContainer() {
        unsupported();
    }
    getVisibleViewContainer() {
        unsupported();
    }
    closeView() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ViewsService.prototype, "getFocusedViewName", null);
__decorate([
    Unsupported
], ViewsService.prototype, "openViewContainer", null);
__decorate([
    Unsupported
], ViewsService.prototype, "closeViewContainer", null);
__decorate([
    Unsupported
], ViewsService.prototype, "getVisibleViewContainer", null);
__decorate([
    Unsupported
], ViewsService.prototype, "closeView", null);
registerSingleton(IViewsService, ViewsService, InstantiationType.Eager);
class ViewDescriptorService {
    constructor() {
        this.viewContainers = [];
        this.onDidChangeViewContainers = Event.None;
        this.getDefaultViewContainer = () => undefined;
        this.getViewContainerById = () => null;
        this.getDefaultViewContainerLocation = () => null;
        this.getViewContainerLocation = () => null;
        this.getViewContainerModel = () => ({
            onDidChangeAllViewDescriptors: Event.None,
            visibleViewDescriptors: []
        });
        this.onDidChangeContainerLocation = Event.None;
        this.getViewDescriptorById = () => null;
        this.getViewContainerByViewId = () => null;
        this.getDefaultContainerById = () => null;
        this.getViewLocationById = () => null;
        this.onDidChangeContainer = Event.None;
        this.onDidChangeLocation = Event.None;
        this.moveViewToLocation = () => null;
        this.reset = () => null;
    }
    isViewContainerRemovedPermanently() {
        unsupported();
    }
    getViewContainersByLocation() {
        unsupported();
    }
    moveViewContainerToLocation() {
        unsupported();
    }
    getViewContainerBadgeEnablementState() {
        unsupported();
    }
    setViewContainerBadgeEnablementState() {
        unsupported();
    }
    moveViewsToContainer() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ViewDescriptorService.prototype, "isViewContainerRemovedPermanently", null);
__decorate([
    Unsupported
], ViewDescriptorService.prototype, "getViewContainersByLocation", null);
__decorate([
    Unsupported
], ViewDescriptorService.prototype, "moveViewContainerToLocation", null);
__decorate([
    Unsupported
], ViewDescriptorService.prototype, "getViewContainerBadgeEnablementState", null);
__decorate([
    Unsupported
], ViewDescriptorService.prototype, "setViewContainerBadgeEnablementState", null);
__decorate([
    Unsupported
], ViewDescriptorService.prototype, "moveViewsToContainer", null);
registerSingleton(IViewDescriptorService, ViewDescriptorService, InstantiationType.Eager);
class HistoryService {
    constructor() {
        this.suspendTracking = () => ({
            dispose() { }
        });
        this.getHistory = () => [];
        this.getLastActiveWorkspaceRoot = () => undefined;
        this.getLastActiveFile = () => undefined;
    }
    goForward() {
        unsupported();
    }
    goBack() {
        unsupported();
    }
    goPrevious() {
        unsupported();
    }
    goLast() {
        unsupported();
    }
    reopenLastClosedEditor() {
        unsupported();
    }
    removeFromHistory() {
        unsupported();
    }
    openNextRecentlyUsedEditor() {
        unsupported();
    }
    openPreviouslyUsedEditor() {
        unsupported();
    }
    clear() {
        unsupported();
    }
    clearRecentlyOpened() {
        unsupported();
    }
}
__decorate([
    Unsupported
], HistoryService.prototype, "goForward", null);
__decorate([
    Unsupported
], HistoryService.prototype, "goBack", null);
__decorate([
    Unsupported
], HistoryService.prototype, "goPrevious", null);
__decorate([
    Unsupported
], HistoryService.prototype, "goLast", null);
__decorate([
    Unsupported
], HistoryService.prototype, "reopenLastClosedEditor", null);
__decorate([
    Unsupported
], HistoryService.prototype, "removeFromHistory", null);
__decorate([
    Unsupported
], HistoryService.prototype, "openNextRecentlyUsedEditor", null);
__decorate([
    Unsupported
], HistoryService.prototype, "openPreviouslyUsedEditor", null);
__decorate([
    Unsupported
], HistoryService.prototype, "clear", null);
__decorate([
    Unsupported
], HistoryService.prototype, "clearRecentlyOpened", null);
registerSingleton(IHistoryService, HistoryService, InstantiationType.Eager);
class TaskService {
    constructor() {
        this.onDidChangeTaskProviders = Event.None;
        this.getKnownTasks = async () => [];
        this.onDidChangeTaskConfig = Event.None;
        this.onDidStateChange = Event.None;
        this.supportsMultipleTaskExecutions = false;
        this.inTerminal = () => false;
        this.getActiveTasks = async () => [];
        this.registerTaskSystem = () => { };
        this.onDidChangeTaskSystemInfo = Event.None;
        this.hasTaskSystemInfo = false;
        this.registerSupportedExecutions = () => { };
        this.isReconnected = false;
        this.onDidReconnectToTasks = Event.None;
    }
    configureAction() {
        unsupported();
    }
    rerun() {
        unsupported();
    }
    run() {
        unsupported();
    }
    getBusyTasks() {
        unsupported();
    }
    terminate() {
        unsupported();
    }
    tasks() {
        unsupported();
    }
    taskTypes() {
        unsupported();
    }
    getWorkspaceTasks() {
        unsupported();
    }
    getSavedTasks() {
        unsupported();
    }
    removeRecentlyUsedTask() {
        unsupported();
    }
    getTask() {
        unsupported();
    }
    tryResolveTask() {
        unsupported();
    }
    createSorter() {
        unsupported();
    }
    getTaskDescription() {
        unsupported();
    }
    customize() {
        unsupported();
    }
    openConfig() {
        unsupported();
    }
    registerTaskProvider() {
        unsupported();
    }
    extensionCallbackTaskComplete() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TaskService.prototype, "configureAction", null);
__decorate([
    Unsupported
], TaskService.prototype, "rerun", null);
__decorate([
    Unsupported
], TaskService.prototype, "run", null);
__decorate([
    Unsupported
], TaskService.prototype, "getBusyTasks", null);
__decorate([
    Unsupported
], TaskService.prototype, "terminate", null);
__decorate([
    Unsupported
], TaskService.prototype, "tasks", null);
__decorate([
    Unsupported
], TaskService.prototype, "taskTypes", null);
__decorate([
    Unsupported
], TaskService.prototype, "getWorkspaceTasks", null);
__decorate([
    Unsupported
], TaskService.prototype, "getSavedTasks", null);
__decorate([
    Unsupported
], TaskService.prototype, "removeRecentlyUsedTask", null);
__decorate([
    Unsupported
], TaskService.prototype, "getTask", null);
__decorate([
    Unsupported
], TaskService.prototype, "tryResolveTask", null);
__decorate([
    Unsupported
], TaskService.prototype, "createSorter", null);
__decorate([
    Unsupported
], TaskService.prototype, "getTaskDescription", null);
__decorate([
    Unsupported
], TaskService.prototype, "customize", null);
__decorate([
    Unsupported
], TaskService.prototype, "openConfig", null);
__decorate([
    Unsupported
], TaskService.prototype, "registerTaskProvider", null);
__decorate([
    Unsupported
], TaskService.prototype, "extensionCallbackTaskComplete", null);
registerSingleton(ITaskService, TaskService, InstantiationType.Eager);
class ConfigurationResolverService {
    resolveWithEnvironment() {
        unsupported();
    }
    resolveAsync() {
        unsupported();
    }
    resolveAnyAsync() {
        unsupported();
    }
    resolveAnyMap() {
        unsupported();
    }
    resolveWithInteractionReplace() {
        unsupported();
    }
    resolveWithInteraction() {
        unsupported();
    }
    contributeVariable() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ConfigurationResolverService.prototype, "resolveWithEnvironment", null);
__decorate([
    Unsupported
], ConfigurationResolverService.prototype, "resolveAsync", null);
__decorate([
    Unsupported
], ConfigurationResolverService.prototype, "resolveAnyAsync", null);
__decorate([
    Unsupported
], ConfigurationResolverService.prototype, "resolveAnyMap", null);
__decorate([
    Unsupported
], ConfigurationResolverService.prototype, "resolveWithInteractionReplace", null);
__decorate([
    Unsupported
], ConfigurationResolverService.prototype, "resolveWithInteraction", null);
__decorate([
    Unsupported
], ConfigurationResolverService.prototype, "contributeVariable", null);
registerSingleton(IConfigurationResolverService, ConfigurationResolverService, InstantiationType.Eager);
class RemoteAgentService {
    constructor() {
        this.getConnection = () => null;
        this.getEnvironment = async () => null;
        this.getRawEnvironment = async () => null;
        this.getExtensionHostExitInfo = async () => null;
        this.getRoundTripTime = async () => undefined;
        this.whenExtensionsReady = async () => undefined;
        this.scanExtensions = async () => [];
        this.scanSingleExtension = async () => null;
        this.getDiagnosticInfo = async () => undefined;
        this.updateTelemetryLevel = async () => undefined;
        this.logTelemetry = async () => undefined;
        this.flushTelemetry = async () => undefined;
    }
    endConnection() {
        unsupported();
    }
}
__decorate([
    Unsupported
], RemoteAgentService.prototype, "endConnection", null);
registerSingleton(IRemoteAgentService, RemoteAgentService, InstantiationType.Eager);
registerSingleton(ICustomEndpointTelemetryService, NullEndpointTelemetryService, InstantiationType.Eager);
let MonacoSearchService = class MonacoSearchService {
    constructor(modelService) {
        this.modelService = modelService;
        this.schemeHasFileSearchProvider = () => false;
        this.getAIName = async () => undefined;
    }
    aiTextSearch() {
        unsupported();
    }
    textSearchSplitSyncAsync() {
        unsupported();
    }
    async textSearch() {
        return {
            results: [],
            messages: []
        };
    }
    async fileSearch() {
        return {
            results: this.modelService.getModels().map((model) => ({
                resource: model.uri
            })),
            messages: []
        };
    }
    async clearCache() { }
    registerSearchResultProvider() {
        unsupported();
    }
};
__decorate([
    Unsupported
], MonacoSearchService.prototype, "aiTextSearch", null);
__decorate([
    Unsupported
], MonacoSearchService.prototype, "textSearchSplitSyncAsync", null);
__decorate([
    Unsupported
], MonacoSearchService.prototype, "registerSearchResultProvider", null);
MonacoSearchService = __decorate([
    __param(0, IModelService)
], MonacoSearchService);
registerSingleton(ISearchService, MonacoSearchService, InstantiationType.Eager);
class EditSessionIdentityService {
    constructor() {
        this.registerEditSessionIdentityProvider = () => Disposable.None;
        this.getEditSessionIdentifier = async () => undefined;
        this.provideEditSessionIdentityMatch = async () => undefined;
        this.addEditSessionIdentityCreateParticipant = () => Disposable.None;
        this.onWillCreateEditSessionIdentity = async () => { };
    }
}
registerSingleton(IEditSessionIdentityService, EditSessionIdentityService, InstantiationType.Eager);
class WorkspaceEditingService {
    addFolders() {
        unsupported();
    }
    removeFolders() {
        unsupported();
    }
    updateFolders() {
        unsupported();
    }
    enterWorkspace() {
        unsupported();
    }
    createAndEnterWorkspace() {
        unsupported();
    }
    saveAndEnterWorkspace() {
        unsupported();
    }
    copyWorkspaceSettings() {
        unsupported();
    }
    pickNewWorkspacePath() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkspaceEditingService.prototype, "addFolders", null);
__decorate([
    Unsupported
], WorkspaceEditingService.prototype, "removeFolders", null);
__decorate([
    Unsupported
], WorkspaceEditingService.prototype, "updateFolders", null);
__decorate([
    Unsupported
], WorkspaceEditingService.prototype, "enterWorkspace", null);
__decorate([
    Unsupported
], WorkspaceEditingService.prototype, "createAndEnterWorkspace", null);
__decorate([
    Unsupported
], WorkspaceEditingService.prototype, "saveAndEnterWorkspace", null);
__decorate([
    Unsupported
], WorkspaceEditingService.prototype, "copyWorkspaceSettings", null);
__decorate([
    Unsupported
], WorkspaceEditingService.prototype, "pickNewWorkspacePath", null);
registerSingleton(IWorkspaceEditingService, WorkspaceEditingService, InstantiationType.Eager);
class TimerService {
    constructor() {
        this.setPerformanceMarks = () => { };
    }
    getStartTime() {
        unsupported();
    }
    whenReady() {
        unsupported();
    }
    get perfBaseline() {
        return unsupported();
    }
    get startupMetrics() {
        return unsupported();
    }
    getPerformanceMarks() {
        unsupported();
    }
    getDuration() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TimerService.prototype, "getStartTime", null);
__decorate([
    Unsupported
], TimerService.prototype, "whenReady", null);
__decorate([
    Unsupported
], TimerService.prototype, "perfBaseline", null);
__decorate([
    Unsupported
], TimerService.prototype, "startupMetrics", null);
__decorate([
    Unsupported
], TimerService.prototype, "getPerformanceMarks", null);
__decorate([
    Unsupported
], TimerService.prototype, "getDuration", null);
registerSingleton(ITimerService, TimerService, InstantiationType.Eager);
class ExtensionsWorkbenchService {
    constructor() {
        this.getExtensionRuntimeStatus = () => undefined;
        this.onDidChangeExtensionsNotification = Event.None;
        this.getExtensionsNotification = () => undefined;
        this.shouldRequireConsentToUpdate = async () => undefined;
        this.whenInitialized = Promise.resolve();
        this.onChange = Event.None;
        this.onReset = Event.None;
        this.preferPreReleases = false;
        this.local = [];
        this.installed = [];
        this.outdated = [];
    }
    downloadVSIX() {
        unsupported();
    }
    updateAutoUpdateForAllExtensions() {
        unsupported();
    }
    openSearch() {
        unsupported();
    }
    updateAutoUpdateValue() {
        unsupported();
    }
    getResourceExtensions() {
        unsupported();
    }
    updateRunningExtensions() {
        unsupported();
    }
    togglePreRelease() {
        unsupported();
    }
    isAutoUpdateEnabledFor() {
        unsupported();
    }
    updateAutoUpdateEnablementFor() {
        unsupported();
    }
    isAutoUpdateEnabled() {
        unsupported();
    }
    getAutoUpdateValue() {
        unsupported();
    }
    updateAll() {
        unsupported();
    }
    toggleApplyExtensionToAllProfiles() {
        unsupported();
    }
    queryLocal() {
        unsupported();
    }
    queryGallery() {
        unsupported();
    }
    getExtensions() {
        unsupported();
    }
    canInstall() {
        unsupported();
    }
    install() {
        unsupported();
    }
    installInServer() {
        unsupported();
    }
    uninstall() {
        unsupported();
    }
    installVersion() {
        unsupported();
    }
    reinstall() {
        unsupported();
    }
    canSetLanguage() {
        unsupported();
    }
    setLanguage() {
        unsupported();
    }
    setEnablement() {
        unsupported();
    }
    pinExtension() {
        unsupported();
    }
    open() {
        unsupported();
    }
    checkForUpdates() {
        unsupported();
    }
    getExtensionStatus() {
        unsupported();
    }
    isExtensionIgnoredToSync() {
        unsupported();
    }
    toggleExtensionIgnoredToSync() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "downloadVSIX", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "updateAutoUpdateForAllExtensions", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "openSearch", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "updateAutoUpdateValue", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "getResourceExtensions", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "updateRunningExtensions", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "togglePreRelease", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "isAutoUpdateEnabledFor", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "updateAutoUpdateEnablementFor", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "isAutoUpdateEnabled", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "getAutoUpdateValue", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "updateAll", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "toggleApplyExtensionToAllProfiles", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "queryLocal", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "queryGallery", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "getExtensions", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "canInstall", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "install", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "installInServer", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "uninstall", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "installVersion", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "reinstall", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "canSetLanguage", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "setLanguage", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "setEnablement", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "pinExtension", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "open", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "checkForUpdates", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "getExtensionStatus", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "isExtensionIgnoredToSync", null);
__decorate([
    Unsupported
], ExtensionsWorkbenchService.prototype, "toggleExtensionIgnoredToSync", null);
registerSingleton(IExtensionsWorkbenchService, ExtensionsWorkbenchService, InstantiationType.Eager);
class ExtensionManagementServerService {
    constructor() {
        this._serviceBrand = undefined;
        this.localExtensionManagementServer = null;
        this.remoteExtensionManagementServer = null;
        this.webExtensionManagementServer = null;
    }
    getExtensionManagementServer() {
        unsupported();
    }
    getExtensionInstallLocation() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionManagementServerService.prototype, "getExtensionManagementServer", null);
__decorate([
    Unsupported
], ExtensionManagementServerService.prototype, "getExtensionInstallLocation", null);
registerSingleton(IExtensionManagementServerService, ExtensionManagementServerService, InstantiationType.Eager);
class ExtensionRecommendationsService {
    constructor() {
        this.onDidChangeRecommendations = Event.None;
        this.getAllRecommendationsWithReason = () => ({});
        this.getImportantRecommendations = async () => [];
        this.getOtherRecommendations = async () => [];
        this.getFileBasedRecommendations = () => [];
        this.getExeBasedRecommendations = async () => ({ important: [], others: [] });
        this.getConfigBasedRecommendations = async () => ({ important: [], others: [] });
        this.getWorkspaceRecommendations = async () => [];
        this.getKeymapRecommendations = () => [];
        this.getLanguageRecommendations = () => [];
        this.getRemoteRecommendations = () => [];
    }
}
registerSingleton(IExtensionRecommendationsService, ExtensionRecommendationsService, InstantiationType.Eager);
class UserDataAutoSyncService {
    constructor() {
        this.onError = Event.None;
    }
    turnOn() {
        unsupported();
    }
    turnOff() {
        unsupported();
    }
    triggerSync() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataAutoSyncService.prototype, "turnOn", null);
__decorate([
    Unsupported
], UserDataAutoSyncService.prototype, "turnOff", null);
__decorate([
    Unsupported
], UserDataAutoSyncService.prototype, "triggerSync", null);
registerSingleton(IUserDataAutoSyncService, UserDataAutoSyncService, InstantiationType.Eager);
class IgnoredExtensionsManagementService {
    constructor() {
        this.getIgnoredExtensions = () => [];
        this.hasToNeverSyncExtension = () => false;
        this.hasToAlwaysSyncExtension = () => false;
    }
    updateIgnoredExtensions() {
        unsupported();
    }
    updateSynchronizedExtensions() {
        unsupported();
    }
}
__decorate([
    Unsupported
], IgnoredExtensionsManagementService.prototype, "updateIgnoredExtensions", null);
__decorate([
    Unsupported
], IgnoredExtensionsManagementService.prototype, "updateSynchronizedExtensions", null);
registerSingleton(IIgnoredExtensionsManagementService, IgnoredExtensionsManagementService, InstantiationType.Eager);
class ExtensionRecommendationNotificationService {
    constructor() {
        this.ignoredRecommendations = [];
        this.hasToIgnoreRecommendationNotifications = () => false;
    }
    promptImportantExtensionsInstallNotification() {
        unsupported();
    }
    promptWorkspaceRecommendations() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionRecommendationNotificationService.prototype, "promptImportantExtensionsInstallNotification", null);
__decorate([
    Unsupported
], ExtensionRecommendationNotificationService.prototype, "promptWorkspaceRecommendations", null);
registerSingleton(IExtensionRecommendationNotificationService, ExtensionRecommendationNotificationService, InstantiationType.Eager);
class WebExtensionsScannerService {
    constructor() {
        this.scanSystemExtensions = async () => [];
        this.scanUserExtensions = async () => [];
        this.scanExtensionsUnderDevelopment = async () => [];
        this.scanExistingExtension = async () => null;
        this.removeExtension = async () => { };
        this.copyExtensions = async () => { };
        this.scanExtensionManifest = async () => null;
    }
    addExtension() {
        unsupported();
    }
    addExtensionFromGallery() {
        unsupported();
    }
    updateMetadata() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WebExtensionsScannerService.prototype, "addExtension", null);
__decorate([
    Unsupported
], WebExtensionsScannerService.prototype, "addExtensionFromGallery", null);
__decorate([
    Unsupported
], WebExtensionsScannerService.prototype, "updateMetadata", null);
registerSingleton(IWebExtensionsScannerService, WebExtensionsScannerService, InstantiationType.Eager);
class ExtensionsScannerService {
    constructor() {
        this.onDidChangeCache = Event.None;
    }
    get systemExtensionsLocation() {
        return unsupported();
    }
    get userExtensionsLocation() {
        return unsupported();
    }
    getTargetPlatform() {
        unsupported();
    }
    scanAllExtensions() {
        unsupported();
    }
    scanSystemExtensions() {
        unsupported();
    }
    scanUserExtensions() {
        unsupported();
    }
    scanExtensionsUnderDevelopment() {
        unsupported();
    }
    scanExistingExtension() {
        unsupported();
    }
    scanOneOrMultipleExtensions() {
        unsupported();
    }
    scanMultipleExtensions() {
        unsupported();
    }
    scanAllUserExtensions() {
        unsupported();
    }
    scanMetadata() {
        unsupported();
    }
    updateMetadata() {
        unsupported();
    }
    initializeDefaultProfileExtensions() {
        unsupported();
    }
    updateManifestMetadata() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "systemExtensionsLocation", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "userExtensionsLocation", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "getTargetPlatform", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "scanAllExtensions", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "scanSystemExtensions", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "scanUserExtensions", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "scanExtensionsUnderDevelopment", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "scanExistingExtension", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "scanOneOrMultipleExtensions", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "scanMultipleExtensions", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "scanAllUserExtensions", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "scanMetadata", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "updateMetadata", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "initializeDefaultProfileExtensions", null);
__decorate([
    Unsupported
], ExtensionsScannerService.prototype, "updateManifestMetadata", null);
registerSingleton(IExtensionsScannerService, ExtensionsScannerService, InstantiationType.Eager);
class ExtensionsProfileScannerService {
    constructor() {
        this.onAddExtensions = Event.None;
        this.onDidAddExtensions = Event.None;
        this.onRemoveExtensions = Event.None;
        this.onDidRemoveExtensions = Event.None;
    }
    scanProfileExtensions() {
        unsupported();
    }
    addExtensionsToProfile() {
        unsupported();
    }
    updateMetadata() {
        unsupported();
    }
    removeExtensionFromProfile() {
        unsupported();
    }
    removeExtensionsFromProfile() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionsProfileScannerService.prototype, "scanProfileExtensions", null);
__decorate([
    Unsupported
], ExtensionsProfileScannerService.prototype, "addExtensionsToProfile", null);
__decorate([
    Unsupported
], ExtensionsProfileScannerService.prototype, "updateMetadata", null);
__decorate([
    Unsupported
], ExtensionsProfileScannerService.prototype, "removeExtensionFromProfile", null);
__decorate([
    Unsupported
], ExtensionsProfileScannerService.prototype, "removeExtensionsFromProfile", null);
registerSingleton(IExtensionsProfileScannerService, ExtensionsProfileScannerService, InstantiationType.Eager);
class ExtensionIgnoredRecommendationsService {
    constructor() {
        this.onDidChangeIgnoredRecommendations = Event.None;
        this.ignoredRecommendations = [];
        this.onDidChangeGlobalIgnoredRecommendation = Event.None;
        this.globalIgnoredRecommendations = [];
    }
    toggleGlobalIgnoredRecommendation() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionIgnoredRecommendationsService.prototype, "toggleGlobalIgnoredRecommendation", null);
registerSingleton(IExtensionIgnoredRecommendationsService, ExtensionIgnoredRecommendationsService, InstantiationType.Eager);
class WorkspaceExtensionsConfigService {
    constructor() {
        this.onDidChangeExtensionsConfigs = Event.None;
    }
    getExtensionsConfigs() {
        unsupported();
    }
    getRecommendations() {
        unsupported();
    }
    getUnwantedRecommendations() {
        unsupported();
    }
    toggleRecommendation() {
        unsupported();
    }
    toggleUnwantedRecommendation() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkspaceExtensionsConfigService.prototype, "getExtensionsConfigs", null);
__decorate([
    Unsupported
], WorkspaceExtensionsConfigService.prototype, "getRecommendations", null);
__decorate([
    Unsupported
], WorkspaceExtensionsConfigService.prototype, "getUnwantedRecommendations", null);
__decorate([
    Unsupported
], WorkspaceExtensionsConfigService.prototype, "toggleRecommendation", null);
__decorate([
    Unsupported
], WorkspaceExtensionsConfigService.prototype, "toggleUnwantedRecommendation", null);
registerSingleton(IWorkspaceExtensionsConfigService, WorkspaceExtensionsConfigService, InstantiationType.Eager);
class WorkbenchExtensionEnablementService {
    constructor() {
        this.getEnablementStates = (extensions) => extensions.map(() => EnablementState.EnabledGlobally);
        this.onEnablementChanged = Event.None;
        this.getEnablementState = () => EnablementState.EnabledGlobally;
        this.getDependenciesEnablementStates = () => [];
        this.canChangeEnablement = () => false;
        this.canChangeWorkspaceEnablement = () => false;
        this.isEnabled = () => true;
        this.isEnabledEnablementState = () => true;
        this.isDisabledGlobally = () => false;
    }
    setEnablement() {
        unsupported();
    }
    updateExtensionsEnablementsWhenWorkspaceTrustChanges() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkbenchExtensionEnablementService.prototype, "setEnablement", null);
__decorate([
    Unsupported
], WorkbenchExtensionEnablementService.prototype, "updateExtensionsEnablementsWhenWorkspaceTrustChanges", null);
registerSingleton(IWorkbenchExtensionEnablementService, WorkbenchExtensionEnablementService, InstantiationType.Eager);
class TunnelService {
    constructor() {
        this.canChangeProtocol = false;
        this.tunnels = Promise.resolve([]);
        this.canChangePrivacy = false;
        this.privacyOptions = [];
        this.onTunnelOpened = Event.None;
        this.onTunnelClosed = Event.None;
        this.canElevate = false;
        this.hasTunnelProvider = false;
        this.onAddedTunnelProvider = Event.None;
        this.canTunnel = () => false;
        this.getExistingTunnel = async () => undefined;
        this.isPortPrivileged = () => false;
    }
    openTunnel() {
        unsupported();
    }
    setEnvironmentTunnel() {
        unsupported();
    }
    closeTunnel() {
        unsupported();
    }
    setTunnelProvider() {
        unsupported();
    }
    setTunnelFeatures() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TunnelService.prototype, "openTunnel", null);
__decorate([
    Unsupported
], TunnelService.prototype, "setEnvironmentTunnel", null);
__decorate([
    Unsupported
], TunnelService.prototype, "closeTunnel", null);
__decorate([
    Unsupported
], TunnelService.prototype, "setTunnelProvider", null);
__decorate([
    Unsupported
], TunnelService.prototype, "setTunnelFeatures", null);
registerSingleton(ITunnelService, TunnelService, InstantiationType.Eager);
class FilesConfigurationService {
    constructor() {
        this.onDidChangeAutoSaveConfiguration = Event.None;
        this.onDidChangeAutoSaveDisabled = Event.None;
        this.hasShortAutoSaveDelay = () => false;
        this.onDidChangeReadonly = Event.None;
        this.onDidChangeFilesAssociation = Event.None;
        this.onAutoSaveConfigurationChange = Event.None;
        this.onReadonlyChange = Event.None;
        this.onFilesAssociationChange = Event.None;
        this.isHotExitEnabled = true;
        this.hotExitConfiguration = undefined;
    }
    disableAutoSave() {
        unsupported();
    }
    getAutoSaveConfiguration() {
        unsupported();
    }
    getAutoSaveMode() {
        unsupported();
    }
    toggleAutoSave() {
        unsupported();
    }
    isReadonly() {
        unsupported();
    }
    updateReadonly() {
        unsupported();
    }
    preventSaveConflicts() {
        unsupported();
    }
}
__decorate([
    Unsupported
], FilesConfigurationService.prototype, "disableAutoSave", null);
__decorate([
    Unsupported
], FilesConfigurationService.prototype, "getAutoSaveConfiguration", null);
__decorate([
    Unsupported
], FilesConfigurationService.prototype, "getAutoSaveMode", null);
__decorate([
    Unsupported
], FilesConfigurationService.prototype, "toggleAutoSave", null);
__decorate([
    Unsupported
], FilesConfigurationService.prototype, "isReadonly", null);
__decorate([
    Unsupported
], FilesConfigurationService.prototype, "updateReadonly", null);
__decorate([
    Unsupported
], FilesConfigurationService.prototype, "preventSaveConflicts", null);
registerSingleton(IFilesConfigurationService, FilesConfigurationService, InstantiationType.Eager);
class UntitledTextEditorService {
    constructor() {
        this.onDidSave = Event.None;
        this.onDidCreate = Event.None;
        this.canDispose = () => true;
        this.isUntitledWithAssociatedResource = () => false;
        this.onDidChangeDirty = Event.None;
        this.onDidChangeEncoding = Event.None;
        this.onDidChangeLabel = Event.None;
        this.onWillDispose = Event.None;
        this.get = () => undefined;
        this.getValue = () => undefined;
    }
    create() {
        unsupported();
    }
    resolve() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UntitledTextEditorService.prototype, "create", null);
__decorate([
    Unsupported
], UntitledTextEditorService.prototype, "resolve", null);
registerSingleton(IUntitledTextEditorService, UntitledTextEditorService, InstantiationType.Eager);
class WorkingCopyBackupService {
    async hasBackups() {
        return false;
    }
    hasBackupSync() {
        return false;
    }
    async getBackups() {
        return [];
    }
    async resolve() {
        return undefined;
    }
    async backup() { }
    async discardBackup() { }
    async discardBackups() { }
}
registerSingleton(IWorkingCopyBackupService, WorkingCopyBackupService, InstantiationType.Eager);
class WorkingCopyService {
    constructor() {
        this.onDidRegister = Event.None;
        this.onDidUnregister = Event.None;
        this.onDidChangeDirty = Event.None;
        this.onDidChangeContent = Event.None;
        this.onDidSave = Event.None;
        this.dirtyCount = 0;
        this.dirtyWorkingCopies = [];
        this.modifiedCount = 0;
        this.modifiedWorkingCopies = [];
        this.hasDirty = false;
        this.isDirty = () => false;
        this.workingCopies = [];
        this.has = () => false;
        this.get = () => undefined;
        this.getAll = () => undefined;
    }
    registerWorkingCopy() {
        return Disposable.None;
    }
}
registerSingleton(IWorkingCopyService, WorkingCopyService, InstantiationType.Eager);
class DecorationsService {
    constructor() {
        this.onDidChangeDecorations = Event.None;
        this.getDecoration = () => undefined;
    }
    registerDecorationsProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], DecorationsService.prototype, "registerDecorationsProvider", null);
registerSingleton(IDecorationsService, DecorationsService, InstantiationType.Eager);
class ElevatedFileService {
    constructor() {
        this.isSupported = () => false;
    }
    writeFileElevated() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ElevatedFileService.prototype, "writeFileElevated", null);
registerSingleton(IElevatedFileService, ElevatedFileService, InstantiationType.Eager);
class FileDialogService {
    preferredHome() {
        unsupported();
    }
    defaultFilePath() {
        unsupported();
    }
    defaultFolderPath() {
        unsupported();
    }
    defaultWorkspacePath() {
        unsupported();
    }
    pickFileFolderAndOpen() {
        unsupported();
    }
    pickFileAndOpen() {
        unsupported();
    }
    pickFolderAndOpen() {
        unsupported();
    }
    pickWorkspaceAndOpen() {
        unsupported();
    }
    pickFileToSave() {
        unsupported();
    }
    showSaveDialog() {
        unsupported();
    }
    showSaveConfirm() {
        unsupported();
    }
    showOpenDialog() {
        unsupported();
    }
}
__decorate([
    Unsupported
], FileDialogService.prototype, "preferredHome", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "defaultFilePath", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "defaultFolderPath", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "defaultWorkspacePath", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "pickFileFolderAndOpen", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "pickFileAndOpen", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "pickFolderAndOpen", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "pickWorkspaceAndOpen", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "pickFileToSave", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "showSaveDialog", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "showSaveConfirm", null);
__decorate([
    Unsupported
], FileDialogService.prototype, "showOpenDialog", null);
registerSingleton(IFileDialogService, FileDialogService, InstantiationType.Eager);
class JSONEditingService {
    write() {
        unsupported();
    }
}
__decorate([
    Unsupported
], JSONEditingService.prototype, "write", null);
registerSingleton(IJSONEditingService, JSONEditingService, InstantiationType.Delayed);
class WorkspacesService {
    constructor() {
        this.onDidChangeRecentlyOpened = Event.None;
    }
    enterWorkspace() {
        unsupported();
    }
    createUntitledWorkspace() {
        unsupported();
    }
    deleteUntitledWorkspace() {
        unsupported();
    }
    getWorkspaceIdentifier() {
        unsupported();
    }
    addRecentlyOpened() {
        unsupported();
    }
    removeRecentlyOpened() {
        unsupported();
    }
    clearRecentlyOpened() {
        unsupported();
    }
    getRecentlyOpened() {
        unsupported();
    }
    getDirtyWorkspaces() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkspacesService.prototype, "enterWorkspace", null);
__decorate([
    Unsupported
], WorkspacesService.prototype, "createUntitledWorkspace", null);
__decorate([
    Unsupported
], WorkspacesService.prototype, "deleteUntitledWorkspace", null);
__decorate([
    Unsupported
], WorkspacesService.prototype, "getWorkspaceIdentifier", null);
__decorate([
    Unsupported
], WorkspacesService.prototype, "addRecentlyOpened", null);
__decorate([
    Unsupported
], WorkspacesService.prototype, "removeRecentlyOpened", null);
__decorate([
    Unsupported
], WorkspacesService.prototype, "clearRecentlyOpened", null);
__decorate([
    Unsupported
], WorkspacesService.prototype, "getRecentlyOpened", null);
__decorate([
    Unsupported
], WorkspacesService.prototype, "getDirtyWorkspaces", null);
registerSingleton(IWorkspacesService, WorkspacesService, InstantiationType.Delayed);
class TextEditorService {
    createTextEditor() {
        unsupported();
    }
    resolveTextEditor() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TextEditorService.prototype, "createTextEditor", null);
__decorate([
    Unsupported
], TextEditorService.prototype, "resolveTextEditor", null);
registerSingleton(ITextEditorService, TextEditorService, InstantiationType.Eager);
class EditorResolverService {
    constructor() {
        this.onDidChangeEditorRegistrations = Event.None;
        this.getEditors = () => [];
    }
    getAllUserAssociations() {
        unsupported();
    }
    getAssociationsForResource() {
        unsupported();
    }
    updateUserAssociations() {
        unsupported();
    }
    bufferChangeEvents() {
        unsupported();
    }
    registerEditor() {
        return {
            dispose: () => { }
        };
    }
    resolveEditor() {
        unsupported();
    }
}
__decorate([
    Unsupported
], EditorResolverService.prototype, "getAllUserAssociations", null);
__decorate([
    Unsupported
], EditorResolverService.prototype, "getAssociationsForResource", null);
__decorate([
    Unsupported
], EditorResolverService.prototype, "updateUserAssociations", null);
__decorate([
    Unsupported
], EditorResolverService.prototype, "bufferChangeEvents", null);
__decorate([
    Unsupported
], EditorResolverService.prototype, "resolveEditor", null);
registerSingleton(IEditorResolverService, EditorResolverService, InstantiationType.Eager);
class OutputService {
    constructor() {
        this.canSetLogLevel = () => false;
        this.getLogLevel = () => undefined;
        this.setLogLevel = () => { };
        this.onActiveOutputChannel = Event.None;
    }
    get filters() {
        return unsupported();
    }
    getChannel() {
        return undefined;
    }
    registerCompoundLogChannel() {
        unsupported();
    }
    saveOutputAs() {
        unsupported();
    }
    getChannelDescriptor() {
        return undefined;
    }
    getChannelDescriptors() {
        return [];
    }
    getActiveChannel() {
        return undefined;
    }
    async showChannel() {
    }
}
__decorate([
    Unsupported
], OutputService.prototype, "filters", null);
__decorate([
    Unsupported
], OutputService.prototype, "registerCompoundLogChannel", null);
__decorate([
    Unsupported
], OutputService.prototype, "saveOutputAs", null);
registerSingleton(IOutputService, OutputService, InstantiationType.Delayed);
class ExtensionResourceLoaderService {
    constructor() {
        this.supportsExtensionGalleryResources = false;
        this.isExtensionGalleryResource = () => false;
    }
    readExtensionResource() {
        unsupported();
    }
    getExtensionGalleryResourceURL() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionResourceLoaderService.prototype, "readExtensionResource", null);
__decorate([
    Unsupported
], ExtensionResourceLoaderService.prototype, "getExtensionGalleryResourceURL", null);
registerSingleton(IExtensionResourceLoaderService, ExtensionResourceLoaderService, InstantiationType.Eager);
class BuiltinExtensionsScannerService {
    scanBuiltinExtensions() {
        return Promise.resolve([]);
    }
}
registerSingleton(IBuiltinExtensionsScannerService, BuiltinExtensionsScannerService, InstantiationType.Eager);
class ExplorerService {
    constructor() {
        this.roots = [];
    }
    get sortOrderConfiguration() {
        return unsupported();
    }
    getContext() {
        unsupported();
    }
    hasViewFocus() {
        unsupported();
    }
    setEditable() {
        unsupported();
    }
    getEditable() {
        unsupported();
    }
    getEditableData() {
        unsupported();
    }
    isEditable() {
        unsupported();
    }
    findClosest() {
        unsupported();
    }
    findClosestRoot() {
        unsupported();
    }
    refresh() {
        unsupported();
    }
    setToCopy() {
        unsupported();
    }
    isCut() {
        unsupported();
    }
    applyBulkEdit() {
        unsupported();
    }
    select() {
        unsupported();
    }
    registerView() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExplorerService.prototype, "sortOrderConfiguration", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "getContext", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "hasViewFocus", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "setEditable", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "getEditable", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "getEditableData", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "isEditable", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "findClosest", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "findClosestRoot", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "refresh", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "setToCopy", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "isCut", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "applyBulkEdit", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "select", null);
__decorate([
    Unsupported
], ExplorerService.prototype, "registerView", null);
registerSingleton(IExplorerService, ExplorerService, InstantiationType.Delayed);
class ExtensionStorageService {
    constructor() {
        this.getExtensionState = () => undefined;
        this.getExtensionStateRaw = () => undefined;
        this.onDidChangeExtensionStorageToSync = Event.None;
        this.getKeysForSync = () => undefined;
        this.getSourceExtensionToMigrate = () => undefined;
    }
    setExtensionState() {
        unsupported();
    }
    setKeysForSync() {
        unsupported();
    }
    addToMigrationList() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionStorageService.prototype, "setExtensionState", null);
__decorate([
    Unsupported
], ExtensionStorageService.prototype, "setKeysForSync", null);
__decorate([
    Unsupported
], ExtensionStorageService.prototype, "addToMigrationList", null);
registerSingleton(IExtensionStorageService, ExtensionStorageService, InstantiationType.Delayed);
class GlobalExtensionEnablementService {
    constructor() {
        this.onDidChangeEnablement = Event.None;
    }
    getDisabledExtensions() {
        return [];
    }
    enableExtension() {
        return Promise.resolve(true);
    }
    disableExtension() {
        return Promise.resolve(true);
    }
}
registerSingleton(IGlobalExtensionEnablementService, GlobalExtensionEnablementService, InstantiationType.Delayed);
class LanguagePackService {
    async getAvailableLanguages() {
        return [];
    }
    async getInstalledLanguages() {
        return [];
    }
    async getBuiltInExtensionTranslationsUri(id, language) {
        const uri = getBuiltInExtensionTranslationsUris(language)?.[id];
        return uri != null ? URI.parse(uri) : undefined;
    }
}
registerSingleton(ILanguagePackService, LanguagePackService, InstantiationType.Delayed);
class TreeViewsDnDService {
    removeDragOperationTransfer() {
        unsupported();
    }
    addDragOperationTransfer() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TreeViewsDnDService.prototype, "removeDragOperationTransfer", null);
__decorate([
    Unsupported
], TreeViewsDnDService.prototype, "addDragOperationTransfer", null);
registerSingleton(ITreeViewsDnDService, TreeViewsDnDService, InstantiationType.Delayed);
class BreadcrumbsService {
    constructor() {
        this.getWidget = () => undefined;
    }
    register() {
        unsupported();
    }
}
__decorate([
    Unsupported
], BreadcrumbsService.prototype, "register", null);
registerSingleton(IBreadcrumbsService, BreadcrumbsService, InstantiationType.Eager);
class OutlineService {
    constructor() {
        this.onDidChange = Event.None;
        this.canCreateOutline = () => false;
        this.createOutline = async () => undefined;
    }
    registerOutlineCreator() {
        unsupported();
    }
}
__decorate([
    Unsupported
], OutlineService.prototype, "registerOutlineCreator", null);
registerSingleton(IOutlineService, OutlineService, InstantiationType.Eager);
class UpdateService {
    constructor() {
        this.onStateChange = Event.None;
        this.state = State.Uninitialized;
        this.isLatestVersion = async () => true;
    }
    checkForUpdates() {
        unsupported();
    }
    downloadUpdate() {
        unsupported();
    }
    applyUpdate() {
        unsupported();
    }
    quitAndInstall() {
        unsupported();
    }
    _applySpecificUpdate() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UpdateService.prototype, "checkForUpdates", null);
__decorate([
    Unsupported
], UpdateService.prototype, "downloadUpdate", null);
__decorate([
    Unsupported
], UpdateService.prototype, "applyUpdate", null);
__decorate([
    Unsupported
], UpdateService.prototype, "quitAndInstall", null);
__decorate([
    Unsupported
], UpdateService.prototype, "_applySpecificUpdate", null);
registerSingleton(IUpdateService, UpdateService, InstantiationType.Eager);
class StatusbarService {
    constructor() {
        this.onDidChangeEntryVisibility = Event.None;
        this.addEntry = () => ({
            dispose: () => { },
            update: () => { }
        });
        this.isEntryVisible = () => false;
        this.updateEntryVisibility = () => {
        };
        this.focus = () => {
        };
        this.focusNextEntry = () => {
        };
        this.focusPreviousEntry = () => {
        };
        this.isEntryFocused = () => false;
        this.overrideStyle = () => Disposable.None;
    }
    overrideEntry() {
        unsupported();
    }
    getPart() {
        unsupported();
    }
    createAuxiliaryStatusbarPart() {
        unsupported();
    }
    createScoped() {
        unsupported();
    }
    dispose() {
        unsupported();
    }
}
__decorate([
    Unsupported
], StatusbarService.prototype, "overrideEntry", null);
__decorate([
    Unsupported
], StatusbarService.prototype, "getPart", null);
__decorate([
    Unsupported
], StatusbarService.prototype, "createAuxiliaryStatusbarPart", null);
__decorate([
    Unsupported
], StatusbarService.prototype, "createScoped", null);
__decorate([
    Unsupported
], StatusbarService.prototype, "dispose", null);
registerSingleton(IStatusbarService, StatusbarService, InstantiationType.Eager);
class ExtensionGalleryService {
    constructor() {
        this.isEnabled = () => false;
    }
    query() {
        unsupported();
    }
    getExtensions() {
        unsupported();
    }
    isExtensionCompatible() {
        unsupported();
    }
    getCompatibleExtension() {
        unsupported();
    }
    getAllCompatibleVersions() {
        unsupported();
    }
    download() {
        unsupported();
    }
    downloadSignatureArchive() {
        unsupported();
    }
    reportStatistic() {
        unsupported();
    }
    getReadme() {
        unsupported();
    }
    getManifest() {
        unsupported();
    }
    getChangelog() {
        unsupported();
    }
    getCoreTranslation() {
        unsupported();
    }
    getExtensionsControlManifest() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "query", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "getExtensions", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "isExtensionCompatible", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "getCompatibleExtension", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "getAllCompatibleVersions", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "download", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "downloadSignatureArchive", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "reportStatistic", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "getReadme", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "getManifest", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "getChangelog", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "getCoreTranslation", null);
__decorate([
    Unsupported
], ExtensionGalleryService.prototype, "getExtensionsControlManifest", null);
registerSingleton(IExtensionGalleryService, ExtensionGalleryService, InstantiationType.Eager);
class TerminalService {
    constructor() {
        this.onAnyInstanceAddedCapabilityType = Event.None;
        this.onAnyInstanceShellTypeChanged = Event.None;
        this.onAnyInstanceData = Event.None;
        this.detachedInstances = [];
        this.onAnyInstanceDataInput = Event.None;
        this.onAnyInstanceIconChange = Event.None;
        this.onAnyInstanceMaximumDimensionsChange = Event.None;
        this.onAnyInstancePrimaryStatusChange = Event.None;
        this.onAnyInstanceProcessIdReady = Event.None;
        this.onAnyInstanceSelectionChange = Event.None;
        this.onAnyInstanceTitleChange = Event.None;
        this.onDidChangeSelection = Event.None;
        this.detachedXterms = [];
        this.whenConnected = Promise.resolve();
        this.restoredGroupCount = 0;
        this.instances = [];
        this.isProcessSupportRegistered = false;
        this.connectionState = TerminalConnectionState.Connected;
        this.defaultLocation = TerminalLocation.Panel;
        this.onDidChangeActiveGroup = Event.None;
        this.onDidDisposeGroup = Event.None;
        this.onDidCreateInstance = Event.None;
        this.onDidReceiveProcessId = Event.None;
        this.onDidChangeInstanceDimensions = Event.None;
        this.onDidMaximumDimensionsChange = Event.None;
        this.onDidRequestStartExtensionTerminal = Event.None;
        this.onDidChangeInstanceTitle = Event.None;
        this.onDidChangeInstanceIcon = Event.None;
        this.onDidChangeInstanceColor = Event.None;
        this.onDidChangeInstancePrimaryStatus = Event.None;
        this.onDidInputInstanceData = Event.None;
        this.onDidRegisterProcessSupport = Event.None;
        this.onDidChangeConnectionState = Event.None;
        this.getReconnectedTerminals = () => undefined;
        this.registerProcessSupport = () => { };
        this.activeInstance = undefined;
        this.onDidDisposeInstance = Event.None;
        this.onDidFocusInstance = Event.None;
        this.onDidChangeActiveInstance = Event.None;
        this.onDidChangeInstances = Event.None;
        this.onDidChangeInstanceCapability = Event.None;
    }
    revealTerminal() {
        unsupported();
    }
    focusInstance() {
        unsupported();
    }
    createOnInstanceCapabilityEvent() {
        return {
            event: Event.None,
            dispose() { }
        };
    }
    moveIntoNewEditor() {
        unsupported();
    }
    createOnInstanceEvent(getEvent) {
        return new DynamicListEventMultiplexer(this.instances, this.onDidCreateInstance, this.onDidDisposeInstance, getEvent);
    }
    createDetachedTerminal() {
        unsupported();
    }
    createDetachedXterm() {
        unsupported();
    }
    get configHelper() {
        return unsupported();
    }
    revealActiveTerminal() {
        unsupported();
    }
    createTerminal() {
        unsupported();
    }
    getInstanceFromId() {
        unsupported();
    }
    getInstanceFromIndex() {
        unsupported();
    }
    getActiveOrCreateInstance() {
        unsupported();
    }
    moveToEditor() {
        unsupported();
    }
    moveToTerminalView() {
        unsupported();
    }
    getPrimaryBackend() {
        unsupported();
    }
    refreshActiveGroup() {
        unsupported();
    }
    showProfileQuickPick() {
        unsupported();
    }
    setContainers() {
        unsupported();
    }
    requestStartExtensionTerminal() {
        unsupported();
    }
    isAttachedToTerminal() {
        unsupported();
    }
    getEditableData() {
        unsupported();
    }
    setEditable() {
        unsupported();
    }
    isEditable() {
        unsupported();
    }
    safeDisposeTerminal() {
        unsupported();
    }
    getDefaultInstanceHost() {
        unsupported();
    }
    getInstanceHost() {
        unsupported();
    }
    resolveLocation() {
        unsupported();
    }
    setNativeDelegate() {
        unsupported();
    }
    toggleEscapeSequenceLogging() {
        unsupported();
    }
    getEditingTerminal() {
        unsupported();
    }
    setEditingTerminal() {
        unsupported();
    }
    setActiveInstance() {
        unsupported();
    }
    focusActiveInstance() {
        unsupported();
    }
    getInstanceFromResource() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalService.prototype, "revealTerminal", null);
__decorate([
    Unsupported
], TerminalService.prototype, "focusInstance", null);
__decorate([
    Unsupported
], TerminalService.prototype, "moveIntoNewEditor", null);
__decorate([
    Unsupported
], TerminalService.prototype, "createDetachedTerminal", null);
__decorate([
    Unsupported
], TerminalService.prototype, "createDetachedXterm", null);
__decorate([
    Unsupported
], TerminalService.prototype, "configHelper", null);
__decorate([
    Unsupported
], TerminalService.prototype, "revealActiveTerminal", null);
__decorate([
    Unsupported
], TerminalService.prototype, "createTerminal", null);
__decorate([
    Unsupported
], TerminalService.prototype, "getInstanceFromId", null);
__decorate([
    Unsupported
], TerminalService.prototype, "getInstanceFromIndex", null);
__decorate([
    Unsupported
], TerminalService.prototype, "getActiveOrCreateInstance", null);
__decorate([
    Unsupported
], TerminalService.prototype, "moveToEditor", null);
__decorate([
    Unsupported
], TerminalService.prototype, "moveToTerminalView", null);
__decorate([
    Unsupported
], TerminalService.prototype, "getPrimaryBackend", null);
__decorate([
    Unsupported
], TerminalService.prototype, "refreshActiveGroup", null);
__decorate([
    Unsupported
], TerminalService.prototype, "showProfileQuickPick", null);
__decorate([
    Unsupported
], TerminalService.prototype, "setContainers", null);
__decorate([
    Unsupported
], TerminalService.prototype, "requestStartExtensionTerminal", null);
__decorate([
    Unsupported
], TerminalService.prototype, "isAttachedToTerminal", null);
__decorate([
    Unsupported
], TerminalService.prototype, "getEditableData", null);
__decorate([
    Unsupported
], TerminalService.prototype, "setEditable", null);
__decorate([
    Unsupported
], TerminalService.prototype, "isEditable", null);
__decorate([
    Unsupported
], TerminalService.prototype, "safeDisposeTerminal", null);
__decorate([
    Unsupported
], TerminalService.prototype, "getDefaultInstanceHost", null);
__decorate([
    Unsupported
], TerminalService.prototype, "getInstanceHost", null);
__decorate([
    Unsupported
], TerminalService.prototype, "resolveLocation", null);
__decorate([
    Unsupported
], TerminalService.prototype, "setNativeDelegate", null);
__decorate([
    Unsupported
], TerminalService.prototype, "toggleEscapeSequenceLogging", null);
__decorate([
    Unsupported
], TerminalService.prototype, "getEditingTerminal", null);
__decorate([
    Unsupported
], TerminalService.prototype, "setEditingTerminal", null);
__decorate([
    Unsupported
], TerminalService.prototype, "setActiveInstance", null);
__decorate([
    Unsupported
], TerminalService.prototype, "focusActiveInstance", null);
__decorate([
    Unsupported
], TerminalService.prototype, "getInstanceFromResource", null);
registerSingleton(ITerminalService, TerminalService, InstantiationType.Delayed);
class TerminalConfigurationService {
    constructor() {
        this.onConfigChanged = Event.None;
    }
    get config() {
        return unsupported();
    }
    setPanelContainer() {
        unsupported();
    }
    configFontIsMonospace() {
        unsupported();
    }
    getFont() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalConfigurationService.prototype, "config", null);
__decorate([
    Unsupported
], TerminalConfigurationService.prototype, "setPanelContainer", null);
__decorate([
    Unsupported
], TerminalConfigurationService.prototype, "configFontIsMonospace", null);
__decorate([
    Unsupported
], TerminalConfigurationService.prototype, "getFont", null);
registerSingleton(ITerminalConfigurationService, TerminalConfigurationService, InstantiationType.Delayed);
class TerminalEditorService {
    constructor() {
        this.instances = [];
        this.activeInstance = undefined;
        this.onDidDisposeInstance = Event.None;
        this.onDidFocusInstance = Event.None;
        this.onDidChangeActiveInstance = Event.None;
        this.onDidChangeInstances = Event.None;
        this.onDidChangeInstanceCapability = Event.None;
    }
    focusInstance() {
        unsupported();
    }
    openEditor() {
        unsupported();
    }
    detachActiveEditorInstance() {
        unsupported();
    }
    detachInstance() {
        unsupported();
    }
    splitInstance() {
        unsupported();
    }
    revealActiveEditor() {
        unsupported();
    }
    resolveResource() {
        unsupported();
    }
    reviveInput() {
        unsupported();
    }
    getInputFromResource() {
        unsupported();
    }
    setActiveInstance() {
        unsupported();
    }
    focusActiveInstance() {
        unsupported();
    }
    getInstanceFromResource() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalEditorService.prototype, "focusInstance", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "openEditor", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "detachActiveEditorInstance", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "detachInstance", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "splitInstance", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "revealActiveEditor", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "resolveResource", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "reviveInput", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "getInputFromResource", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "setActiveInstance", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "focusActiveInstance", null);
__decorate([
    Unsupported
], TerminalEditorService.prototype, "getInstanceFromResource", null);
registerSingleton(ITerminalEditorService, TerminalEditorService, InstantiationType.Delayed);
class TerminalGroupService {
    constructor() {
        this.lastAccessedMenu = 'inline-tab';
        this.instances = [];
        this.groups = [];
        this.activeGroup = undefined;
        this.activeGroupIndex = 0;
        this.onDidChangeActiveGroup = Event.None;
        this.onDidDisposeGroup = Event.None;
        this.onDidChangeGroups = Event.None;
        this.onDidShow = Event.None;
        this.onDidChangePanelOrientation = Event.None;
        this.onDidDisposeInstance = Event.None;
        this.onDidFocusInstance = Event.None;
        this.onDidChangeActiveInstance = Event.None;
        this.onDidChangeInstances = Event.None;
        this.onDidChangeInstanceCapability = Event.None;
    }
    focusInstance() {
        unsupported();
    }
    createGroup() {
        unsupported();
    }
    getGroupForInstance() {
        unsupported();
    }
    moveGroup() {
        unsupported();
    }
    moveGroupToEnd() {
        unsupported();
    }
    moveInstance() {
        unsupported();
    }
    unsplitInstance() {
        unsupported();
    }
    joinInstances() {
        unsupported();
    }
    instanceIsSplit() {
        unsupported();
    }
    getGroupLabels() {
        unsupported();
    }
    setActiveGroupByIndex() {
        unsupported();
    }
    setActiveGroupToNext() {
        unsupported();
    }
    setActiveGroupToPrevious() {
        unsupported();
    }
    setActiveInstanceByIndex() {
        unsupported();
    }
    setContainer() {
        unsupported();
    }
    showPanel() {
        unsupported();
    }
    hidePanel() {
        unsupported();
    }
    focusTabs() {
        unsupported();
    }
    focusHover() {
        unsupported();
    }
    showTabs() {
        unsupported();
    }
    updateVisibility() {
        unsupported();
    }
    setActiveInstance() {
        unsupported();
    }
    focusActiveInstance() {
        unsupported();
    }
    getInstanceFromResource() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalGroupService.prototype, "focusInstance", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "createGroup", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "getGroupForInstance", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "moveGroup", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "moveGroupToEnd", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "moveInstance", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "unsplitInstance", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "joinInstances", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "instanceIsSplit", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "getGroupLabels", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "setActiveGroupByIndex", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "setActiveGroupToNext", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "setActiveGroupToPrevious", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "setActiveInstanceByIndex", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "setContainer", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "showPanel", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "hidePanel", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "focusTabs", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "focusHover", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "showTabs", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "updateVisibility", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "setActiveInstance", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "focusActiveInstance", null);
__decorate([
    Unsupported
], TerminalGroupService.prototype, "getInstanceFromResource", null);
registerSingleton(ITerminalGroupService, TerminalGroupService, InstantiationType.Delayed);
class TerminalInstanceService {
    constructor() {
        this.onDidRegisterBackend = Event.None;
        this.getRegisteredBackends = () => [].values();
        this.onDidCreateInstance = Event.None;
    }
    convertProfileToShellLaunchConfig() {
        unsupported();
    }
    createInstance() {
        unsupported();
    }
    getBackend() {
        unsupported();
    }
    didRegisterBackend() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalInstanceService.prototype, "convertProfileToShellLaunchConfig", null);
__decorate([
    Unsupported
], TerminalInstanceService.prototype, "createInstance", null);
__decorate([
    Unsupported
], TerminalInstanceService.prototype, "getBackend", null);
__decorate([
    Unsupported
], TerminalInstanceService.prototype, "didRegisterBackend", null);
registerSingleton(ITerminalInstanceService, TerminalInstanceService, InstantiationType.Delayed);
class TerminalProfileService {
    constructor() {
        this.availableProfiles = [];
        this.contributedProfiles = [];
        this.profilesReady = Promise.resolve();
        this.getDefaultProfileName = () => undefined;
        this.getDefaultProfile = () => undefined;
        this.onDidChangeAvailableProfiles = Event.None;
    }
    getPlatformKey() {
        unsupported();
    }
    refreshAvailableProfiles() {
        unsupported();
    }
    getContributedDefaultProfile() {
        unsupported();
    }
    registerContributedProfile() {
        unsupported();
    }
    getContributedProfileProvider() {
        unsupported();
    }
    registerTerminalProfileProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalProfileService.prototype, "getPlatformKey", null);
__decorate([
    Unsupported
], TerminalProfileService.prototype, "refreshAvailableProfiles", null);
__decorate([
    Unsupported
], TerminalProfileService.prototype, "getContributedDefaultProfile", null);
__decorate([
    Unsupported
], TerminalProfileService.prototype, "registerContributedProfile", null);
__decorate([
    Unsupported
], TerminalProfileService.prototype, "getContributedProfileProvider", null);
__decorate([
    Unsupported
], TerminalProfileService.prototype, "registerTerminalProfileProvider", null);
registerSingleton(ITerminalProfileService, TerminalProfileService, InstantiationType.Delayed);
class TerminalLogService {
    constructor() {
        this.onDidChangeLogLevel = Event.None;
    }
    getLevel() {
        unsupported();
    }
    setLevel() {
        unsupported();
    }
    trace() {
        unsupported();
    }
    debug() {
        unsupported();
    }
    info() {
        unsupported();
    }
    warn() {
        unsupported();
    }
    error() {
        unsupported();
    }
    flush() {
        unsupported();
    }
    dispose() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalLogService.prototype, "getLevel", null);
__decorate([
    Unsupported
], TerminalLogService.prototype, "setLevel", null);
__decorate([
    Unsupported
], TerminalLogService.prototype, "trace", null);
__decorate([
    Unsupported
], TerminalLogService.prototype, "debug", null);
__decorate([
    Unsupported
], TerminalLogService.prototype, "info", null);
__decorate([
    Unsupported
], TerminalLogService.prototype, "warn", null);
__decorate([
    Unsupported
], TerminalLogService.prototype, "error", null);
__decorate([
    Unsupported
], TerminalLogService.prototype, "flush", null);
__decorate([
    Unsupported
], TerminalLogService.prototype, "dispose", null);
registerSingleton(ITerminalLogService, TerminalLogService, InstantiationType.Delayed);
class TerminalLinkProviderService {
    constructor() {
        this.linkProviders = new Set([]);
        this.onDidAddLinkProvider = Event.None;
        this.onDidRemoveLinkProvider = Event.None;
    }
    registerLinkProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalLinkProviderService.prototype, "registerLinkProvider", null);
registerSingleton(ITerminalLinkProviderService, TerminalLinkProviderService, InstantiationType.Delayed);
class TerminalContributionService {
    constructor() {
        this.terminalProfiles = [];
    }
}
registerSingleton(ITerminalContributionService, TerminalContributionService, InstantiationType.Delayed);
class TerminalProfileResolverService {
    constructor() {
        this.getDefaultProfile = async () => ({
            profileName: 'bash',
            path: '/bin/bash',
            isDefault: true
        });
    }
    resolveIcon() {
        unsupported();
    }
    resolveShellLaunchConfig() {
        unsupported();
    }
    getDefaultShell() {
        unsupported();
    }
    getDefaultShellArgs() {
        unsupported();
    }
    getDefaultIcon() {
        unsupported();
    }
    getEnvironment() {
        unsupported();
    }
    createProfileFromShellAndShellArgs() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalProfileResolverService.prototype, "resolveIcon", null);
__decorate([
    Unsupported
], TerminalProfileResolverService.prototype, "resolveShellLaunchConfig", null);
__decorate([
    Unsupported
], TerminalProfileResolverService.prototype, "getDefaultShell", null);
__decorate([
    Unsupported
], TerminalProfileResolverService.prototype, "getDefaultShellArgs", null);
__decorate([
    Unsupported
], TerminalProfileResolverService.prototype, "getDefaultIcon", null);
__decorate([
    Unsupported
], TerminalProfileResolverService.prototype, "getEnvironment", null);
__decorate([
    Unsupported
], TerminalProfileResolverService.prototype, "createProfileFromShellAndShellArgs", null);
registerSingleton(ITerminalProfileResolverService, TerminalProfileResolverService, InstantiationType.Delayed);
class EnvironmentVariableService {
    constructor() {
        this.collections = new Map();
        this.onDidChangeCollections = Event.None;
        this.set = () => { };
        this.delete = () => { };
    }
    get mergedCollection() {
        return unsupported();
    }
}
__decorate([
    Unsupported
], EnvironmentVariableService.prototype, "mergedCollection", null);
registerSingleton(IEnvironmentVariableService, EnvironmentVariableService, InstantiationType.Delayed);
class TerminalQuickFixService {
    constructor() {
        this.onDidRegisterProvider = Event.None;
        this.onDidRegisterCommandSelector = Event.None;
        this.onDidUnregisterProvider = Event.None;
        this.extensionQuickFixes = Promise.resolve([]);
        this.providers = new Map();
    }
    registerQuickFixProvider() {
        unsupported();
    }
    registerCommandSelector() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalQuickFixService.prototype, "registerQuickFixProvider", null);
__decorate([
    Unsupported
], TerminalQuickFixService.prototype, "registerCommandSelector", null);
registerSingleton(ITerminalQuickFixService, TerminalQuickFixService, InstantiationType.Delayed);
class UserDataSyncWorkbenchService {
    constructor() {
        this.onDidTurnOnSync = Event.None;
        this.enabled = false;
        this.authenticationProviders = [];
        this.all = [];
        this.current = undefined;
        this.accountStatus = AccountStatus.Unavailable;
        this.onDidChangeAccountStatus = Event.None;
    }
    turnOn() {
        unsupported();
    }
    turnoff() {
        unsupported();
    }
    signIn() {
        unsupported();
    }
    resetSyncedData() {
        unsupported();
    }
    showSyncActivity() {
        unsupported();
    }
    syncNow() {
        unsupported();
    }
    synchroniseUserDataSyncStoreType() {
        unsupported();
    }
    showConflicts() {
        unsupported();
    }
    accept() {
        unsupported();
    }
    getAllLogResources() {
        unsupported();
    }
    downloadSyncActivity() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "turnOn", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "turnoff", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "signIn", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "resetSyncedData", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "showSyncActivity", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "syncNow", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "synchroniseUserDataSyncStoreType", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "showConflicts", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "accept", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "getAllLogResources", null);
__decorate([
    Unsupported
], UserDataSyncWorkbenchService.prototype, "downloadSyncActivity", null);
registerSingleton(IUserDataSyncWorkbenchService, UserDataSyncWorkbenchService, InstantiationType.Delayed);
class UserDataSyncEnablementService {
    constructor() {
        this.onDidChangeEnablement = Event.None;
        this.isEnabled = () => false;
        this.canToggleEnablement = () => false;
        this.onDidChangeResourceEnablement = Event.None;
        this.isResourceEnabled = () => false;
        this.getResourceSyncStateVersion = () => undefined;
    }
    setEnablement() {
        unsupported();
    }
    setResourceEnablement() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncEnablementService.prototype, "setEnablement", null);
__decorate([
    Unsupported
], UserDataSyncEnablementService.prototype, "setResourceEnablement", null);
registerSingleton(IUserDataSyncEnablementService, UserDataSyncEnablementService, InstantiationType.Delayed);
class KeybindingEditingService {
    addKeybinding() {
        unsupported();
    }
    editKeybinding() {
        unsupported();
    }
    removeKeybinding() {
        unsupported();
    }
    resetKeybinding() {
        unsupported();
    }
}
__decorate([
    Unsupported
], KeybindingEditingService.prototype, "addKeybinding", null);
__decorate([
    Unsupported
], KeybindingEditingService.prototype, "editKeybinding", null);
__decorate([
    Unsupported
], KeybindingEditingService.prototype, "removeKeybinding", null);
__decorate([
    Unsupported
], KeybindingEditingService.prototype, "resetKeybinding", null);
registerSingleton(IKeybindingEditingService, KeybindingEditingService, InstantiationType.Delayed);
class PreferencesSearchService {
    getLocalSearchProvider() {
        unsupported();
    }
    getRemoteSearchProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], PreferencesSearchService.prototype, "getLocalSearchProvider", null);
__decorate([
    Unsupported
], PreferencesSearchService.prototype, "getRemoteSearchProvider", null);
registerSingleton(IPreferencesSearchService, PreferencesSearchService, InstantiationType.Delayed);
class NotebookService {
    constructor() {
        this.tryGetDataProviderSync = () => undefined;
        this.canResolve = async () => false;
        this.onAddViewType = Event.None;
        this.onWillRemoveViewType = Event.None;
        this.onDidChangeOutputRenderers = Event.None;
        this.onWillAddNotebookDocument = Event.None;
        this.onDidAddNotebookDocument = Event.None;
        this.onWillRemoveNotebookDocument = Event.None;
        this.onDidRemoveNotebookDocument = Event.None;
        this.getViewTypeProvider = () => undefined;
        this.getRendererInfo = () => undefined;
        this.getRenderers = () => [];
        this.getNotebookTextModel = () => undefined;
        this.listNotebookDocuments = () => [];
        this.getContributedNotebookType = () => undefined;
        this.getContributedNotebookTypes = () => [];
        this.getNotebookProviderResourceRoots = () => [];
    }
    createNotebookTextDocumentSnapshot() {
        unsupported();
    }
    restoreNotebookTextModelFromSnapshot() {
        unsupported();
    }
    hasSupportedNotebooks() {
        unsupported();
    }
    registerNotebookSerializer() {
        unsupported();
    }
    withNotebookDataProvider() {
        unsupported();
    }
    getOutputMimeTypeInfo() {
        unsupported();
    }
    getStaticPreloads() {
        unsupported();
    }
    updateMimePreferredRenderer() {
        unsupported();
    }
    saveMimeDisplayOrder() {
        unsupported();
    }
    createNotebookTextModel() {
        unsupported();
    }
    getNotebookTextModels() {
        unsupported();
    }
    registerContributedNotebookType() {
        unsupported();
    }
    setToCopy() {
        unsupported();
    }
    getToCopy() {
        unsupported();
    }
    clearEditorCache() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookService.prototype, "createNotebookTextDocumentSnapshot", null);
__decorate([
    Unsupported
], NotebookService.prototype, "restoreNotebookTextModelFromSnapshot", null);
__decorate([
    Unsupported
], NotebookService.prototype, "hasSupportedNotebooks", null);
__decorate([
    Unsupported
], NotebookService.prototype, "registerNotebookSerializer", null);
__decorate([
    Unsupported
], NotebookService.prototype, "withNotebookDataProvider", null);
__decorate([
    Unsupported
], NotebookService.prototype, "getOutputMimeTypeInfo", null);
__decorate([
    Unsupported
], NotebookService.prototype, "getStaticPreloads", null);
__decorate([
    Unsupported
], NotebookService.prototype, "updateMimePreferredRenderer", null);
__decorate([
    Unsupported
], NotebookService.prototype, "saveMimeDisplayOrder", null);
__decorate([
    Unsupported
], NotebookService.prototype, "createNotebookTextModel", null);
__decorate([
    Unsupported
], NotebookService.prototype, "getNotebookTextModels", null);
__decorate([
    Unsupported
], NotebookService.prototype, "registerContributedNotebookType", null);
__decorate([
    Unsupported
], NotebookService.prototype, "setToCopy", null);
__decorate([
    Unsupported
], NotebookService.prototype, "getToCopy", null);
__decorate([
    Unsupported
], NotebookService.prototype, "clearEditorCache", null);
registerSingleton(INotebookService, NotebookService, InstantiationType.Delayed);
class ReplaceService {
    replace() {
        unsupported();
    }
    openReplacePreview() {
        unsupported();
    }
    updateReplacePreview() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ReplaceService.prototype, "replace", null);
__decorate([
    Unsupported
], ReplaceService.prototype, "openReplacePreview", null);
__decorate([
    Unsupported
], ReplaceService.prototype, "updateReplacePreview", null);
registerSingleton(IReplaceService, ReplaceService, InstantiationType.Delayed);
class SearchHistoryService {
    constructor() {
        this.onDidClearHistory = Event.None;
    }
    clearHistory() {
        unsupported();
    }
    load() {
        unsupported();
    }
    save() {
        unsupported();
    }
}
__decorate([
    Unsupported
], SearchHistoryService.prototype, "clearHistory", null);
__decorate([
    Unsupported
], SearchHistoryService.prototype, "load", null);
__decorate([
    Unsupported
], SearchHistoryService.prototype, "save", null);
registerSingleton(ISearchHistoryService, SearchHistoryService, InstantiationType.Delayed);
class NotebookEditorService {
    constructor() {
        this.retrieveExistingWidgetFromURI = () => undefined;
        this.retrieveAllExistingWidgets = () => [];
        this.onDidAddNotebookEditor = Event.None;
        this.onDidRemoveNotebookEditor = Event.None;
        this.getNotebookEditor = () => undefined;
        this.listNotebookEditors = () => [];
    }
    updateReplContextKey() {
        unsupported();
    }
    retrieveWidget() {
        unsupported();
    }
    addNotebookEditor() {
        unsupported();
    }
    removeNotebookEditor() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookEditorService.prototype, "updateReplContextKey", null);
__decorate([
    Unsupported
], NotebookEditorService.prototype, "retrieveWidget", null);
__decorate([
    Unsupported
], NotebookEditorService.prototype, "addNotebookEditor", null);
__decorate([
    Unsupported
], NotebookEditorService.prototype, "removeNotebookEditor", null);
registerSingleton(INotebookEditorService, NotebookEditorService, InstantiationType.Delayed);
class SearchWorkbenchService {
    get searchModel() {
        return unsupported();
    }
}
__decorate([
    Unsupported
], SearchWorkbenchService.prototype, "searchModel", null);
registerSingleton(ISearchViewModelWorkbenchService, SearchWorkbenchService, InstantiationType.Delayed);
class NotebookEditorModelResolverService {
    constructor() {
        this.onDidSaveNotebook = Event.None;
        this.onDidChangeDirty = Event.None;
        this.onWillFailWithConflict = Event.None;
    }
    createUntitledNotebookTextModel() {
        unsupported();
    }
    isDirty() {
        unsupported();
    }
    resolve() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookEditorModelResolverService.prototype, "createUntitledNotebookTextModel", null);
__decorate([
    Unsupported
], NotebookEditorModelResolverService.prototype, "isDirty", null);
__decorate([
    Unsupported
], NotebookEditorModelResolverService.prototype, "resolve", null);
registerSingleton(INotebookEditorModelResolverService, NotebookEditorModelResolverService, InstantiationType.Delayed);
class WorkingCopyEditorService {
    constructor() {
        this.onDidRegisterHandler = Event.None;
        this.registerHandler = () => Disposable.None;
        this.findEditor = () => undefined;
    }
}
registerSingleton(IWorkingCopyEditorService, WorkingCopyEditorService, InstantiationType.Delayed);
class UserActivityService {
    constructor() {
        this.isActive = false;
        this.onDidChangeIsActive = Event.None;
    }
    markActive() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserActivityService.prototype, "markActive", null);
registerSingleton(IUserActivityService, UserActivityService, InstantiationType.Delayed);
class CanonicalUriService {
    registerCanonicalUriProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], CanonicalUriService.prototype, "registerCanonicalUriProvider", null);
registerSingleton(ICanonicalUriService, CanonicalUriService, InstantiationType.Delayed);
class ExtensionStatusBarItemService {
    constructor() {
        this.onDidChange = Event.None;
    }
    setOrUpdateEntry() {
        return StatusBarUpdateKind.DidUpdate;
    }
    unsetEntry() { }
    getEntries() {
        return [];
    }
}
registerSingleton(IExtensionStatusBarItemService, ExtensionStatusBarItemService, InstantiationType.Delayed);
class WorkbenchAssignmentService {
    constructor() {
        this.getCurrentExperiments = async () => [];
        this.getTreatment = async () => undefined;
    }
}
registerSingleton(IWorkbenchAssignmentService, WorkbenchAssignmentService, InstantiationType.Delayed);
class ChatService {
    constructor() {
        this.isEnabled = () => false;
        this.onDidSubmitAgent = Event.None;
        this.hasSessions = () => false;
        this.onDidDisposeSession = Event.None;
        this.transferredSessionData = undefined;
        this.onDidSubmitSlashCommand = Event.None;
        this.getSessionId = () => undefined;
        this.transferredSessionId = undefined;
        this.getProviderInfos = () => [];
        this.getSession = () => undefined;
        this.getOrRestoreSession = () => undefined;
        this.loadSessionFromContent = () => undefined;
        this.getHistory = () => [];
        this.onDidPerformUserAction = Event.None;
        this.onDidSubmitRequest = Event.None;
    }
    setChatSessionTitle() {
        unsupported();
    }
    adoptRequest() {
        unsupported();
    }
    resendRequest() {
        unsupported();
    }
    clearAllHistoryEntries() {
        unsupported();
    }
    transferChatSession() {
        unsupported();
    }
    registerSlashCommandProvider() {
        unsupported();
    }
    startSession() {
        unsupported();
    }
    sendRequest() {
        unsupported();
    }
    removeRequest() {
        unsupported();
    }
    cancelCurrentRequestForSession() {
        unsupported();
    }
    getSlashCommands() {
        unsupported();
    }
    clearSession() {
        unsupported();
    }
    addRequest() {
        unsupported();
    }
    addCompleteRequest() {
        unsupported();
    }
    sendRequestToProvider() {
        unsupported();
    }
    removeHistoryEntry() {
        unsupported();
    }
    notifyUserAction() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ChatService.prototype, "setChatSessionTitle", null);
__decorate([
    Unsupported
], ChatService.prototype, "adoptRequest", null);
__decorate([
    Unsupported
], ChatService.prototype, "resendRequest", null);
__decorate([
    Unsupported
], ChatService.prototype, "clearAllHistoryEntries", null);
__decorate([
    Unsupported
], ChatService.prototype, "transferChatSession", null);
__decorate([
    Unsupported
], ChatService.prototype, "registerSlashCommandProvider", null);
__decorate([
    Unsupported
], ChatService.prototype, "startSession", null);
__decorate([
    Unsupported
], ChatService.prototype, "sendRequest", null);
__decorate([
    Unsupported
], ChatService.prototype, "removeRequest", null);
__decorate([
    Unsupported
], ChatService.prototype, "cancelCurrentRequestForSession", null);
__decorate([
    Unsupported
], ChatService.prototype, "getSlashCommands", null);
__decorate([
    Unsupported
], ChatService.prototype, "clearSession", null);
__decorate([
    Unsupported
], ChatService.prototype, "addRequest", null);
__decorate([
    Unsupported
], ChatService.prototype, "addCompleteRequest", null);
__decorate([
    Unsupported
], ChatService.prototype, "sendRequestToProvider", null);
__decorate([
    Unsupported
], ChatService.prototype, "removeHistoryEntry", null);
__decorate([
    Unsupported
], ChatService.prototype, "notifyUserAction", null);
registerSingleton(IChatService, ChatService, InstantiationType.Delayed);
class ChatMarkdownAnchorService {
    constructor() {
        this.lastFocusedAnchor = undefined;
    }
    register() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ChatMarkdownAnchorService.prototype, "register", null);
registerSingleton(IChatMarkdownAnchorService, ChatMarkdownAnchorService, InstantiationType.Delayed);
class LanguageModelStatsService {
    update() {
        unsupported();
    }
}
__decorate([
    Unsupported
], LanguageModelStatsService.prototype, "update", null);
registerSingleton(ILanguageModelStatsService, LanguageModelStatsService, InstantiationType.Delayed);
class QuickChatService {
    constructor() {
        this.focused = false;
        this.onDidClose = Event.None;
        this.enabled = false;
    }
    toggle() {
        unsupported();
    }
    focus() {
        unsupported();
    }
    open() {
        unsupported();
    }
    close() {
        unsupported();
    }
    openInChatView() {
        unsupported();
    }
}
__decorate([
    Unsupported
], QuickChatService.prototype, "toggle", null);
__decorate([
    Unsupported
], QuickChatService.prototype, "focus", null);
__decorate([
    Unsupported
], QuickChatService.prototype, "open", null);
__decorate([
    Unsupported
], QuickChatService.prototype, "close", null);
__decorate([
    Unsupported
], QuickChatService.prototype, "openInChatView", null);
registerSingleton(IQuickChatService, QuickChatService, InstantiationType.Delayed);
class QuickChatAgentService {
    constructor() {
        this._serviceBrand = undefined;
        this.onDidChangeToolsAgentModeEnabled = Event.None;
        this.toolsAgentModeEnabled = false;
        this.hasChatParticipantDetectionProviders = () => false;
        this.agentHasDupeName = () => false;
        this.getContributedDefaultAgent = () => undefined;
        this.getActivatedAgents = () => [];
        this.getAgentsByName = () => [];
        this.getDefaultAgent = () => undefined;
        this.onDidChangeAgents = Event.None;
    }
    toggleToolsAgentMode() {
        unsupported();
    }
    setRequestPaused() {
        unsupported();
    }
    registerChatParticipantDetectionProvider() {
        unsupported();
    }
    detectAgentOrCommand() {
        unsupported();
    }
    getChatTitle() {
        unsupported();
    }
    registerAgentCompletionProvider() {
        unsupported();
    }
    getAgentCompletionItems() {
        unsupported();
    }
    getAgentByFullyQualifiedId() {
        unsupported();
    }
    registerAgentImplementation() {
        unsupported();
    }
    registerDynamicAgent() {
        unsupported();
    }
    getFollowups() {
        unsupported();
    }
    getSecondaryAgent() {
        unsupported();
    }
    updateAgent() {
        unsupported();
    }
    registerAgentData() {
        unsupported();
    }
    registerAgentCallback() {
        unsupported();
    }
    registerAgent() {
        unsupported();
    }
    invokeAgent() {
        unsupported();
    }
    getAgents() {
        unsupported();
    }
    getAgent() {
        unsupported();
    }
    hasAgent() {
        unsupported();
    }
}
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "toggleToolsAgentMode", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "setRequestPaused", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "registerChatParticipantDetectionProvider", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "detectAgentOrCommand", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "getChatTitle", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "registerAgentCompletionProvider", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "getAgentCompletionItems", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "getAgentByFullyQualifiedId", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "registerAgentImplementation", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "registerDynamicAgent", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "getFollowups", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "getSecondaryAgent", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "updateAgent", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "registerAgentData", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "registerAgentCallback", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "registerAgent", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "invokeAgent", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "getAgents", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "getAgent", null);
__decorate([
    Unsupported
], QuickChatAgentService.prototype, "hasAgent", null);
registerSingleton(IChatAgentService, QuickChatAgentService, InstantiationType.Delayed);
class ChatAgentNameService {
    getAgentNameRestriction() {
        return true;
    }
}
registerSingleton(IChatAgentNameService, ChatAgentNameService, InstantiationType.Delayed);
class EmbedderTerminalService {
    constructor() {
        this.onDidCreateTerminal = Event.None;
    }
    createTerminal() {
        unsupported();
    }
}
__decorate([
    Unsupported
], EmbedderTerminalService.prototype, "createTerminal", null);
registerSingleton(IEmbedderTerminalService, EmbedderTerminalService, InstantiationType.Delayed);
class CustomEditorService {
    constructor() {
        this.registerCustomEditorCapabilities = () => Disposable.None;
        this.getCustomEditorCapabilities = () => undefined;
    }
    get models() {
        return unsupported();
    }
    getCustomEditor() {
        unsupported();
    }
    getAllCustomEditors() {
        unsupported();
    }
    getContributedCustomEditors() {
        unsupported();
    }
    getUserConfiguredCustomEditors() {
        unsupported();
    }
}
__decorate([
    Unsupported
], CustomEditorService.prototype, "models", null);
__decorate([
    Unsupported
], CustomEditorService.prototype, "getCustomEditor", null);
__decorate([
    Unsupported
], CustomEditorService.prototype, "getAllCustomEditors", null);
__decorate([
    Unsupported
], CustomEditorService.prototype, "getContributedCustomEditors", null);
__decorate([
    Unsupported
], CustomEditorService.prototype, "getUserConfiguredCustomEditors", null);
registerSingleton(ICustomEditorService, CustomEditorService, InstantiationType.Delayed);
class WebviewService {
    constructor() {
        this.webviews = [];
        this.onDidChangeActiveWebview = Event.None;
    }
    createWebviewElement() {
        unsupported();
    }
    createWebviewOverlay() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WebviewService.prototype, "createWebviewElement", null);
__decorate([
    Unsupported
], WebviewService.prototype, "createWebviewOverlay", null);
registerSingleton(IWebviewService, WebviewService, InstantiationType.Delayed);
class WebviewViewService {
    constructor() {
        this.onNewResolverRegistered = Event.None;
    }
    register() {
        unsupported();
    }
    resolve() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WebviewViewService.prototype, "register", null);
__decorate([
    Unsupported
], WebviewViewService.prototype, "resolve", null);
registerSingleton(IWebviewViewService, WebviewViewService, InstantiationType.Delayed);
class LocaleService {
    setLocale() {
        unsupported();
    }
    clearLocalePreference() {
        return Promise.resolve();
    }
}
__decorate([
    Unsupported
], LocaleService.prototype, "setLocale", null);
registerSingleton(ILocaleService, LocaleService, InstantiationType.Delayed);
class WebviewWorkbenchService {
    constructor() {
        this.onDidChangeActiveWebviewEditor = Event.None;
        this.registerResolver = () => Disposable.None;
    }
    get iconManager() {
        return unsupported();
    }
    openWebview() {
        unsupported();
    }
    openRevivedWebview() {
        unsupported();
    }
    revealWebview() {
        unsupported();
    }
    shouldPersist() {
        unsupported();
    }
    resolveWebview() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WebviewWorkbenchService.prototype, "iconManager", null);
__decorate([
    Unsupported
], WebviewWorkbenchService.prototype, "openWebview", null);
__decorate([
    Unsupported
], WebviewWorkbenchService.prototype, "openRevivedWebview", null);
__decorate([
    Unsupported
], WebviewWorkbenchService.prototype, "revealWebview", null);
__decorate([
    Unsupported
], WebviewWorkbenchService.prototype, "shouldPersist", null);
__decorate([
    Unsupported
], WebviewWorkbenchService.prototype, "resolveWebview", null);
registerSingleton(IWebviewWorkbenchService, WebviewWorkbenchService, InstantiationType.Delayed);
class RemoteAuthorityResolverService {
    constructor() {
        this.onDidChangeConnectionData = Event.None;
    }
    resolveAuthority() {
        unsupported();
    }
    getConnectionData() {
        unsupported();
    }
    getCanonicalURI() {
        unsupported();
    }
    _clearResolvedAuthority() {
        unsupported();
    }
    _setResolvedAuthority() {
        unsupported();
    }
    _setResolvedAuthorityError() {
        unsupported();
    }
    _setAuthorityConnectionToken() {
        unsupported();
    }
    _setCanonicalURIProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], RemoteAuthorityResolverService.prototype, "resolveAuthority", null);
__decorate([
    Unsupported
], RemoteAuthorityResolverService.prototype, "getConnectionData", null);
__decorate([
    Unsupported
], RemoteAuthorityResolverService.prototype, "getCanonicalURI", null);
__decorate([
    Unsupported
], RemoteAuthorityResolverService.prototype, "_clearResolvedAuthority", null);
__decorate([
    Unsupported
], RemoteAuthorityResolverService.prototype, "_setResolvedAuthority", null);
__decorate([
    Unsupported
], RemoteAuthorityResolverService.prototype, "_setResolvedAuthorityError", null);
__decorate([
    Unsupported
], RemoteAuthorityResolverService.prototype, "_setAuthorityConnectionToken", null);
__decorate([
    Unsupported
], RemoteAuthorityResolverService.prototype, "_setCanonicalURIProvider", null);
registerSingleton(IRemoteAuthorityResolverService, RemoteAuthorityResolverService, InstantiationType.Delayed);
class ExternalUriOpenerService {
    constructor() {
        this.registerExternalOpenerProvider = () => Disposable.None;
        this.getOpener = async () => undefined;
    }
}
registerSingleton(IExternalUriOpenerService, ExternalUriOpenerService, InstantiationType.Delayed);
class AccessibleViewService {
    constructor() {
        this.getCodeBlockContext = () => undefined;
    }
    configureKeybindings() {
        unsupported();
    }
    openHelpLink() {
        unsupported();
    }
    navigateToCodeBlock() {
        unsupported();
    }
    showLastProvider() {
        unsupported();
    }
    showAccessibleViewHelp() {
        unsupported();
    }
    goToSymbol() {
        unsupported();
    }
    disableHint() {
        unsupported();
    }
    next() {
        unsupported();
    }
    previous() {
        unsupported();
    }
    getOpenAriaHint() {
        unsupported();
    }
    show() {
        unsupported();
    }
    registerProvider() {
        unsupported();
    }
    getPosition() {
        unsupported();
    }
    setPosition() {
        unsupported();
    }
    getLastPosition() {
        unsupported();
    }
}
__decorate([
    Unsupported
], AccessibleViewService.prototype, "configureKeybindings", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "openHelpLink", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "navigateToCodeBlock", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "showLastProvider", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "showAccessibleViewHelp", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "goToSymbol", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "disableHint", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "next", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "previous", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "getOpenAriaHint", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "show", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "registerProvider", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "getPosition", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "setPosition", null);
__decorate([
    Unsupported
], AccessibleViewService.prototype, "getLastPosition", null);
registerSingleton(IAccessibleViewService, AccessibleViewService, InstantiationType.Delayed);
class AccessibleViewInformationService {
    constructor() {
        this.hasShownAccessibleView = () => false;
    }
}
registerSingleton(IAccessibleViewInformationService, AccessibleViewInformationService, InstantiationType.Delayed);
class WorkbenchExtensionManagementService {
    constructor() {
        this.onProfileAwareDidInstallExtensions = Event.None;
        this.onProfileAwareDidUninstallExtension = Event.None;
        this.onProfileAwareDidUpdateExtensionMetadata = Event.None;
        this.getInstalledWorkspaceExtensionLocations = () => [];
        this.onDidEnableExtensions = Event.None;
        this.isWorkspaceExtensionsSupported = () => false;
        this.getExtensions = async () => [];
        this.getInstalledWorkspaceExtensions = async () => [];
        this.toggleAppliationScope = async (extension) => extension;
        this.onInstallExtension = Event.None;
        this.onDidInstallExtensions = Event.None;
        this.onUninstallExtension = Event.None;
        this.onDidUninstallExtension = Event.None;
        this.onDidChangeProfile = Event.None;
        this.onDidUpdateExtensionMetadata = Event.None;
        this.getInstalled = async () => [];
        this.getInstallableServers = async () => [];
        this.isPublisherTrusted = () => false;
        this.getTrustedPublishers = () => [];
    }
    uninstallExtensions() {
        unsupported();
    }
    resetPinnedStateForAllUserExtensions() {
        unsupported();
    }
    installResourceExtension() {
        unsupported();
    }
    installVSIX() {
        unsupported();
    }
    installFromLocation() {
        unsupported();
    }
    updateFromGallery() {
        unsupported();
    }
    zip() {
        unsupported();
    }
    unzip() {
        unsupported();
    }
    getManifest() {
        unsupported();
    }
    install() {
        unsupported();
    }
    canInstall() {
        unsupported();
    }
    installFromGallery() {
        unsupported();
    }
    installGalleryExtensions() {
        unsupported();
    }
    installExtensionsFromProfile() {
        unsupported();
    }
    uninstall() {
        unsupported();
    }
    reinstallFromGallery() {
        unsupported();
    }
    getExtensionsControlManifest() {
        unsupported();
    }
    copyExtensions() {
        unsupported();
    }
    updateMetadata() {
        unsupported();
    }
    download() {
        unsupported();
    }
    registerParticipant() {
        unsupported();
    }
    getTargetPlatform() {
        unsupported();
    }
    cleanUp() {
        unsupported();
    }
    requestPublisherTrust() {
        unsupported();
    }
    trustPublishers() {
        unsupported();
    }
    untrustPublishers() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "uninstallExtensions", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "resetPinnedStateForAllUserExtensions", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "installResourceExtension", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "installVSIX", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "installFromLocation", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "updateFromGallery", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "zip", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "unzip", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "getManifest", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "install", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "canInstall", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "installFromGallery", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "installGalleryExtensions", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "installExtensionsFromProfile", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "uninstall", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "reinstallFromGallery", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "getExtensionsControlManifest", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "copyExtensions", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "updateMetadata", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "download", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "registerParticipant", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "getTargetPlatform", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "cleanUp", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "requestPublisherTrust", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "trustPublishers", null);
__decorate([
    Unsupported
], WorkbenchExtensionManagementService.prototype, "untrustPublishers", null);
registerSingleton(IWorkbenchExtensionManagementService, WorkbenchExtensionManagementService, InstantiationType.Delayed);
class ExtensionManifestPropertiesService {
    prefersExecuteOnUI() {
        unsupported();
    }
    prefersExecuteOnWorkspace() {
        unsupported();
    }
    prefersExecuteOnWeb() {
        unsupported();
    }
    canExecuteOnUI() {
        unsupported();
    }
    canExecuteOnWorkspace() {
        unsupported();
    }
    canExecuteOnWeb() {
        unsupported();
    }
    getExtensionKind() {
        unsupported();
    }
    getUserConfiguredExtensionKind() {
        unsupported();
    }
    getExtensionUntrustedWorkspaceSupportType() {
        unsupported();
    }
    getExtensionVirtualWorkspaceSupportType() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "prefersExecuteOnUI", null);
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "prefersExecuteOnWorkspace", null);
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "prefersExecuteOnWeb", null);
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "canExecuteOnUI", null);
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "canExecuteOnWorkspace", null);
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "canExecuteOnWeb", null);
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "getExtensionKind", null);
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "getUserConfiguredExtensionKind", null);
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "getExtensionUntrustedWorkspaceSupportType", null);
__decorate([
    Unsupported
], ExtensionManifestPropertiesService.prototype, "getExtensionVirtualWorkspaceSupportType", null);
registerSingleton(IExtensionManifestPropertiesService, ExtensionManifestPropertiesService, InstantiationType.Delayed);
class WorkspaceTrustEnablementService {
    isWorkspaceTrustEnabled() {
        return false;
    }
}
registerSingleton(IWorkspaceTrustEnablementService, WorkspaceTrustEnablementService, InstantiationType.Delayed);
class RemoteExtensionsScannerService {
    whenExtensionsReady() {
        unsupported();
    }
    async scanExtensions() {
        return [];
    }
    async scanSingleExtension() {
        return null;
    }
}
__decorate([
    Unsupported
], RemoteExtensionsScannerService.prototype, "whenExtensionsReady", null);
registerSingleton(IRemoteExtensionsScannerService, RemoteExtensionsScannerService, InstantiationType.Delayed);
class URLService {
    constructor() {
        this.open = async () => false;
    }
    create() {
        unsupported();
    }
    registerHandler() {
        unsupported();
    }
}
__decorate([
    Unsupported
], URLService.prototype, "create", null);
__decorate([
    Unsupported
], URLService.prototype, "registerHandler", null);
registerSingleton(IURLService, URLService, InstantiationType.Delayed);
class RemoteSocketFactoryService {
    register() {
        unsupported();
    }
    connect() {
        unsupported();
    }
}
__decorate([
    Unsupported
], RemoteSocketFactoryService.prototype, "register", null);
__decorate([
    Unsupported
], RemoteSocketFactoryService.prototype, "connect", null);
registerSingleton(IRemoteSocketFactoryService, RemoteSocketFactoryService, InstantiationType.Delayed);
class QuickDiffService {
    constructor() {
        this.onDidChangeQuickDiffProviders = Event.None;
    }
    addQuickDiffProvider() {
        unsupported();
    }
    getQuickDiffs() {
        unsupported();
    }
}
__decorate([
    Unsupported
], QuickDiffService.prototype, "addQuickDiffProvider", null);
__decorate([
    Unsupported
], QuickDiffService.prototype, "getQuickDiffs", null);
registerSingleton(IQuickDiffService, QuickDiffService, InstantiationType.Delayed);
class SCMService {
    constructor() {
        this.onDidChangeInputValueProviders = Event.None;
        this.onDidAddRepository = Event.None;
        this.onDidRemoveRepository = Event.None;
        this.repositories = [];
        this.repositoryCount = 0;
    }
    getDefaultInputValueProvider() {
        unsupported();
    }
    registerSCMInputValueProvider() {
        unsupported();
    }
    registerSCMProvider() {
        unsupported();
    }
    getRepository() {
        unsupported();
    }
}
__decorate([
    Unsupported
], SCMService.prototype, "getDefaultInputValueProvider", null);
__decorate([
    Unsupported
], SCMService.prototype, "registerSCMInputValueProvider", null);
__decorate([
    Unsupported
], SCMService.prototype, "registerSCMProvider", null);
__decorate([
    Unsupported
], SCMService.prototype, "getRepository", null);
registerSingleton(ISCMService, SCMService, InstantiationType.Delayed);
class DownloadService {
    download() {
        unsupported();
    }
}
__decorate([
    Unsupported
], DownloadService.prototype, "download", null);
registerSingleton(IDownloadService, DownloadService, InstantiationType.Delayed);
class ExtensionUrlHandler {
    registerExtensionHandler() {
        unsupported();
    }
    unregisterExtensionHandler() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionUrlHandler.prototype, "registerExtensionHandler", null);
__decorate([
    Unsupported
], ExtensionUrlHandler.prototype, "unregisterExtensionHandler", null);
registerSingleton(IExtensionUrlHandler, ExtensionUrlHandler, InstantiationType.Delayed);
class CommentService {
    constructor() {
        this.lastActiveCommentcontroller = undefined;
        this.resourceHasCommentingRanges = () => false;
        this.onDidChangeActiveEditingCommentThread = Event.None;
        this.onDidSetResourceCommentInfos = Event.None;
        this.onDidSetAllCommentThreads = Event.None;
        this.onDidUpdateCommentThreads = Event.None;
        this.onDidUpdateNotebookCommentThreads = Event.None;
        this.onDidChangeActiveCommentThread = Event.None;
        this.onDidChangeCurrentCommentThread = Event.None;
        this.onDidUpdateCommentingRanges = Event.None;
        this.onDidChangeActiveCommentingRange = Event.None;
        this.onDidSetDataProvider = Event.None;
        this.onDidDeleteDataProvider = Event.None;
        this.onDidChangeCommentingEnabled = Event.None;
        this.isCommentingEnabled = false;
        this.unregisterCommentController = () => { };
        this.getDocumentComments = async () => [];
        this.getNotebookComments = async () => [];
    }
    get commentsModel() {
        return unsupported();
    }
    setActiveEditingCommentThread() {
        unsupported();
    }
    setActiveCommentAndThread() {
        unsupported();
    }
    setDocumentComments() {
        unsupported();
    }
    setWorkspaceComments() {
        unsupported();
    }
    removeWorkspaceComments() {
        unsupported();
    }
    registerCommentController() {
        unsupported();
    }
    getCommentController() {
        unsupported();
    }
    createCommentThreadTemplate() {
        unsupported();
    }
    updateCommentThreadTemplate() {
        unsupported();
    }
    getCommentMenus() {
        unsupported();
    }
    updateComments() {
        unsupported();
    }
    updateNotebookComments() {
        unsupported();
    }
    disposeCommentThread() {
        unsupported();
    }
    updateCommentingRanges() {
        unsupported();
    }
    hasReactionHandler() {
        unsupported();
    }
    toggleReaction() {
        unsupported();
    }
    setActiveCommentThread() {
        unsupported();
    }
    setCurrentCommentThread() {
        unsupported();
    }
    enableCommenting() {
        unsupported();
    }
    registerContinueOnCommentProvider() {
        unsupported();
    }
    removeContinueOnComment() {
        unsupported();
    }
}
__decorate([
    Unsupported
], CommentService.prototype, "commentsModel", null);
__decorate([
    Unsupported
], CommentService.prototype, "setActiveEditingCommentThread", null);
__decorate([
    Unsupported
], CommentService.prototype, "setActiveCommentAndThread", null);
__decorate([
    Unsupported
], CommentService.prototype, "setDocumentComments", null);
__decorate([
    Unsupported
], CommentService.prototype, "setWorkspaceComments", null);
__decorate([
    Unsupported
], CommentService.prototype, "removeWorkspaceComments", null);
__decorate([
    Unsupported
], CommentService.prototype, "registerCommentController", null);
__decorate([
    Unsupported
], CommentService.prototype, "getCommentController", null);
__decorate([
    Unsupported
], CommentService.prototype, "createCommentThreadTemplate", null);
__decorate([
    Unsupported
], CommentService.prototype, "updateCommentThreadTemplate", null);
__decorate([
    Unsupported
], CommentService.prototype, "getCommentMenus", null);
__decorate([
    Unsupported
], CommentService.prototype, "updateComments", null);
__decorate([
    Unsupported
], CommentService.prototype, "updateNotebookComments", null);
__decorate([
    Unsupported
], CommentService.prototype, "disposeCommentThread", null);
__decorate([
    Unsupported
], CommentService.prototype, "updateCommentingRanges", null);
__decorate([
    Unsupported
], CommentService.prototype, "hasReactionHandler", null);
__decorate([
    Unsupported
], CommentService.prototype, "toggleReaction", null);
__decorate([
    Unsupported
], CommentService.prototype, "setActiveCommentThread", null);
__decorate([
    Unsupported
], CommentService.prototype, "setCurrentCommentThread", null);
__decorate([
    Unsupported
], CommentService.prototype, "enableCommenting", null);
__decorate([
    Unsupported
], CommentService.prototype, "registerContinueOnCommentProvider", null);
__decorate([
    Unsupported
], CommentService.prototype, "removeContinueOnComment", null);
registerSingleton(ICommentService, CommentService, InstantiationType.Delayed);
class NotebookCellStatusBarService {
    constructor() {
        this.onDidChangeProviders = Event.None;
        this.onDidChangeItems = Event.None;
    }
    registerCellStatusBarItemProvider() {
        unsupported();
    }
    getStatusBarItemsForCell() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookCellStatusBarService.prototype, "registerCellStatusBarItemProvider", null);
__decorate([
    Unsupported
], NotebookCellStatusBarService.prototype, "getStatusBarItemsForCell", null);
registerSingleton(INotebookCellStatusBarService, NotebookCellStatusBarService, InstantiationType.Delayed);
class NotebookKernelService {
    constructor() {
        this.onDidNotebookVariablesUpdate = Event.None;
        this.onDidAddKernel = Event.None;
        this.onDidRemoveKernel = Event.None;
        this.onDidChangeSelectedNotebooks = Event.None;
        this.onDidChangeNotebookAffinity = Event.None;
        this.onDidChangeKernelDetectionTasks = Event.None;
        this.onDidChangeSourceActions = Event.None;
    }
    notifyVariablesChange() {
        unsupported();
    }
    registerKernel() {
        unsupported();
    }
    getMatchingKernel() {
        unsupported();
    }
    getSelectedOrSuggestedKernel() {
        unsupported();
    }
    selectKernelForNotebook() {
        unsupported();
    }
    preselectKernelForNotebook() {
        unsupported();
    }
    updateKernelNotebookAffinity() {
        unsupported();
    }
    registerNotebookKernelDetectionTask() {
        unsupported();
    }
    getKernelDetectionTasks() {
        unsupported();
    }
    getSourceActions() {
        unsupported();
    }
    getRunningSourceActions() {
        unsupported();
    }
    registerKernelSourceActionProvider() {
        unsupported();
    }
    getKernelSourceActions2() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookKernelService.prototype, "notifyVariablesChange", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "registerKernel", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "getMatchingKernel", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "getSelectedOrSuggestedKernel", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "selectKernelForNotebook", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "preselectKernelForNotebook", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "updateKernelNotebookAffinity", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "registerNotebookKernelDetectionTask", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "getKernelDetectionTasks", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "getSourceActions", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "getRunningSourceActions", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "registerKernelSourceActionProvider", null);
__decorate([
    Unsupported
], NotebookKernelService.prototype, "getKernelSourceActions2", null);
registerSingleton(INotebookKernelService, NotebookKernelService, InstantiationType.Delayed);
class NotebookRendererMessagingService {
    constructor() {
        this.onShouldPostMessage = Event.None;
    }
    prepare() {
        unsupported();
    }
    getScoped() {
        unsupported();
    }
    receiveMessage() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookRendererMessagingService.prototype, "prepare", null);
__decorate([
    Unsupported
], NotebookRendererMessagingService.prototype, "getScoped", null);
__decorate([
    Unsupported
], NotebookRendererMessagingService.prototype, "receiveMessage", null);
registerSingleton(INotebookRendererMessagingService, NotebookRendererMessagingService, InstantiationType.Delayed);
class InteractiveHistoryService {
    constructor() {
        this.matchesCurrent = () => false;
    }
    addToHistory() {
        unsupported();
    }
    getPreviousValue() {
        unsupported();
    }
    getNextValue() {
        unsupported();
    }
    replaceLast() {
        unsupported();
    }
    clearHistory() {
        unsupported();
    }
    has() {
        unsupported();
    }
}
__decorate([
    Unsupported
], InteractiveHistoryService.prototype, "addToHistory", null);
__decorate([
    Unsupported
], InteractiveHistoryService.prototype, "getPreviousValue", null);
__decorate([
    Unsupported
], InteractiveHistoryService.prototype, "getNextValue", null);
__decorate([
    Unsupported
], InteractiveHistoryService.prototype, "replaceLast", null);
__decorate([
    Unsupported
], InteractiveHistoryService.prototype, "clearHistory", null);
__decorate([
    Unsupported
], InteractiveHistoryService.prototype, "has", null);
registerSingleton(IInteractiveHistoryService, InteractiveHistoryService, InstantiationType.Delayed);
class InteractiveDocumentService {
    constructor() {
        this.onWillAddInteractiveDocument = Event.None;
        this.onWillRemoveInteractiveDocument = Event.None;
    }
    willCreateInteractiveDocument() {
        unsupported();
    }
    willRemoveInteractiveDocument() {
        unsupported();
    }
}
__decorate([
    Unsupported
], InteractiveDocumentService.prototype, "willCreateInteractiveDocument", null);
__decorate([
    Unsupported
], InteractiveDocumentService.prototype, "willRemoveInteractiveDocument", null);
registerSingleton(IInteractiveDocumentService, InteractiveDocumentService, InstantiationType.Delayed);
class ActiveLanguagePackService {
    async getExtensionIdProvidingCurrentLocale() {
        return getExtensionIdProvidingCurrentLocale();
    }
}
registerSingleton(IActiveLanguagePackService, ActiveLanguagePackService, InstantiationType.Eager);
class RemoteUserDataProfilesService {
    constructor() {
        this.getRemoteProfiles = async () => [];
    }
    getRemoteProfile() {
        unsupported();
    }
}
__decorate([
    Unsupported
], RemoteUserDataProfilesService.prototype, "getRemoteProfile", null);
registerSingleton(IRemoteUserDataProfilesService, RemoteUserDataProfilesService, InstantiationType.Eager);
class ExtensionBisectService {
    constructor() {
        this.isDisabledByBisect = () => false;
        this.isActive = false;
        this.disabledCount = 0;
    }
    start() {
        unsupported();
    }
    next() {
        unsupported();
    }
    reset() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionBisectService.prototype, "start", null);
__decorate([
    Unsupported
], ExtensionBisectService.prototype, "next", null);
__decorate([
    Unsupported
], ExtensionBisectService.prototype, "reset", null);
registerSingleton(IExtensionBisectService, ExtensionBisectService, InstantiationType.Eager);
class UserDataSyncAccountService {
    constructor() {
        this.onTokenFailed = Event.None;
        this.account = undefined;
        this.onDidChangeAccount = Event.None;
    }
    updateAccount() {
        return Promise.resolve();
    }
}
registerSingleton(IUserDataSyncAccountService, UserDataSyncAccountService, InstantiationType.Eager);
class ChatWidgetService {
    constructor() {
        this.getWidgetsByLocations = () => [];
        this.onDidAddWidget = Event.None;
        this.getAllWidgets = () => [];
        this.getWidgetByLocation = () => [];
        this.getWidgetBySessionId = () => undefined;
        this.lastFocusedWidget = undefined;
    }
    revealViewForProvider() {
        unsupported();
    }
    getWidgetByInputUri() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ChatWidgetService.prototype, "revealViewForProvider", null);
__decorate([
    Unsupported
], ChatWidgetService.prototype, "getWidgetByInputUri", null);
registerSingleton(IChatWidgetService, ChatWidgetService, InstantiationType.Delayed);
class RemoteExplorerService {
    constructor() {
        this.onDidChangeHelpInformation = Event.None;
        this.onDidChangeTargetType = Event.None;
        this.targetType = [];
        this.onDidChangeEditable = Event.None;
        this.onEnabledPortsFeatures = Event.None;
        this.portsFeaturesEnabled = PortsEnablement.Disabled;
        this.namedProcesses = new Map();
    }
    get helpInformation() {
        return unsupported();
    }
    get tunnelModel() {
        return unsupported();
    }
    setEditable() {
        unsupported();
    }
    getEditableData() {
        unsupported();
    }
    forward() {
        unsupported();
    }
    close() {
        unsupported();
    }
    setTunnelInformation() {
        unsupported();
    }
    setCandidateFilter() {
        unsupported();
    }
    onFoundNewCandidates() {
        unsupported();
    }
    restore() {
        unsupported();
    }
    enablePortsFeatures() {
        unsupported();
    }
}
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "helpInformation", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "tunnelModel", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "setEditable", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "getEditableData", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "forward", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "close", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "setTunnelInformation", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "setCandidateFilter", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "onFoundNewCandidates", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "restore", null);
__decorate([
    Unsupported
], RemoteExplorerService.prototype, "enablePortsFeatures", null);
registerSingleton(IRemoteExplorerService, RemoteExplorerService, InstantiationType.Delayed);
class AuthenticationService {
    constructor() {
        this.getAccounts = async () => [];
        this.onDidRegisterAuthenticationProvider = Event.None;
        this.onDidUnregisterAuthenticationProvider = Event.None;
        this.onDidChangeSessions = Event.None;
        this.onDidChangeDeclaredProviders = Event.None;
        this.declaredProviders = [];
        this.isAuthenticationProviderRegistered = () => false;
        this.getProviderIds = () => [];
    }
    registerDeclaredAuthenticationProvider() {
        unsupported();
    }
    unregisterDeclaredAuthenticationProvider() {
        unsupported();
    }
    registerAuthenticationProvider() {
        unsupported();
    }
    unregisterAuthenticationProvider() {
        unsupported();
    }
    getProvider() {
        unsupported();
    }
    getSessions() {
        unsupported();
    }
    createSession() {
        unsupported();
    }
    removeSession() {
        unsupported();
    }
}
__decorate([
    Unsupported
], AuthenticationService.prototype, "registerDeclaredAuthenticationProvider", null);
__decorate([
    Unsupported
], AuthenticationService.prototype, "unregisterDeclaredAuthenticationProvider", null);
__decorate([
    Unsupported
], AuthenticationService.prototype, "registerAuthenticationProvider", null);
__decorate([
    Unsupported
], AuthenticationService.prototype, "unregisterAuthenticationProvider", null);
__decorate([
    Unsupported
], AuthenticationService.prototype, "getProvider", null);
__decorate([
    Unsupported
], AuthenticationService.prototype, "getSessions", null);
__decorate([
    Unsupported
], AuthenticationService.prototype, "createSession", null);
__decorate([
    Unsupported
], AuthenticationService.prototype, "removeSession", null);
registerSingleton(IAuthenticationService, AuthenticationService, InstantiationType.Delayed);
class AuthenticationAccessService {
    constructor() {
        this.onDidChangeExtensionSessionAccess = Event.None;
        this.isAccessAllowed = () => false;
        this.readAllowedExtensions = () => [];
    }
    updateAllowedExtensions() {
        unsupported();
    }
    removeAllowedExtensions() {
        unsupported();
    }
}
__decorate([
    Unsupported
], AuthenticationAccessService.prototype, "updateAllowedExtensions", null);
__decorate([
    Unsupported
], AuthenticationAccessService.prototype, "removeAllowedExtensions", null);
registerSingleton(IAuthenticationAccessService, AuthenticationAccessService, InstantiationType.Delayed);
class AuthenticationExtensionsService {
    constructor() {
        this.onDidChangeAccountPreference = Event.None;
        this.getAccountPreference = () => undefined;
        this.getSessionPreference = () => undefined;
    }
    updateAccountPreference() {
        unsupported();
    }
    removeAccountPreference() {
        unsupported();
    }
    updateSessionPreference() {
        unsupported();
    }
    removeSessionPreference() {
        unsupported();
    }
    selectSession() {
        unsupported();
    }
    requestSessionAccess() {
        unsupported();
    }
    requestNewSession() {
        unsupported();
    }
}
__decorate([
    Unsupported
], AuthenticationExtensionsService.prototype, "updateAccountPreference", null);
__decorate([
    Unsupported
], AuthenticationExtensionsService.prototype, "removeAccountPreference", null);
__decorate([
    Unsupported
], AuthenticationExtensionsService.prototype, "updateSessionPreference", null);
__decorate([
    Unsupported
], AuthenticationExtensionsService.prototype, "removeSessionPreference", null);
__decorate([
    Unsupported
], AuthenticationExtensionsService.prototype, "selectSession", null);
__decorate([
    Unsupported
], AuthenticationExtensionsService.prototype, "requestSessionAccess", null);
__decorate([
    Unsupported
], AuthenticationExtensionsService.prototype, "requestNewSession", null);
registerSingleton(IAuthenticationExtensionsService, AuthenticationExtensionsService, InstantiationType.Delayed);
class AuthenticationUsageService {
    constructor() {
        this.extensionUsesAuth = async () => false;
    }
    initializeExtensionUsageCache() {
        unsupported();
    }
    readAccountUsages() {
        unsupported();
    }
    removeAccountUsage() {
        unsupported();
    }
    addAccountUsage() {
        unsupported();
    }
}
__decorate([
    Unsupported
], AuthenticationUsageService.prototype, "initializeExtensionUsageCache", null);
__decorate([
    Unsupported
], AuthenticationUsageService.prototype, "readAccountUsages", null);
__decorate([
    Unsupported
], AuthenticationUsageService.prototype, "removeAccountUsage", null);
__decorate([
    Unsupported
], AuthenticationUsageService.prototype, "addAccountUsage", null);
registerSingleton(IAuthenticationUsageService, AuthenticationUsageService, InstantiationType.Delayed);
class TimelineService {
    constructor() {
        this.onDidChangeProviders = Event.None;
        this.onDidChangeTimeline = Event.None;
        this.onDidChangeUri = Event.None;
        this.getSources = () => [];
    }
    registerTimelineProvider() {
        unsupported();
    }
    unregisterTimelineProvider() {
        unsupported();
    }
    getTimeline() {
        unsupported();
    }
    setUri() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TimelineService.prototype, "registerTimelineProvider", null);
__decorate([
    Unsupported
], TimelineService.prototype, "unregisterTimelineProvider", null);
__decorate([
    Unsupported
], TimelineService.prototype, "getTimeline", null);
__decorate([
    Unsupported
], TimelineService.prototype, "setUri", null);
registerSingleton(ITimelineService, TimelineService, InstantiationType.Delayed);
class TestService {
    constructor() {
        this.getTestsRelatedToCode = async () => [];
        this.getCodeRelatedToTest = async () => [];
        this.registerExtHost = () => Disposable.None;
        this.onDidCancelTestRun = Event.None;
        this.onWillProcessDiff = Event.None;
        this.onDidProcessDiff = Event.None;
        this.getTestController = () => undefined;
    }
    provideTestFollowups() {
        unsupported();
    }
    get excluded() {
        return unsupported();
    }
    get collection() {
        return unsupported();
    }
    get showInlineOutput() {
        return unsupported();
    }
    registerTestController() {
        unsupported();
    }
    refreshTests() {
        unsupported();
    }
    cancelRefreshTests() {
        unsupported();
    }
    startContinuousRun() {
        unsupported();
    }
    runTests() {
        unsupported();
    }
    runResolvedTests() {
        unsupported();
    }
    syncTests() {
        unsupported();
    }
    cancelTestRun() {
        unsupported();
    }
    publishDiff() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TestService.prototype, "provideTestFollowups", null);
__decorate([
    Unsupported
], TestService.prototype, "excluded", null);
__decorate([
    Unsupported
], TestService.prototype, "collection", null);
__decorate([
    Unsupported
], TestService.prototype, "showInlineOutput", null);
__decorate([
    Unsupported
], TestService.prototype, "registerTestController", null);
__decorate([
    Unsupported
], TestService.prototype, "refreshTests", null);
__decorate([
    Unsupported
], TestService.prototype, "cancelRefreshTests", null);
__decorate([
    Unsupported
], TestService.prototype, "startContinuousRun", null);
__decorate([
    Unsupported
], TestService.prototype, "runTests", null);
__decorate([
    Unsupported
], TestService.prototype, "runResolvedTests", null);
__decorate([
    Unsupported
], TestService.prototype, "syncTests", null);
__decorate([
    Unsupported
], TestService.prototype, "cancelTestRun", null);
__decorate([
    Unsupported
], TestService.prototype, "publishDiff", null);
registerSingleton(ITestService, TestService, InstantiationType.Delayed);
class SecretStorageService {
    constructor() {
        this.onDidChangeSecret = Event.None;
        this.type = 'in-memory';
        this.get = async () => undefined;
    }
    set() {
        unsupported();
    }
    delete() {
        unsupported();
    }
}
__decorate([
    Unsupported
], SecretStorageService.prototype, "set", null);
__decorate([
    Unsupported
], SecretStorageService.prototype, "delete", null);
registerSingleton(ISecretStorageService, SecretStorageService, InstantiationType.Delayed);
class ShareService {
    constructor() {
        this.getShareActions = () => [];
        this.provideShare = async () => undefined;
    }
    registerShareProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ShareService.prototype, "registerShareProvider", null);
registerSingleton(IShareService, ShareService, InstantiationType.Delayed);
class UserDataProfileImportExportService {
    constructor() {
        this.createProfileFromTemplate = async () => undefined;
        this.resolveProfileTemplate = async () => null;
        this.registerProfileContentHandler = () => Disposable.None;
        this.unregisterProfileContentHandler = () => { };
    }
    exportProfile2() {
        unsupported();
    }
    createFromProfile() {
        unsupported();
    }
    createProfile() {
        unsupported();
    }
    editProfile() {
        unsupported();
    }
    exportProfile() {
        unsupported();
    }
    importProfile() {
        unsupported();
    }
    showProfileContents() {
        unsupported();
    }
    createFromCurrentProfile() {
        unsupported();
    }
    createTroubleshootProfile() {
        unsupported();
    }
    setProfile() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "exportProfile2", null);
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "createFromProfile", null);
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "createProfile", null);
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "editProfile", null);
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "exportProfile", null);
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "importProfile", null);
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "showProfileContents", null);
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "createFromCurrentProfile", null);
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "createTroubleshootProfile", null);
__decorate([
    Unsupported
], UserDataProfileImportExportService.prototype, "setProfile", null);
registerSingleton(IUserDataProfileImportExportService, UserDataProfileImportExportService, InstantiationType.Delayed);
class WorkbenchIssueService {
    registerIssueDataProvider() {
        unsupported();
    }
    openReporter() {
        unsupported();
    }
    openProcessExplorer() {
        unsupported();
    }
    registerIssueUriRequestHandler() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkbenchIssueService.prototype, "registerIssueDataProvider", null);
__decorate([
    Unsupported
], WorkbenchIssueService.prototype, "openReporter", null);
__decorate([
    Unsupported
], WorkbenchIssueService.prototype, "openProcessExplorer", null);
__decorate([
    Unsupported
], WorkbenchIssueService.prototype, "registerIssueUriRequestHandler", null);
registerSingleton(IWorkbenchIssueService, WorkbenchIssueService, InstantiationType.Delayed);
class SCMViewService {
    constructor() {
        this.repositories = [];
        this.onDidChangeRepositories = Event.None;
        this.visibleRepositories = [];
        this.onDidChangeVisibleRepositories = Event.None;
        this.isVisible = () => false;
        this.focusedRepository = undefined;
        this.onDidFocusRepository = Event.None;
    }
    get activeRepository() {
        return unsupported();
    }
    get menus() {
        return unsupported();
    }
    toggleVisibility() {
        unsupported();
    }
    toggleSortKey() {
        unsupported();
    }
    focus() {
        unsupported();
    }
}
__decorate([
    Unsupported
], SCMViewService.prototype, "activeRepository", null);
__decorate([
    Unsupported
], SCMViewService.prototype, "menus", null);
__decorate([
    Unsupported
], SCMViewService.prototype, "toggleVisibility", null);
__decorate([
    Unsupported
], SCMViewService.prototype, "toggleSortKey", null);
__decorate([
    Unsupported
], SCMViewService.prototype, "focus", null);
registerSingleton(ISCMViewService, SCMViewService, InstantiationType.Delayed);
class NotebookExecutionStateService {
    constructor() {
        this.getLastCompletedCellForNotebook = () => undefined;
        this.onDidChangeExecution = Event.None;
        this.onDidChangeLastRunFailState = Event.None;
    }
    forceCancelNotebookExecutions() {
        unsupported();
    }
    getCellExecutionsForNotebook() {
        unsupported();
    }
    getCellExecutionsByHandleForNotebook() {
        unsupported();
    }
    getCellExecution() {
        unsupported();
    }
    createCellExecution() {
        unsupported();
    }
    getExecution() {
        unsupported();
    }
    createExecution() {
        unsupported();
    }
    getLastFailedCellForNotebook() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookExecutionStateService.prototype, "forceCancelNotebookExecutions", null);
__decorate([
    Unsupported
], NotebookExecutionStateService.prototype, "getCellExecutionsForNotebook", null);
__decorate([
    Unsupported
], NotebookExecutionStateService.prototype, "getCellExecutionsByHandleForNotebook", null);
__decorate([
    Unsupported
], NotebookExecutionStateService.prototype, "getCellExecution", null);
__decorate([
    Unsupported
], NotebookExecutionStateService.prototype, "createCellExecution", null);
__decorate([
    Unsupported
], NotebookExecutionStateService.prototype, "getExecution", null);
__decorate([
    Unsupported
], NotebookExecutionStateService.prototype, "createExecution", null);
__decorate([
    Unsupported
], NotebookExecutionStateService.prototype, "getLastFailedCellForNotebook", null);
registerSingleton(INotebookExecutionStateService, NotebookExecutionStateService, InstantiationType.Delayed);
class TestProfileService {
    constructor() {
        this.getDefaultProfileForTest = () => undefined;
        this.onDidChange = Event.None;
        this.all = () => [];
        this.getGroupDefaultProfiles = () => [];
        this.getControllerProfiles = () => [];
    }
    addProfile() {
        unsupported();
    }
    updateProfile() {
        unsupported();
    }
    removeProfile() {
        unsupported();
    }
    capabilitiesForTest() {
        unsupported();
    }
    configure() {
        unsupported();
    }
    setGroupDefaultProfiles() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TestProfileService.prototype, "addProfile", null);
__decorate([
    Unsupported
], TestProfileService.prototype, "updateProfile", null);
__decorate([
    Unsupported
], TestProfileService.prototype, "removeProfile", null);
__decorate([
    Unsupported
], TestProfileService.prototype, "capabilitiesForTest", null);
__decorate([
    Unsupported
], TestProfileService.prototype, "configure", null);
__decorate([
    Unsupported
], TestProfileService.prototype, "setGroupDefaultProfiles", null);
registerSingleton(ITestProfileService, TestProfileService, InstantiationType.Delayed);
class EncryptionService {
    setUsePlainTextEncryption() {
        unsupported();
    }
    getKeyStorageProvider() {
        unsupported();
    }
    encrypt() {
        unsupported();
    }
    decrypt() {
        unsupported();
    }
    isEncryptionAvailable() {
        unsupported();
    }
}
__decorate([
    Unsupported
], EncryptionService.prototype, "setUsePlainTextEncryption", null);
__decorate([
    Unsupported
], EncryptionService.prototype, "getKeyStorageProvider", null);
__decorate([
    Unsupported
], EncryptionService.prototype, "encrypt", null);
__decorate([
    Unsupported
], EncryptionService.prototype, "decrypt", null);
__decorate([
    Unsupported
], EncryptionService.prototype, "isEncryptionAvailable", null);
registerSingleton(IEncryptionService, EncryptionService, InstantiationType.Delayed);
class TestResultService {
    constructor() {
        this.onResultsChanged = Event.None;
        this.onTestChanged = Event.None;
        this.results = [];
        this.getResult = () => undefined;
        this.getStateById = () => undefined;
    }
    clear() {
        unsupported();
    }
    createLiveResult() {
        unsupported();
    }
    push() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TestResultService.prototype, "clear", null);
__decorate([
    Unsupported
], TestResultService.prototype, "createLiveResult", null);
__decorate([
    Unsupported
], TestResultService.prototype, "push", null);
registerSingleton(ITestResultService, TestResultService, InstantiationType.Delayed);
class TestResultStorage {
    read() {
        unsupported();
    }
    persist() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TestResultStorage.prototype, "read", null);
__decorate([
    Unsupported
], TestResultStorage.prototype, "persist", null);
registerSingleton(ITestResultStorage, TestResultStorage, InstantiationType.Delayed);
class TestingDecorationsService {
    constructor() {
        this.onDidChange = Event.None;
    }
    updateDecorationsAlternateAction() {
        unsupported();
    }
    invalidateResultMessage() {
        unsupported();
    }
    syncDecorations() {
        unsupported();
    }
    getDecoratedTestPosition() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TestingDecorationsService.prototype, "updateDecorationsAlternateAction", null);
__decorate([
    Unsupported
], TestingDecorationsService.prototype, "invalidateResultMessage", null);
__decorate([
    Unsupported
], TestingDecorationsService.prototype, "syncDecorations", null);
__decorate([
    Unsupported
], TestingDecorationsService.prototype, "getDecoratedTestPosition", null);
registerSingleton(ITestingDecorationsService, TestingDecorationsService, InstantiationType.Delayed);
class UserDataInitializationService {
    constructor() {
        this.requiresInitialization = async () => false;
        this.whenInitializationFinished = async () => { };
        this.initializeRequiredResources = async () => { };
        this.initializeInstalledExtensions = async () => { };
        this.initializeOtherResources = async () => { };
    }
}
registerSingleton(IUserDataInitializationService, UserDataInitializationService, InstantiationType.Delayed);
registerSingleton(IDiagnosticsService, NullDiagnosticsService, InstantiationType.Delayed);
class NotebookSearchService {
    notebookSearch() {
        return {
            openFilesToScan: new ResourceSet(),
            completeData: Promise.resolve({
                results: [],
                messages: []
            }),
            allScannedFiles: Promise.resolve(new ResourceSet())
        };
    }
}
registerSingleton(INotebookSearchService, NotebookSearchService, InstantiationType.Delayed);
class LanguageModelsService {
    constructor() {
        this.onDidChangeLanguageModels = Event.None;
        this.getLanguageModelIds = () => [];
        this.lookupLanguageModel = () => undefined;
    }
    sendChatRequest() {
        unsupported();
    }
    selectLanguageModels() {
        unsupported();
    }
    computeTokenLength() {
        unsupported();
    }
    registerLanguageModelChat() {
        unsupported();
    }
    makeLanguageModelChatRequest() {
        unsupported();
    }
}
__decorate([
    Unsupported
], LanguageModelsService.prototype, "sendChatRequest", null);
__decorate([
    Unsupported
], LanguageModelsService.prototype, "selectLanguageModels", null);
__decorate([
    Unsupported
], LanguageModelsService.prototype, "computeTokenLength", null);
__decorate([
    Unsupported
], LanguageModelsService.prototype, "registerLanguageModelChat", null);
__decorate([
    Unsupported
], LanguageModelsService.prototype, "makeLanguageModelChatRequest", null);
registerSingleton(ILanguageModelsService, LanguageModelsService, InstantiationType.Delayed);
class ChatSlashCommandService {
    onDidChangeCommands() {
        unsupported();
    }
    registerSlashData() {
        unsupported();
    }
    registerSlashCallback() {
        unsupported();
    }
    registerSlashCommand() {
        unsupported();
    }
    executeCommand() {
        unsupported();
    }
    getCommands() {
        unsupported();
    }
    hasCommand() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ChatSlashCommandService.prototype, "onDidChangeCommands", null);
__decorate([
    Unsupported
], ChatSlashCommandService.prototype, "registerSlashData", null);
__decorate([
    Unsupported
], ChatSlashCommandService.prototype, "registerSlashCallback", null);
__decorate([
    Unsupported
], ChatSlashCommandService.prototype, "registerSlashCommand", null);
__decorate([
    Unsupported
], ChatSlashCommandService.prototype, "executeCommand", null);
__decorate([
    Unsupported
], ChatSlashCommandService.prototype, "getCommands", null);
__decorate([
    Unsupported
], ChatSlashCommandService.prototype, "hasCommand", null);
registerSingleton(IChatSlashCommandService, ChatSlashCommandService, InstantiationType.Delayed);
class ChatVariablesService {
    constructor() {
        this.getVariable = () => undefined;
        this.resolveVariable = async () => [];
    }
    attachContext() {
        unsupported();
    }
    getDynamicVariables() {
        unsupported();
    }
    getDynamicReferences() {
        unsupported();
    }
    registerVariable() {
        unsupported();
    }
    getVariables() {
        unsupported();
    }
    resolveVariables() {
        unsupported();
    }
    hasVariable() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ChatVariablesService.prototype, "attachContext", null);
__decorate([
    Unsupported
], ChatVariablesService.prototype, "getDynamicVariables", null);
__decorate([
    Unsupported
], ChatVariablesService.prototype, "getDynamicReferences", null);
__decorate([
    Unsupported
], ChatVariablesService.prototype, "registerVariable", null);
__decorate([
    Unsupported
], ChatVariablesService.prototype, "getVariables", null);
__decorate([
    Unsupported
], ChatVariablesService.prototype, "resolveVariables", null);
__decorate([
    Unsupported
], ChatVariablesService.prototype, "hasVariable", null);
registerSingleton(IChatVariablesService, ChatVariablesService, InstantiationType.Delayed);
class AiRelatedInformationService {
    constructor() {
        this.isEnabled = () => false;
    }
    getRelatedInformation() {
        unsupported();
    }
    registerAiRelatedInformationProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], AiRelatedInformationService.prototype, "getRelatedInformation", null);
__decorate([
    Unsupported
], AiRelatedInformationService.prototype, "registerAiRelatedInformationProvider", null);
registerSingleton(IAiRelatedInformationService, AiRelatedInformationService, InstantiationType.Delayed);
class AiEmbeddingVectorService {
    constructor() {
        this.isEnabled = () => false;
    }
    getEmbeddingVector() {
        unsupported();
    }
    registerAiEmbeddingVectorProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], AiEmbeddingVectorService.prototype, "getEmbeddingVector", null);
__decorate([
    Unsupported
], AiEmbeddingVectorService.prototype, "registerAiEmbeddingVectorProvider", null);
registerSingleton(IAiEmbeddingVectorService, AiEmbeddingVectorService, InstantiationType.Delayed);
class SignService {
    async createNewMessage(value) {
        const id = String(SignService._nextId++);
        return {
            id,
            data: value
        };
    }
    async validate() {
        return true;
    }
    async sign(value) {
        return value;
    }
}
SignService._nextId = 1;
registerSingleton(ISignService, SignService, InstantiationType.Delayed);
class TestingContinuousRunService {
    constructor() {
        this.lastRunProfileIds = new Set();
        this.onDidChange = Event.None;
        this.isSpecificallyEnabledFor = () => false;
        this.isEnabledForAParentOf = () => false;
        this.isEnabledForAChildOf = () => false;
        this.isEnabled = () => false;
    }
    isEnabledForProfile() {
        unsupported();
    }
    stopProfile() {
        unsupported();
    }
    start() {
        unsupported();
    }
    stop() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TestingContinuousRunService.prototype, "isEnabledForProfile", null);
__decorate([
    Unsupported
], TestingContinuousRunService.prototype, "stopProfile", null);
__decorate([
    Unsupported
], TestingContinuousRunService.prototype, "start", null);
__decorate([
    Unsupported
], TestingContinuousRunService.prototype, "stop", null);
registerSingleton(ITestingContinuousRunService, TestingContinuousRunService, InstantiationType.Delayed);
class TestExplorerFilterState {
    constructor() {
        this.onDidSelectTestInExplorer = Event.None;
        this.onDidRequestInputFocus = Event.None;
        this.isFilteringFor = () => false;
    }
    didSelectTestInExplorer() {
        unsupported();
    }
    get text() {
        return unsupported();
    }
    get reveal() {
        return unsupported();
    }
    get globList() {
        return unsupported();
    }
    get includeTags() {
        return unsupported();
    }
    get excludeTags() {
        return unsupported();
    }
    get fuzzy() {
        return unsupported();
    }
    focusInput() {
        unsupported();
    }
    setText() {
        unsupported();
    }
    toggleFilteringFor() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "didSelectTestInExplorer", null);
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "text", null);
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "reveal", null);
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "globList", null);
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "includeTags", null);
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "excludeTags", null);
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "fuzzy", null);
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "focusInput", null);
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "setText", null);
__decorate([
    Unsupported
], TestExplorerFilterState.prototype, "toggleFilteringFor", null);
registerSingleton(ITestExplorerFilterState, TestExplorerFilterState, InstantiationType.Delayed);
class TestingPeekOpener {
    get historyVisible() {
        return unsupported();
    }
    tryPeekFirstError() {
        unsupported();
    }
    peekUri() {
        unsupported();
    }
    openCurrentInEditor() {
        unsupported();
    }
    open() {
        unsupported();
    }
    closeAllPeeks() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TestingPeekOpener.prototype, "historyVisible", null);
__decorate([
    Unsupported
], TestingPeekOpener.prototype, "tryPeekFirstError", null);
__decorate([
    Unsupported
], TestingPeekOpener.prototype, "peekUri", null);
__decorate([
    Unsupported
], TestingPeekOpener.prototype, "openCurrentInEditor", null);
__decorate([
    Unsupported
], TestingPeekOpener.prototype, "open", null);
__decorate([
    Unsupported
], TestingPeekOpener.prototype, "closeAllPeeks", null);
registerSingleton(ITestingPeekOpener, TestingPeekOpener, InstantiationType.Delayed);
class AuxiliaryWindowService {
    constructor() {
        this.getWindow = () => undefined;
        this.onDidOpenAuxiliaryWindow = Event.None;
        this.hasWindow = () => false;
    }
    open() {
        unsupported();
    }
}
__decorate([
    Unsupported
], AuxiliaryWindowService.prototype, "open", null);
registerSingleton(IAuxiliaryWindowService, AuxiliaryWindowService, InstantiationType.Delayed);
class SpeechService {
    constructor() {
        this.onDidStartTextToSpeechSession = Event.None;
        this.onDidEndTextToSpeechSession = Event.None;
        this.hasActiveTextToSpeechSession = false;
        this.onDidChangeHasSpeechProvider = Event.None;
        this.onDidStartSpeechToTextSession = Event.None;
        this.onDidEndSpeechToTextSession = Event.None;
        this.hasActiveSpeechToTextSession = false;
        this.onDidStartKeywordRecognition = Event.None;
        this.onDidEndKeywordRecognition = Event.None;
        this.hasActiveKeywordRecognition = false;
        this.onDidRegisterSpeechProvider = Event.None;
        this.onDidUnregisterSpeechProvider = Event.None;
        this.hasSpeechProvider = false;
    }
    createTextToSpeechSession() {
        unsupported();
    }
    recognizeKeyword() {
        unsupported();
    }
    registerSpeechProvider() {
        unsupported();
    }
    createSpeechToTextSession() {
        unsupported();
    }
}
__decorate([
    Unsupported
], SpeechService.prototype, "createTextToSpeechSession", null);
__decorate([
    Unsupported
], SpeechService.prototype, "recognizeKeyword", null);
__decorate([
    Unsupported
], SpeechService.prototype, "registerSpeechProvider", null);
__decorate([
    Unsupported
], SpeechService.prototype, "createSpeechToTextSession", null);
registerSingleton(ISpeechService, SpeechService, InstantiationType.Delayed);
class TestCoverageService {
    get showInline() {
        return unsupported();
    }
    get filterToTest() {
        return unsupported();
    }
    get selected() {
        return unsupported();
    }
    openCoverage() {
        unsupported();
    }
    closeCoverage() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TestCoverageService.prototype, "showInline", null);
__decorate([
    Unsupported
], TestCoverageService.prototype, "filterToTest", null);
__decorate([
    Unsupported
], TestCoverageService.prototype, "selected", null);
__decorate([
    Unsupported
], TestCoverageService.prototype, "openCoverage", null);
__decorate([
    Unsupported
], TestCoverageService.prototype, "closeCoverage", null);
registerSingleton(ITestCoverageService, TestCoverageService, InstantiationType.Delayed);
class ChatAccessibilityService {
    acceptRequest() {
        unsupported();
    }
    acceptResponse() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ChatAccessibilityService.prototype, "acceptRequest", null);
__decorate([
    Unsupported
], ChatAccessibilityService.prototype, "acceptResponse", null);
registerSingleton(IChatAccessibilityService, ChatAccessibilityService, InstantiationType.Delayed);
class ChatWidgetHistoryService {
    constructor() {
        this.onDidClearHistory = Event.None;
        this.getHistory = () => [];
    }
    clearHistory() {
        unsupported();
    }
    saveHistory() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ChatWidgetHistoryService.prototype, "clearHistory", null);
__decorate([
    Unsupported
], ChatWidgetHistoryService.prototype, "saveHistory", null);
registerSingleton(IChatWidgetHistoryService, ChatWidgetHistoryService, InstantiationType.Delayed);
class ChatCodeBlockContextProviderService {
    constructor() {
        this.providers = [];
        this.registerProvider = () => Disposable.None;
    }
}
registerSingleton(IChatCodeBlockContextProviderService, ChatCodeBlockContextProviderService, InstantiationType.Delayed);
class InlineChatSessionService {
    constructor() {
        this.onDidMoveSession = Event.None;
        this.onDidMoveSessio = Event.None;
        this.onDidStashSession = Event.None;
        this.onWillStartSession = Event.None;
        this.onDidEndSession = Event.None;
        this.getSession = () => undefined;
        this.getSession2 = () => undefined;
        this.onDidChangeSessions = Event.None;
    }
    moveSession() {
        unsupported();
    }
    getCodeEditor() {
        unsupported();
    }
    stashSession() {
        unsupported();
    }
    createSession() {
        unsupported();
    }
    releaseSession() {
        unsupported();
    }
    registerSessionKeyComputer() {
        unsupported();
    }
    recordings() {
        unsupported();
    }
    dispose() {
        unsupported();
    }
    createSession2() {
        unsupported();
    }
}
__decorate([
    Unsupported
], InlineChatSessionService.prototype, "moveSession", null);
__decorate([
    Unsupported
], InlineChatSessionService.prototype, "getCodeEditor", null);
__decorate([
    Unsupported
], InlineChatSessionService.prototype, "stashSession", null);
__decorate([
    Unsupported
], InlineChatSessionService.prototype, "createSession", null);
__decorate([
    Unsupported
], InlineChatSessionService.prototype, "releaseSession", null);
__decorate([
    Unsupported
], InlineChatSessionService.prototype, "registerSessionKeyComputer", null);
__decorate([
    Unsupported
], InlineChatSessionService.prototype, "recordings", null);
__decorate([
    Unsupported
], InlineChatSessionService.prototype, "dispose", null);
__decorate([
    Unsupported
], InlineChatSessionService.prototype, "createSession2", null);
registerSingleton(IInlineChatSessionService, InlineChatSessionService, InstantiationType.Delayed);
class NotebookEditorWorkerService {
    constructor() {
        this.canComputeDiff = () => false;
        this.canPromptRecommendation = async () => false;
    }
    computeDiff() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookEditorWorkerService.prototype, "computeDiff", null);
registerSingleton(INotebookEditorWorkerService, NotebookEditorWorkerService, InstantiationType.Delayed);
class NotebookKernelHistoryService {
    getKernels() {
        unsupported();
    }
    addMostRecentKernel() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookKernelHistoryService.prototype, "getKernels", null);
__decorate([
    Unsupported
], NotebookKernelHistoryService.prototype, "addMostRecentKernel", null);
registerSingleton(INotebookKernelHistoryService, NotebookKernelHistoryService, InstantiationType.Delayed);
class NotebookExecutionService {
    executeNotebookCells() {
        unsupported();
    }
    cancelNotebookCells() {
        unsupported();
    }
    cancelNotebookCellHandles() {
        unsupported();
    }
    registerExecutionParticipant() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookExecutionService.prototype, "executeNotebookCells", null);
__decorate([
    Unsupported
], NotebookExecutionService.prototype, "cancelNotebookCells", null);
__decorate([
    Unsupported
], NotebookExecutionService.prototype, "cancelNotebookCellHandles", null);
__decorate([
    Unsupported
], NotebookExecutionService.prototype, "registerExecutionParticipant", null);
registerSingleton(INotebookExecutionService, NotebookExecutionService, InstantiationType.Delayed);
class NotebookKeymapService {
}
registerSingleton(INotebookKeymapService, NotebookKeymapService, InstantiationType.Delayed);
class NotebookLoggingService {
    info() {
        unsupported();
    }
    debug() {
        unsupported();
    }
    warn() {
        unsupported();
    }
    error() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookLoggingService.prototype, "info", null);
__decorate([
    Unsupported
], NotebookLoggingService.prototype, "debug", null);
__decorate([
    Unsupported
], NotebookLoggingService.prototype, "warn", null);
__decorate([
    Unsupported
], NotebookLoggingService.prototype, "error", null);
registerSingleton(INotebookLoggingService, NotebookLoggingService, InstantiationType.Delayed);
class WalkthroughsService {
    constructor() {
        this.onDidAddWalkthrough = Event.None;
        this.onDidRemoveWalkthrough = Event.None;
        this.onDidChangeWalkthrough = Event.None;
        this.onDidProgressStep = Event.None;
    }
    getWalkthroughs() {
        unsupported();
    }
    getWalkthrough() {
        unsupported();
    }
    registerWalkthrough() {
        unsupported();
    }
    progressByEvent() {
        unsupported();
    }
    progressStep() {
        unsupported();
    }
    deprogressStep() {
        unsupported();
    }
    markWalkthroughOpened() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WalkthroughsService.prototype, "getWalkthroughs", null);
__decorate([
    Unsupported
], WalkthroughsService.prototype, "getWalkthrough", null);
__decorate([
    Unsupported
], WalkthroughsService.prototype, "registerWalkthrough", null);
__decorate([
    Unsupported
], WalkthroughsService.prototype, "progressByEvent", null);
__decorate([
    Unsupported
], WalkthroughsService.prototype, "progressStep", null);
__decorate([
    Unsupported
], WalkthroughsService.prototype, "deprogressStep", null);
__decorate([
    Unsupported
], WalkthroughsService.prototype, "markWalkthroughOpened", null);
registerSingleton(IWalkthroughsService, WalkthroughsService, InstantiationType.Delayed);
class UserDataSyncStoreManagementService {
    constructor() {
        this.onDidChangeUserDataSyncStore = Event.None;
        this.userDataSyncStore = undefined;
    }
    switch() {
        unsupported();
    }
    getPreviousUserDataSyncStore() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncStoreManagementService.prototype, "switch", null);
__decorate([
    Unsupported
], UserDataSyncStoreManagementService.prototype, "getPreviousUserDataSyncStore", null);
registerSingleton(IUserDataSyncStoreManagementService, UserDataSyncStoreManagementService, InstantiationType.Delayed);
class UserDataSyncStoreService {
    constructor() {
        this.onDidChangeDonotMakeRequestsUntil = Event.None;
        this.donotMakeRequestsUntil = undefined;
        this.onTokenFailed = Event.None;
        this.onTokenSucceed = Event.None;
    }
    setAuthToken() {
        unsupported();
    }
    manifest() {
        unsupported();
    }
    readResource() {
        unsupported();
    }
    writeResource() {
        unsupported();
    }
    deleteResource() {
        unsupported();
    }
    getAllResourceRefs() {
        unsupported();
    }
    resolveResourceContent() {
        unsupported();
    }
    getAllCollections() {
        unsupported();
    }
    createCollection() {
        unsupported();
    }
    deleteCollection() {
        unsupported();
    }
    getActivityData() {
        unsupported();
    }
    clear() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "setAuthToken", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "manifest", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "readResource", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "writeResource", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "deleteResource", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "getAllResourceRefs", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "resolveResourceContent", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "getAllCollections", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "createCollection", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "deleteCollection", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "getActivityData", null);
__decorate([
    Unsupported
], UserDataSyncStoreService.prototype, "clear", null);
registerSingleton(IUserDataSyncStoreService, UserDataSyncStoreService, InstantiationType.Delayed);
class UserDataSyncLogService {
    constructor() {
        this.onDidChangeLogLevel = Event.None;
    }
    getLevel() {
        unsupported();
    }
    setLevel() {
        unsupported();
    }
    trace() {
        unsupported();
    }
    debug() {
        unsupported();
    }
    info() {
        unsupported();
    }
    warn() {
        unsupported();
    }
    error() {
        unsupported();
    }
    flush() {
        unsupported();
    }
    dispose() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncLogService.prototype, "getLevel", null);
__decorate([
    Unsupported
], UserDataSyncLogService.prototype, "setLevel", null);
__decorate([
    Unsupported
], UserDataSyncLogService.prototype, "trace", null);
__decorate([
    Unsupported
], UserDataSyncLogService.prototype, "debug", null);
__decorate([
    Unsupported
], UserDataSyncLogService.prototype, "info", null);
__decorate([
    Unsupported
], UserDataSyncLogService.prototype, "warn", null);
__decorate([
    Unsupported
], UserDataSyncLogService.prototype, "error", null);
__decorate([
    Unsupported
], UserDataSyncLogService.prototype, "flush", null);
__decorate([
    Unsupported
], UserDataSyncLogService.prototype, "dispose", null);
registerSingleton(IUserDataSyncLogService, UserDataSyncLogService, InstantiationType.Delayed);
class UserDataSyncService {
    constructor() {
        this.status = SyncStatus.Uninitialized;
        this.onDidChangeStatus = Event.None;
        this.conflicts = [];
        this.onDidChangeConflicts = Event.None;
        this.onDidChangeLocal = Event.None;
        this.onSyncErrors = Event.None;
        this.onDidChangeLastSyncTime = Event.None;
        this.onDidResetRemote = Event.None;
        this.onDidResetLocal = Event.None;
    }
    createSyncTask() {
        unsupported();
    }
    createManualSyncTask() {
        unsupported();
    }
    resolveContent() {
        unsupported();
    }
    accept() {
        unsupported();
    }
    reset() {
        unsupported();
    }
    resetRemote() {
        unsupported();
    }
    cleanUpRemoteData() {
        unsupported();
    }
    resetLocal() {
        unsupported();
    }
    hasLocalData() {
        unsupported();
    }
    hasPreviouslySynced() {
        unsupported();
    }
    replace() {
        unsupported();
    }
    saveRemoteActivityData() {
        unsupported();
    }
    extractActivityData() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncService.prototype, "createSyncTask", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "createManualSyncTask", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "resolveContent", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "accept", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "reset", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "resetRemote", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "cleanUpRemoteData", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "resetLocal", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "hasLocalData", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "hasPreviouslySynced", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "replace", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "saveRemoteActivityData", null);
__decorate([
    Unsupported
], UserDataSyncService.prototype, "extractActivityData", null);
registerSingleton(IUserDataSyncService, UserDataSyncService, InstantiationType.Delayed);
class UserDataSyncMachinesService {
    constructor() {
        this.onDidChange = Event.None;
    }
    getMachines() {
        unsupported();
    }
    addCurrentMachine() {
        unsupported();
    }
    removeCurrentMachine() {
        unsupported();
    }
    renameMachine() {
        unsupported();
    }
    setEnablements() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncMachinesService.prototype, "getMachines", null);
__decorate([
    Unsupported
], UserDataSyncMachinesService.prototype, "addCurrentMachine", null);
__decorate([
    Unsupported
], UserDataSyncMachinesService.prototype, "removeCurrentMachine", null);
__decorate([
    Unsupported
], UserDataSyncMachinesService.prototype, "renameMachine", null);
__decorate([
    Unsupported
], UserDataSyncMachinesService.prototype, "setEnablements", null);
registerSingleton(IUserDataSyncMachinesService, UserDataSyncMachinesService, InstantiationType.Delayed);
class UserDataSyncResourceProviderService {
    getRemoteSyncedProfiles() {
        unsupported();
    }
    getLocalSyncedProfiles() {
        unsupported();
    }
    getRemoteSyncResourceHandles() {
        unsupported();
    }
    getLocalSyncResourceHandles() {
        unsupported();
    }
    getAssociatedResources() {
        unsupported();
    }
    getMachineId() {
        unsupported();
    }
    getLocalSyncedMachines() {
        unsupported();
    }
    resolveContent() {
        unsupported();
    }
    resolveUserDataSyncResource() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncResourceProviderService.prototype, "getRemoteSyncedProfiles", null);
__decorate([
    Unsupported
], UserDataSyncResourceProviderService.prototype, "getLocalSyncedProfiles", null);
__decorate([
    Unsupported
], UserDataSyncResourceProviderService.prototype, "getRemoteSyncResourceHandles", null);
__decorate([
    Unsupported
], UserDataSyncResourceProviderService.prototype, "getLocalSyncResourceHandles", null);
__decorate([
    Unsupported
], UserDataSyncResourceProviderService.prototype, "getAssociatedResources", null);
__decorate([
    Unsupported
], UserDataSyncResourceProviderService.prototype, "getMachineId", null);
__decorate([
    Unsupported
], UserDataSyncResourceProviderService.prototype, "getLocalSyncedMachines", null);
__decorate([
    Unsupported
], UserDataSyncResourceProviderService.prototype, "resolveContent", null);
__decorate([
    Unsupported
], UserDataSyncResourceProviderService.prototype, "resolveUserDataSyncResource", null);
registerSingleton(IUserDataSyncResourceProviderService, UserDataSyncResourceProviderService, InstantiationType.Delayed);
class UserDataSyncLocalStoreService {
    writeResource() {
        unsupported();
    }
    getAllResourceRefs() {
        unsupported();
    }
    resolveResourceContent() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncLocalStoreService.prototype, "writeResource", null);
__decorate([
    Unsupported
], UserDataSyncLocalStoreService.prototype, "getAllResourceRefs", null);
__decorate([
    Unsupported
], UserDataSyncLocalStoreService.prototype, "resolveResourceContent", null);
registerSingleton(IUserDataSyncLocalStoreService, UserDataSyncLocalStoreService, InstantiationType.Delayed);
class UserDataSyncUtilService {
    constructor() {
        this.resolveDefaultCoreIgnoredSettings = async () => [];
    }
    resolveUserBindings() {
        unsupported();
    }
    resolveFormattingOptions() {
        unsupported();
    }
    resolveDefaultIgnoredSettings() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataSyncUtilService.prototype, "resolveUserBindings", null);
__decorate([
    Unsupported
], UserDataSyncUtilService.prototype, "resolveFormattingOptions", null);
__decorate([
    Unsupported
], UserDataSyncUtilService.prototype, "resolveDefaultIgnoredSettings", null);
registerSingleton(IUserDataSyncUtilService, UserDataSyncUtilService, InstantiationType.Delayed);
class UserDataProfileManagementService {
    getDefaultProfileToUse() {
        unsupported();
    }
    createProfile() {
        unsupported();
    }
    createAndEnterProfile() {
        unsupported();
    }
    createAndEnterTransientProfile() {
        unsupported();
    }
    removeProfile() {
        unsupported();
    }
    updateProfile() {
        unsupported();
    }
    switchProfile() {
        unsupported();
    }
    getBuiltinProfileTemplates() {
        unsupported();
    }
}
__decorate([
    Unsupported
], UserDataProfileManagementService.prototype, "getDefaultProfileToUse", null);
__decorate([
    Unsupported
], UserDataProfileManagementService.prototype, "createProfile", null);
__decorate([
    Unsupported
], UserDataProfileManagementService.prototype, "createAndEnterProfile", null);
__decorate([
    Unsupported
], UserDataProfileManagementService.prototype, "createAndEnterTransientProfile", null);
__decorate([
    Unsupported
], UserDataProfileManagementService.prototype, "removeProfile", null);
__decorate([
    Unsupported
], UserDataProfileManagementService.prototype, "updateProfile", null);
__decorate([
    Unsupported
], UserDataProfileManagementService.prototype, "switchProfile", null);
__decorate([
    Unsupported
], UserDataProfileManagementService.prototype, "getBuiltinProfileTemplates", null);
registerSingleton(IUserDataProfileManagementService, UserDataProfileManagementService, InstantiationType.Delayed);
class WorkingCopyHistoryService {
    constructor() {
        this.onDidAddEntry = Event.None;
        this.onDidChangeEntry = Event.None;
        this.onDidReplaceEntry = Event.None;
        this.onDidRemoveEntry = Event.None;
        this.onDidMoveEntries = Event.None;
        this.onDidRemoveEntries = Event.None;
        this.getEntries = async () => [];
        this.getAll = async () => [];
    }
    addEntry() {
        unsupported();
    }
    updateEntry() {
        unsupported();
    }
    removeEntry() {
        unsupported();
    }
    moveEntries() {
        unsupported();
    }
    removeAll() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkingCopyHistoryService.prototype, "addEntry", null);
__decorate([
    Unsupported
], WorkingCopyHistoryService.prototype, "updateEntry", null);
__decorate([
    Unsupported
], WorkingCopyHistoryService.prototype, "removeEntry", null);
__decorate([
    Unsupported
], WorkingCopyHistoryService.prototype, "moveEntries", null);
__decorate([
    Unsupported
], WorkingCopyHistoryService.prototype, "removeAll", null);
registerSingleton(IWorkingCopyHistoryService, WorkingCopyHistoryService, InstantiationType.Delayed);
class NotebookDocumentService {
    constructor() {
        this.getNotebook = () => undefined;
    }
    addNotebookDocument() {
        unsupported();
    }
    removeNotebookDocument() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookDocumentService.prototype, "addNotebookDocument", null);
__decorate([
    Unsupported
], NotebookDocumentService.prototype, "removeNotebookDocument", null);
registerSingleton(INotebookDocumentService, NotebookDocumentService, InstantiationType.Delayed);
class DebugVisualizerService {
    registerTree() {
        unsupported();
    }
    getVisualizedNodeFor() {
        unsupported();
    }
    getVisualizedChildren() {
        unsupported();
    }
    editTreeItem() {
        unsupported();
    }
    getApplicableFor() {
        unsupported();
    }
    register() {
        unsupported();
    }
}
__decorate([
    Unsupported
], DebugVisualizerService.prototype, "registerTree", null);
__decorate([
    Unsupported
], DebugVisualizerService.prototype, "getVisualizedNodeFor", null);
__decorate([
    Unsupported
], DebugVisualizerService.prototype, "getVisualizedChildren", null);
__decorate([
    Unsupported
], DebugVisualizerService.prototype, "editTreeItem", null);
__decorate([
    Unsupported
], DebugVisualizerService.prototype, "getApplicableFor", null);
__decorate([
    Unsupported
], DebugVisualizerService.prototype, "register", null);
registerSingleton(IDebugVisualizerService, DebugVisualizerService, InstantiationType.Delayed);
class EditSessionsLogService {
    constructor() {
        this.onDidChangeLogLevel = Event.None;
    }
    getLevel() {
        unsupported();
    }
    setLevel() {
        unsupported();
    }
    trace() {
        unsupported();
    }
    debug() {
        unsupported();
    }
    info() {
        unsupported();
    }
    warn() {
        unsupported();
    }
    error() {
        unsupported();
    }
    flush() {
        unsupported();
    }
    dispose() {
        unsupported();
    }
}
__decorate([
    Unsupported
], EditSessionsLogService.prototype, "getLevel", null);
__decorate([
    Unsupported
], EditSessionsLogService.prototype, "setLevel", null);
__decorate([
    Unsupported
], EditSessionsLogService.prototype, "trace", null);
__decorate([
    Unsupported
], EditSessionsLogService.prototype, "debug", null);
__decorate([
    Unsupported
], EditSessionsLogService.prototype, "info", null);
__decorate([
    Unsupported
], EditSessionsLogService.prototype, "warn", null);
__decorate([
    Unsupported
], EditSessionsLogService.prototype, "error", null);
__decorate([
    Unsupported
], EditSessionsLogService.prototype, "flush", null);
__decorate([
    Unsupported
], EditSessionsLogService.prototype, "dispose", null);
registerSingleton(IEditSessionsLogService, EditSessionsLogService, InstantiationType.Delayed);
class EditSessionsWorkbenchService {
    constructor() {
        this.SIZE_LIMIT = 0;
        this.isSignedIn = false;
        this.onDidSignIn = Event.None;
        this.onDidSignOut = Event.None;
        this.storeClient = undefined;
        this.lastReadResources = new Map();
        this.lastWrittenResources = new Map();
    }
    initialize() {
        unsupported();
    }
    read() {
        unsupported();
    }
    write() {
        unsupported();
    }
    delete() {
        unsupported();
    }
    list() {
        unsupported();
    }
    getMachineById() {
        unsupported();
    }
}
__decorate([
    Unsupported
], EditSessionsWorkbenchService.prototype, "initialize", null);
__decorate([
    Unsupported
], EditSessionsWorkbenchService.prototype, "read", null);
__decorate([
    Unsupported
], EditSessionsWorkbenchService.prototype, "write", null);
__decorate([
    Unsupported
], EditSessionsWorkbenchService.prototype, "delete", null);
__decorate([
    Unsupported
], EditSessionsWorkbenchService.prototype, "list", null);
__decorate([
    Unsupported
], EditSessionsWorkbenchService.prototype, "getMachineById", null);
registerSingleton(IEditSessionsStorageService, EditSessionsWorkbenchService, InstantiationType.Delayed);
class MultiDiffSourceResolverService {
    constructor() {
        this.registerResolver = () => Disposable.None;
        this.resolve = async () => undefined;
    }
}
registerSingleton(IMultiDiffSourceResolverService, MultiDiffSourceResolverService, InstantiationType.Delayed);
registerSingleton(IWorkspaceTagsService, NoOpWorkspaceTagsService, InstantiationType.Delayed);
class ExtensionFeaturesManagementService {
    constructor() {
        this.getAllAccessDataForExtension = () => new Map();
        this.onDidChangeEnablement = Event.None;
        this.isEnabled = () => true;
        this.onDidChangeAccessData = Event.None;
        this.getAccessData = () => undefined;
    }
    setEnablement() {
        unsupported();
    }
    getEnablementData() {
        unsupported();
    }
    getAccess() {
        unsupported();
    }
    setStatus() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ExtensionFeaturesManagementService.prototype, "setEnablement", null);
__decorate([
    Unsupported
], ExtensionFeaturesManagementService.prototype, "getEnablementData", null);
__decorate([
    Unsupported
], ExtensionFeaturesManagementService.prototype, "getAccess", null);
__decorate([
    Unsupported
], ExtensionFeaturesManagementService.prototype, "setStatus", null);
registerSingleton(IExtensionFeaturesManagementService, ExtensionFeaturesManagementService, InstantiationType.Delayed);
class EditorPaneService {
    constructor() {
        this.onWillInstantiateEditorPane = Event.None;
        this.didInstantiateEditorPane = () => false;
    }
}
registerSingleton(IEditorPaneService, EditorPaneService, InstantiationType.Delayed);
class WorkspaceIdentityService {
    matches() {
        unsupported();
    }
    getWorkspaceStateFolders() {
        unsupported();
    }
}
__decorate([
    Unsupported
], WorkspaceIdentityService.prototype, "matches", null);
__decorate([
    Unsupported
], WorkspaceIdentityService.prototype, "getWorkspaceStateFolders", null);
registerSingleton(IWorkspaceIdentityService, WorkspaceIdentityService, InstantiationType.Delayed);
class DefaultLogLevelsService {
    constructor() {
        this.onDidChangeDefaultLogLevels = Event.None;
        this.getDefaultLogLevel = async () => LogLevel.Off;
    }
    getDefaultLogLevels() {
        unsupported();
    }
    setDefaultLogLevel() {
        unsupported();
    }
    migrateLogLevels() {
        unsupported();
    }
}
__decorate([
    Unsupported
], DefaultLogLevelsService.prototype, "getDefaultLogLevels", null);
__decorate([
    Unsupported
], DefaultLogLevelsService.prototype, "setDefaultLogLevel", null);
__decorate([
    Unsupported
], DefaultLogLevelsService.prototype, "migrateLogLevels", null);
registerSingleton(IDefaultLogLevelsService, DefaultLogLevelsService, InstantiationType.Delayed);
class CustomEditorLabelService {
    constructor() {
        this.onDidChange = Event.None;
        this.getName = () => undefined;
    }
}
registerSingleton(ICustomEditorLabelService, CustomEditorLabelService, InstantiationType.Delayed);
class TroubleshootIssueService {
    constructor() {
        this.isActive = () => false;
    }
    start() {
        unsupported();
    }
    resume() {
        unsupported();
    }
    stop() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TroubleshootIssueService.prototype, "start", null);
__decorate([
    Unsupported
], TroubleshootIssueService.prototype, "resume", null);
__decorate([
    Unsupported
], TroubleshootIssueService.prototype, "stop", null);
registerSingleton(ITroubleshootIssueService, TroubleshootIssueService, InstantiationType.Delayed);
class IntegrityService {
    async isPure() {
        return {
            isPure: false,
            proof: []
        };
    }
}
registerSingleton(IIntegrityService, IntegrityService, InstantiationType.Delayed);
class TrustedDomainService {
    isValid() {
        return false;
    }
}
registerSingleton(ITrustedDomainService, TrustedDomainService, InstantiationType.Delayed);
class LanguageModelToolsService {
    constructor() {
        this.getTool = () => undefined;
        this.getToolByName = () => undefined;
        this.onDidChangeTools = Event.None;
        this.getTools = () => [];
    }
    registerToolData() {
        unsupported();
    }
    registerToolImplementation() {
        unsupported();
    }
    invokeTool() {
        unsupported();
    }
    cancelToolCallsForRequest() {
        unsupported();
    }
}
__decorate([
    Unsupported
], LanguageModelToolsService.prototype, "registerToolData", null);
__decorate([
    Unsupported
], LanguageModelToolsService.prototype, "registerToolImplementation", null);
__decorate([
    Unsupported
], LanguageModelToolsService.prototype, "invokeTool", null);
__decorate([
    Unsupported
], LanguageModelToolsService.prototype, "cancelToolCallsForRequest", null);
registerSingleton(ILanguageModelToolsService, LanguageModelToolsService, InstantiationType.Delayed);
class IssueFormService {
    openReporter() {
        unsupported();
    }
    reloadWithExtensionsDisabled() {
        unsupported();
    }
    showConfirmCloseDialog() {
        unsupported();
    }
    showClipboardDialog() {
        unsupported();
    }
    sendReporterMenu() {
        unsupported();
    }
    closeReporter() {
        unsupported();
    }
}
__decorate([
    Unsupported
], IssueFormService.prototype, "openReporter", null);
__decorate([
    Unsupported
], IssueFormService.prototype, "reloadWithExtensionsDisabled", null);
__decorate([
    Unsupported
], IssueFormService.prototype, "showConfirmCloseDialog", null);
__decorate([
    Unsupported
], IssueFormService.prototype, "showClipboardDialog", null);
__decorate([
    Unsupported
], IssueFormService.prototype, "sendReporterMenu", null);
__decorate([
    Unsupported
], IssueFormService.prototype, "closeReporter", null);
registerSingleton(IIssueFormService, IssueFormService, InstantiationType.Delayed);
class CodeMapperService {
    constructor() {
        this.providers = [];
        this.mapCodeFromResponse = async () => undefined;
        this.mapCode = async () => undefined;
    }
    registerCodeMapperProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], CodeMapperService.prototype, "registerCodeMapperProvider", null);
registerSingleton(ICodeMapperService, CodeMapperService, InstantiationType.Delayed);
class ChatEditingService {
    constructor() {
        this.getOrRestoreEditingSession = async () => null;
        this.hasRelatedFilesProviders = () => false;
        this.getRelatedFiles = async () => undefined;
        this.onDidChangeEditingSession = Event.None;
        this.currentAutoApplyOperation = null;
        this.editingSessionFileLimit = 0;
        this.getEditingSession = () => undefined;
        this.onDidCreateEditingSession = Event.None;
        this.currentEditingSession = null;
    }
    get editingSessionsObs() {
        return unsupported();
    }
    get createAdhocEditingSession() {
        return unsupported();
    }
    registerRelatedFilesProvider() {
        return unsupported();
    }
    get currentEditingSessionObs() {
        return unsupported();
    }
    triggerEditComputation() {
        unsupported();
    }
    createSnapshot() {
        unsupported();
    }
    getSnapshotUri() {
        unsupported();
    }
    restoreSnapshot() {
        unsupported();
    }
    startOrContinueEditingSession() {
        unsupported();
    }
    startOrContinueGlobalEditingSession() {
        unsupported();
    }
    createEditingSession() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ChatEditingService.prototype, "editingSessionsObs", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "createAdhocEditingSession", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "registerRelatedFilesProvider", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "currentEditingSessionObs", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "triggerEditComputation", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "createSnapshot", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "getSnapshotUri", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "restoreSnapshot", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "startOrContinueEditingSession", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "startOrContinueGlobalEditingSession", null);
__decorate([
    Unsupported
], ChatEditingService.prototype, "createEditingSession", null);
registerSingleton(IChatEditingService, ChatEditingService, InstantiationType.Delayed);
class ActionViewItemService {
    constructor() {
        this.onDidChange = Event.None;
        this.lookUp = () => undefined;
    }
    register() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ActionViewItemService.prototype, "register", null);
registerSingleton(IActionViewItemService, ActionViewItemService, InstantiationType.Delayed);
class TreeSitterTokenizationFeature {
}
registerSingleton(ITreeSitterTokenizationFeature, TreeSitterTokenizationFeature, InstantiationType.Delayed);
class TreeSitterTokenizationStoreService {
    constructor() {
        this.hasTokens = () => false;
        this.getTokens = () => undefined;
    }
    setTokens() {
        unsupported();
    }
    updateTokens() {
        unsupported();
    }
    markForRefresh() {
        unsupported();
    }
    getNeedsRefresh() {
        unsupported();
    }
    rangeHasTokens() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TreeSitterTokenizationStoreService.prototype, "setTokens", null);
__decorate([
    Unsupported
], TreeSitterTokenizationStoreService.prototype, "updateTokens", null);
__decorate([
    Unsupported
], TreeSitterTokenizationStoreService.prototype, "markForRefresh", null);
__decorate([
    Unsupported
], TreeSitterTokenizationStoreService.prototype, "getNeedsRefresh", null);
__decorate([
    Unsupported
], TreeSitterTokenizationStoreService.prototype, "rangeHasTokens", null);
registerSingleton(ITreeSitterTokenizationStoreService, TreeSitterTokenizationStoreService, InstantiationType.Delayed);
class LanguageModelIgnoredFilesService {
    constructor() {
        this.fileIsIgnored = async () => false;
    }
    registerIgnoredFileProvider() {
        unsupported();
    }
}
__decorate([
    Unsupported
], LanguageModelIgnoredFilesService.prototype, "registerIgnoredFileProvider", null);
registerSingleton(ILanguageModelIgnoredFilesService, LanguageModelIgnoredFilesService, InstantiationType.Delayed);
class AllowedExtensionsService {
    constructor() {
        this.onDidChangeAllowedExtensionsConfigValue = Event.None;
        this.onDidChangeAllowedExtensions = Event.None;
        this.isAllowed = () => true;
    }
}
registerSingleton(IAllowedExtensionsService, AllowedExtensionsService, InstantiationType.Delayed);
class ChatQuotasService {
    constructor() {
        this.onDidChangeQuotas = Event.None;
        this.onDidChangeQuotaExceeded = Event.None;
        this.onDidChangeQuotaRemaining = Event.None;
    }
    get quotas() {
        return unsupported();
    }
    acceptQuotas() {
        unsupported();
    }
    clearQuotas() {
        unsupported();
    }
}
__decorate([
    Unsupported
], ChatQuotasService.prototype, "quotas", null);
__decorate([
    Unsupported
], ChatQuotasService.prototype, "acceptQuotas", null);
__decorate([
    Unsupported
], ChatQuotasService.prototype, "clearQuotas", null);
registerSingleton(IChatQuotasService, ChatQuotasService, InstantiationType.Delayed);
class NotebookSynchronizerService {
    revert() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookSynchronizerService.prototype, "revert", null);
registerSingleton(INotebookSynchronizerService, NotebookSynchronizerService, InstantiationType.Delayed);
class NotebookOriginalCellModelFactory {
    getOrCreate() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookOriginalCellModelFactory.prototype, "getOrCreate", null);
registerSingleton(INotebookOriginalCellModelFactory, NotebookOriginalCellModelFactory, InstantiationType.Delayed);
class NotebookOriginalModelReferenceFactory {
    getOrCreate() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookOriginalModelReferenceFactory.prototype, "getOrCreate", null);
registerSingleton(INotebookOriginalModelReferenceFactory, NotebookOriginalModelReferenceFactory, InstantiationType.Delayed);
class NotebookModelSynchronizerFactory {
    getOrCreate() {
        unsupported();
    }
}
__decorate([
    Unsupported
], NotebookModelSynchronizerFactory.prototype, "getOrCreate", null);
registerSingleton(INotebookModelSynchronizerFactory, NotebookModelSynchronizerFactory, InstantiationType.Delayed);
class QuickDiffModelService {
    constructor() {
        this.createQuickDiffModelReference = () => undefined;
        this.getDirtyDiffModel = () => undefined;
        this.getDiffModel = () => undefined;
    }
}
registerSingleton(IQuickDiffModelService, QuickDiffModelService, InstantiationType.Delayed);
class TerminalCompletionService {
    get providers() {
        return unsupported();
    }
    registerTerminalCompletionProvider() {
        unsupported();
    }
    provideCompletions() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TerminalCompletionService.prototype, "providers", null);
__decorate([
    Unsupported
], TerminalCompletionService.prototype, "registerTerminalCompletionProvider", null);
__decorate([
    Unsupported
], TerminalCompletionService.prototype, "provideCompletions", null);
registerSingleton(ITerminalCompletionService, TerminalCompletionService, InstantiationType.Delayed);
class TreeSitterImporter {
    constructor() {
        this.parserClass = undefined;
    }
    getParserClass() {
        unsupported();
    }
    getLanguageClass() {
        unsupported();
    }
    getQueryClass() {
        unsupported();
    }
}
__decorate([
    Unsupported
], TreeSitterImporter.prototype, "getParserClass", null);
__decorate([
    Unsupported
], TreeSitterImporter.prototype, "getLanguageClass", null);
__decorate([
    Unsupported
], TreeSitterImporter.prototype, "getQueryClass", null);
registerSingleton(ITreeSitterImporter, TreeSitterImporter, InstantiationType.Eager);
class ChatEntitlementsService {
    constructor() {
        this.resolve = async () => undefined;
    }
}
registerSingleton(IChatEntitlementsService, ChatEntitlementsService, InstantiationType.Eager);
class PromptsService {
    constructor() {
        this.listPromptFiles = async () => [];
        this.getSourceFolders = () => [];
    }
    getSyntaxParserFor() {
        unsupported();
    }
    dispose() { }
}
__decorate([
    Unsupported
], PromptsService.prototype, "getSyntaxParserFor", null);
registerSingleton(IPromptsService, PromptsService, InstantiationType.Eager);
