import { IDialogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service";
import { ILanguagePackItem } from "@codingame/monaco-vscode-7ba0af96-90c2-5e11-ad7f-befdbbf246c8-common/vscode/vs/platform/languagePacks/common/languagePacks";
import { IActiveLanguagePackService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/localization/common/locale.service";
import { ILocaleService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/localization/common/locale.service";
import { IHostService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/host/browser/host.service";
import { IProductService } from "@codingame/monaco-vscode-api/vscode/vs/platform/product/common/productService.service";
import { IExtensionGalleryService } from "@codingame/monaco-vscode-api/vscode/vs/platform/extensionManagement/common/extensionManagement.service";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
export declare abstract class AbstractLocaleService implements ILocaleService {
    private readonly dialogService;
    private readonly hostService;
    private readonly productService;
    readonly _serviceBrand: undefined;
    constructor(dialogService: IDialogService, hostService: IHostService, productService: IProductService);
    abstract storeLocale(locale: string | undefined, extensionId: string | undefined): Promise<void>;
    abstract clearLocale(): Promise<void>;
    setLocale(languagePackItem: ILanguagePackItem, _skipDialog?: boolean): Promise<void>;
    clearLocalePreference(): Promise<void>;
}
export declare class WebLocaleService extends AbstractLocaleService {
    storeLocale(locale: string | undefined, extensionId: string | undefined): Promise<void>;
    clearLocale(): Promise<void>;
}
export declare class WebActiveLanguagePackService implements IActiveLanguagePackService {
    private readonly galleryService;
    private readonly logService;
    _serviceBrand: undefined;
    constructor(galleryService: IExtensionGalleryService, logService: ILogService);
    getExtensionIdProvidingCurrentLocale(): Promise<string | undefined>;
}
