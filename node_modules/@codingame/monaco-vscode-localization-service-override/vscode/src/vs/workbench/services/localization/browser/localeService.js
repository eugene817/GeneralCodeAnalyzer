
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { Language } from '@codingame/monaco-vscode-api/vscode/vs/base/common/platform';
import { IDialogService } from '@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service';
import '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { IHostService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/host/browser/host.service';
import { IProductService } from '@codingame/monaco-vscode-api/vscode/vs/platform/product/common/productService.service';
import '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/extensions';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation';

new (class LocaleStorage {
    static { this.LOCAL_STORAGE_LOCALE_KEY = 'vscode.nls.locale'; }
    static { this.LOCAL_STORAGE_EXTENSION_ID_KEY = 'vscode.nls.languagePackExtensionId'; }
    setLocale(locale) {
        localStorage.setItem(LocaleStorage.LOCAL_STORAGE_LOCALE_KEY, locale);
        this.doSetLocaleToCookie(locale);
    }
    doSetLocaleToCookie(locale) {
        document.cookie = `${LocaleStorage.LOCAL_STORAGE_LOCALE_KEY}=${locale};path=/;max-age=3153600000`;
    }
    clearLocale() {
        localStorage.removeItem(LocaleStorage.LOCAL_STORAGE_LOCALE_KEY);
        this.doClearLocaleToCookie();
    }
    doClearLocaleToCookie() {
        document.cookie = `${LocaleStorage.LOCAL_STORAGE_LOCALE_KEY}=;path=/;max-age=0`;
    }
    setExtensionId(extensionId) {
        localStorage.setItem(LocaleStorage.LOCAL_STORAGE_EXTENSION_ID_KEY, extensionId);
    }
    getExtensionId() {
        return localStorage.getItem(LocaleStorage.LOCAL_STORAGE_EXTENSION_ID_KEY);
    }
    clearExtensionId() {
        localStorage.removeItem(LocaleStorage.LOCAL_STORAGE_EXTENSION_ID_KEY);
    }
});
let AbstractLocaleService = class AbstractLocaleService {
    constructor(dialogService, hostService, productService) {
        this.dialogService = dialogService;
        this.hostService = hostService;
        this.productService = productService;
    }
    async setLocale(languagePackItem, _skipDialog = false) {
        const locale = languagePackItem.id;
        if (locale === Language.value() || (!locale && Language.value() === navigator.language.toLowerCase())) {
            return;
        }
        this.storeLocale(locale, languagePackItem.extensionId);
        const restartDialog = await this.dialogService.confirm({
            type: 'info',
            message: ( localize(
                12016,
                "To change the display language, {0} needs to reload",
                this.productService.nameLong
            )),
            detail: ( localize(
                12017,
                "Press the reload button to refresh the page and set the display language to {0}.",
                languagePackItem.label
            )),
            primaryButton: ( localize(12018, "&&Reload")),
        });
        if (restartDialog.confirmed) {
            this.hostService.restart();
        }
    }
    async clearLocalePreference() {
        this.clearLocale();
        if (Language.value() === navigator.language.toLowerCase()) {
            return;
        }
        const restartDialog = await this.dialogService.confirm({
            type: 'info',
            message: ( localize(
                12019,
                "To change the display language, {0} needs to reload",
                this.productService.nameLong
            )),
            detail: ( localize(
                12020,
                "Press the reload button to refresh the page and use your browser's language."
            )),
            primaryButton: ( localize(12018, "&&Reload")),
        });
        if (restartDialog.confirmed) {
            this.hostService.restart();
        }
    }
};
AbstractLocaleService = ( __decorate([
    ( __param(0, IDialogService)),
    ( __param(1, IHostService)),
    ( __param(2, IProductService))
], AbstractLocaleService));

export { AbstractLocaleService };
