import { ICodeEditor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorBrowser";
import { EditorAction2 } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorExtensions";
import { InlineChatController, InlineChatController1, InlineChatController2 } from "@codingame/monaco-vscode-29bc1406-2925-5b8f-b25e-d04a7772d896-common/vscode/vs/workbench/contrib/inlineChat/browser/inlineChatController";
import { Action2, IAction2Options } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { ServicesAccessor } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { HunkInformation } from "@codingame/monaco-vscode-29bc1406-2925-5b8f-b25e-d04a7772d896-common/vscode/vs/workbench/contrib/inlineChat/browser/inlineChatSession";
export declare const START_INLINE_CHAT: import("@codingame/monaco-vscode-api/vscode/vs/base/common/themables").ThemeIcon;
export interface IHoldForSpeech {
    (accessor: ServicesAccessor, controller: InlineChatController, source: Action2): void;
}
export declare function setHoldForSpeech(holdForSpeech: IHoldForSpeech): void;
export declare class StartSessionAction extends Action2 {
    constructor();
    run(accessor: ServicesAccessor, ...args: any[]): any;
    private _runEditorCommand;
}
export declare class FocusInlineChat extends EditorAction2 {
    constructor();
    runEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor, ..._args: any[]): void;
}
export declare class UnstashSessionAction extends EditorAction2 {
    constructor();
    runEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor, ..._args: any[]): Promise<void>;
}
export declare abstract class AbstractInline1ChatAction extends EditorAction2 {
    static readonly category: import("@codingame/monaco-vscode-api/vscode/vs/nls").ILocalizedString;
    constructor(desc: IAction2Options);
    runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, ..._args: any[]): void;
    abstract runInlineChatCommand(accessor: ServicesAccessor, ctrl: InlineChatController1, editor: ICodeEditor, ...args: any[]): void;
}
export declare class ArrowOutUpAction extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController1, _editor: ICodeEditor, ..._args: any[]): void;
}
export declare class ArrowOutDownAction extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController1, _editor: ICodeEditor, ..._args: any[]): void;
}
export declare class AcceptChanges extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController1, _editor: ICodeEditor, hunk?: HunkInformation | any): Promise<void>;
}
export declare class DiscardHunkAction extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController1, _editor: ICodeEditor, hunk?: HunkInformation | any): Promise<void>;
}
export declare class RerunAction extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(accessor: ServicesAccessor, ctrl: InlineChatController1, _editor: ICodeEditor, ..._args: any[]): Promise<void>;
}
export declare class CloseAction extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController1, _editor: ICodeEditor, ..._args: any[]): Promise<void>;
}
export declare class ConfigureInlineChatAction extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(accessor: ServicesAccessor, ctrl: InlineChatController1, _editor: ICodeEditor, ..._args: any[]): Promise<void>;
}
export declare class MoveToNextHunk extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(accessor: ServicesAccessor, ctrl: InlineChatController1, editor: ICodeEditor, ...args: any[]): void;
}
export declare class MoveToPreviousHunk extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(accessor: ServicesAccessor, ctrl: InlineChatController1, editor: ICodeEditor, ...args: any[]): void;
}
export declare class ViewInChatAction extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController1, _editor: ICodeEditor, ..._args: any[]): Promise<void>;
}
export declare class ToggleDiffForChange extends AbstractInline1ChatAction {
    constructor();
    runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController1, _editor: ICodeEditor, hunkInfo: HunkInformation | any): void;
}
declare abstract class AbstractInline2ChatAction extends EditorAction2 {
    static readonly category: import("@codingame/monaco-vscode-api/vscode/vs/nls").ILocalizedString;
    constructor(desc: IAction2Options);
    runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, ..._args: any[]): void;
    abstract runInlineChatCommand(accessor: ServicesAccessor, ctrl: InlineChatController2, editor: ICodeEditor, ...args: any[]): void;
}
export declare class StopSessionAction2 extends AbstractInline2ChatAction {
    constructor();
    runInlineChatCommand(accessor: ServicesAccessor, _ctrl: InlineChatController2, editor: ICodeEditor, ...args: any[]): void;
}
export declare class RevealWidget extends AbstractInline2ChatAction {
    constructor();
    runInlineChatCommand(_accessor: ServicesAccessor, ctrl: InlineChatController2, _editor: ICodeEditor): void;
}
export {};
