import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IExpression } from "@codingame/monaco-vscode-api/vscode/vs/base/common/glob";
import { IWorkspaceContextService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace.service";
import { IConfigurationChangeEvent } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
export declare class ResourceGlobMatcher extends Disposable {
    private getExpression;
    private shouldUpdate;
    private readonly contextService;
    private readonly configurationService;
    private static readonly NO_FOLDER;
    private readonly _onExpressionChange;
    readonly onExpressionChange: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private readonly mapFolderToParsedExpression;
    private readonly mapFolderToConfiguredExpression;
    constructor(getExpression: (folder?: URI) => IExpression | undefined, shouldUpdate: (event: IConfigurationChangeEvent) => boolean, contextService: IWorkspaceContextService, configurationService: IConfigurationService);
    private registerListeners;
    private updateExpressions;
    private doGetExpression;
    matches(resource: URI, hasSibling?: (name: string) => boolean): boolean;
    private uriToPath;
}
