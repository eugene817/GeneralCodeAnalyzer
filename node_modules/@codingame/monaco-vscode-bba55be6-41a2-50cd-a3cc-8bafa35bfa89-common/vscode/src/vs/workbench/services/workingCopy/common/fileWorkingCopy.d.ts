import { IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { VSBufferReadableStream } from "@codingame/monaco-vscode-api/vscode/vs/base/common/buffer";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IWorkingCopy } from "@codingame/monaco-vscode-86d65fc6-30f9-5dca-9501-e249de688591-common/vscode/vs/workbench/services/workingCopy/common/workingCopy";
export interface IFileWorkingCopyModelFactory<M extends IFileWorkingCopyModel> {
    createModel(resource: URI, contents: VSBufferReadableStream, token: CancellationToken): Promise<M>;
}
export interface IFileWorkingCopyModelConfiguration {
    readonly backupDelay?: number;
}
export declare enum SnapshotContext {
    Save = 1,
    Backup = 2
}
export interface IFileWorkingCopyModel extends IDisposable {
    readonly onDidChangeContent: Event<unknown>;
    readonly onWillDispose: Event<void>;
    readonly configuration?: IFileWorkingCopyModelConfiguration;
    snapshot(context: SnapshotContext, token: CancellationToken): Promise<VSBufferReadableStream>;
    update(contents: VSBufferReadableStream, token: CancellationToken): Promise<void>;
}
export interface IFileWorkingCopy<M extends IFileWorkingCopyModel> extends IWorkingCopy, IDisposable {
    readonly onDidRevert: Event<void>;
    readonly onWillDispose: Event<void>;
    readonly model: M | undefined;
    resolve(): Promise<void>;
    isResolved(): this is IResolvedFileWorkingCopy<M>;
}
export interface IResolvedFileWorkingCopy<M extends IFileWorkingCopyModel> extends IFileWorkingCopy<M> {
    readonly model: M;
}
