import { VSBufferReadableStream } from "@codingame/monaco-vscode-api/vscode/vs/base/common/buffer";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IMarkdownString } from "@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IWriteFileOptions, IFileStatWithMetadata } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files";
import { ITelemetryService } from "@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetry.service";
import { IRevertOptions, ISaveOptions, IUntypedEditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorModel } from "@codingame/monaco-vscode-aff8bc9b-c6f8-578f-9c8a-f70d14f9c13c-common/vscode/vs/workbench/common/editor/editorModel";
import { NotebookTextModel } from "@codingame/monaco-vscode-notebook-service-override/vscode/vs/workbench/contrib/notebook/common/model/notebookTextModel";
import { INotebookEditorModel, INotebookLoadOptions, IResolvedNotebookEditorModel } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookCommon";
import { INotebookLoggingService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookLoggingService.service";
import { INotebookSerializer } from "@codingame/monaco-vscode-9b5a5e82-d649-5455-b4bf-ef90d6afd294-common/vscode/vs/workbench/contrib/notebook/common/notebookService";
import { INotebookService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookService.service";
import { IFilesConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/filesConfiguration/common/filesConfigurationService.service";
import { IFileWorkingCopyModelConfiguration, SnapshotContext } from "../../../services/workingCopy/common/fileWorkingCopy.js";
import { IFileWorkingCopyManager } from "@codingame/monaco-vscode-notebook-service-override/vscode/vs/workbench/services/workingCopy/common/fileWorkingCopyManager";
import { IStoredFileWorkingCopyModel, IStoredFileWorkingCopyModelContentChangedEvent, IStoredFileWorkingCopyModelFactory, IStoredFileWorkingCopySaveEvent } from "../../../services/workingCopy/common/storedFileWorkingCopy.js";
import { IUntitledFileWorkingCopyModel, IUntitledFileWorkingCopyModelContentChangedEvent, IUntitledFileWorkingCopyModelFactory } from "@codingame/monaco-vscode-notebook-service-override/vscode/vs/workbench/services/workingCopy/common/untitledFileWorkingCopy";
import { INotebookSynchronizerService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/notebook/common/notebookSynchronizerService.service";
export declare class SimpleNotebookEditorModel extends EditorModel implements INotebookEditorModel {
    readonly resource: URI;
    private readonly _hasAssociatedFilePath;
    readonly viewType: string;
    private readonly _workingCopyManager;
    private readonly _filesConfigurationService;
    private readonly _notebookSynchronizerService;
    private readonly _onDidChangeDirty;
    private readonly _onDidSave;
    private readonly _onDidChangeOrphaned;
    private readonly _onDidChangeReadonly;
    private readonly _onDidRevertUntitled;
    readonly onDidChangeDirty: Event<void>;
    readonly onDidSave: Event<IStoredFileWorkingCopySaveEvent>;
    readonly onDidChangeOrphaned: Event<void>;
    readonly onDidChangeReadonly: Event<void>;
    readonly onDidRevertUntitled: Event<void>;
    private _workingCopy?;
    private readonly _workingCopyListeners;
    private readonly scratchPad;
    constructor(resource: URI, _hasAssociatedFilePath: boolean, viewType: string, _workingCopyManager: IFileWorkingCopyManager<NotebookFileWorkingCopyModel, NotebookFileWorkingCopyModel>, scratchpad: boolean, _filesConfigurationService: IFilesConfigurationService, _notebookSynchronizerService: INotebookSynchronizerService);
    dispose(): void;
    get notebook(): NotebookTextModel | undefined;
    isResolved(): this is IResolvedNotebookEditorModel;
    canDispose(): Promise<boolean>;
    isDirty(): boolean;
    isModified(): boolean;
    isOrphaned(): boolean;
    hasAssociatedFilePath(): boolean;
    isReadonly(): boolean | IMarkdownString;
    get hasErrorState(): boolean;
    revert(options?: IRevertOptions): Promise<void>;
    save(options?: ISaveOptions): Promise<boolean>;
    load(options?: INotebookLoadOptions): Promise<IResolvedNotebookEditorModel>;
    saveAs(target: URI): Promise<IUntypedEditorInput | undefined>;
    private static _isStoredFileWorkingCopy;
}
export declare class NotebookFileWorkingCopyModel extends Disposable implements IStoredFileWorkingCopyModel, IUntitledFileWorkingCopyModel {
    private readonly _notebookModel;
    private readonly _notebookService;
    private readonly _configurationService;
    private readonly _telemetryService;
    private readonly _notebookLogService;
    private readonly _onDidChangeContent;
    readonly onDidChangeContent: Event<IStoredFileWorkingCopyModelContentChangedEvent & IUntitledFileWorkingCopyModelContentChangedEvent>;
    readonly onWillDispose: Event<void>;
    readonly configuration: IFileWorkingCopyModelConfiguration | undefined;
    save: ((options: IWriteFileOptions, token: CancellationToken) => Promise<IFileStatWithMetadata>) | undefined;
    constructor(_notebookModel: NotebookTextModel, _notebookService: INotebookService, _configurationService: IConfigurationService, _telemetryService: ITelemetryService, _notebookLogService: INotebookLoggingService);
    private setSaveDelegate;
    dispose(): void;
    get notebookModel(): NotebookTextModel;
    snapshot(context: SnapshotContext, token: CancellationToken): Promise<VSBufferReadableStream>;
    update(stream: VSBufferReadableStream, token: CancellationToken): Promise<void>;
    getNotebookSerializer(): Promise<INotebookSerializer>;
    get versionId(): string;
    pushStackElement(): void;
}
export declare class NotebookFileWorkingCopyModelFactory implements IStoredFileWorkingCopyModelFactory<NotebookFileWorkingCopyModel>, IUntitledFileWorkingCopyModelFactory<NotebookFileWorkingCopyModel> {
    private readonly _viewType;
    private readonly _notebookService;
    private readonly _configurationService;
    private readonly _telemetryService;
    private readonly _notebookLogService;
    constructor(_viewType: string, _notebookService: INotebookService, _configurationService: IConfigurationService, _telemetryService: ITelemetryService, _notebookLogService: INotebookLoggingService);
    createModel(resource: URI, stream: VSBufferReadableStream, token: CancellationToken): Promise<NotebookFileWorkingCopyModel>;
}
