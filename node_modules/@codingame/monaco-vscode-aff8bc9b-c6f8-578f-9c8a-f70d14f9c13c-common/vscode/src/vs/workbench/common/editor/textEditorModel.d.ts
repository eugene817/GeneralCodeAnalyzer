import { ITextModel, ITextBufferFactory, ITextSnapshot } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/model";
import { EditorModel } from "./editorModel.js";
import { ILanguageSupport } from "../../services/textfile/common/textfiles.js";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { ITextEditorModel, IResolvedTextEditorModel } from "@codingame/monaco-vscode-model-service-override/vscode/vs/editor/common/services/resolverService";
import { ILanguageSelection } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages/language";
import { ILanguageService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages/language.service";
import { IModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/model.service";
import { ILanguageDetectionService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/languageDetection/common/languageDetectionWorkerService.service";
import { IAccessibilityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/accessibility/common/accessibility.service";
import { IMarkdownString } from "@codingame/monaco-vscode-api/vscode/vs/base/common/htmlContent";
export declare class BaseTextEditorModel extends EditorModel implements ITextEditorModel, ILanguageSupport {
    protected modelService: IModelService;
    protected languageService: ILanguageService;
    private readonly languageDetectionService;
    private readonly accessibilityService;
    private static readonly AUTO_DETECT_LANGUAGE_THROTTLE_DELAY;
    protected textEditorModelHandle: URI | undefined;
    private createdEditorModel;
    private readonly modelDisposeListener;
    private readonly autoDetectLanguageThrottler;
    constructor(modelService: IModelService, languageService: ILanguageService, languageDetectionService: ILanguageDetectionService, accessibilityService: IAccessibilityService, textEditorModelHandle?: URI);
    private handleExistingModel;
    private registerModelDisposeListener;
    get textEditorModel(): ITextModel | null;
    isReadonly(): boolean | IMarkdownString;
    private _blockLanguageChangeListener;
    private _languageChangeSource;
    get languageChangeSource(): "user" | "api" | undefined;
    get hasLanguageSetExplicitly(): boolean;
    setLanguageId(languageId: string, source?: string): void;
    private setLanguageIdInternal;
    protected installModelListeners(model: ITextModel): void;
    getLanguageId(): string | undefined;
    protected autoDetectLanguage(): Promise<void>;
    private doAutoDetectLanguage;
    protected createTextEditorModel(value: ITextBufferFactory, resource: URI | undefined, preferredLanguageId?: string): ITextModel;
    private doCreateTextEditorModel;
    protected getFirstLineText(value: ITextBufferFactory | ITextModel): string;
    protected getOrCreateLanguage(resource: URI | undefined, languageService: ILanguageService, preferredLanguage: string | undefined, firstLineText?: string): ILanguageSelection;
    updateTextEditorModel(newValue?: ITextBufferFactory, preferredLanguageId?: string): void;
    createSnapshot(this: IResolvedTextEditorModel): ITextSnapshot;
    createSnapshot(this: ITextEditorModel): ITextSnapshot | null;
    isResolved(): this is IResolvedTextEditorModel;
    dispose(): void;
}
