import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { ICodeEditor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorBrowser";
import { IRange } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/core/range";
import * as languages from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages";
import { ITextModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/resolverService.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IContextKey } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IKeybindingService } from "@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybinding.service";
import { CommentMenus } from "@codingame/monaco-vscode-comments-service-override/vscode/vs/workbench/contrib/comments/browser/commentMenus";
import { ICommentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/comments/browser/commentService.service";
import { ICommentThreadWidget } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/comments/common/commentThreadWidget";
import { ICellRange } from "@codingame/monaco-vscode-9a6d8b6c-ad4c-5ea3-9558-f43d6dc4c0ad-common/vscode/vs/workbench/contrib/notebook/common/notebookRange";
import { LayoutableEditor } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/comments/browser/simpleCommentEditor";
import { IHoverService } from "@codingame/monaco-vscode-api/vscode/vs/platform/hover/browser/hover.service";
import { IContextMenuService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextview/browser/contextView.service";
export declare const COMMENTEDITOR_DECORATION_KEY = "commenteditordecoration";
export declare class CommentReply<T extends IRange | ICellRange> extends Disposable {
    readonly owner: string;
    private readonly _parentEditor;
    private _commentThread;
    private _scopedInstatiationService;
    private _contextKeyService;
    private _commentMenus;
    private _commentOptions;
    private _pendingComment;
    private _parentThread;
    private _actionRunDelegate;
    private commentService;
    private keybindingService;
    private contextMenuService;
    private hoverService;
    private readonly textModelService;
    commentEditor: ICodeEditor;
    form: HTMLElement;
    commentEditorIsEmpty: IContextKey<boolean>;
    private _error;
    private _formActions;
    private _editorActions;
    private _commentThreadDisposables;
    private _commentFormActions;
    private _commentEditorActions;
    private _reviewThreadReplyButton;
    private _editorHeight;
    constructor(owner: string, container: HTMLElement, _parentEditor: LayoutableEditor, _commentThread: languages.CommentThread<T>, _scopedInstatiationService: IInstantiationService, _contextKeyService: IContextKeyService, _commentMenus: CommentMenus, _commentOptions: languages.CommentOptions | undefined, _pendingComment: languages.PendingComment | undefined, _parentThread: ICommentThreadWidget, focus: boolean, _actionRunDelegate: (() => void) | null, commentService: ICommentService, configurationService: IConfigurationService, keybindingService: IKeybindingService, contextMenuService: IContextMenuService, hoverService: IHoverService, textModelService: ITextModelService);
    initialize(focus: boolean): Promise<void>;
    private calculateEditorHeight;
    updateCommentThread(commentThread: languages.CommentThread<IRange | ICellRange>): void;
    getPendingComment(): languages.PendingComment | undefined;
    setPendingComment(pending: languages.PendingComment): void;
    layout(widthInPixel: number): void;
    focusIfNeeded(): void;
    focusCommentEditor(): void;
    expandReplyAreaAndFocusCommentEditor(): void;
    isCommentEditorFocused(): boolean;
    updateCanReply(): void;
    submitComment(): Promise<void>;
    setCommentEditorDecorations(): void;
    private createTextModelListener;
    private createCommentWidgetFormActions;
    private createCommentWidgetEditorActions;
    private get isReplyExpanded();
    private expandReplyArea;
    private clearAndExpandReplyArea;
    private hideReplyArea;
    private createReplyButton;
    dispose(): void;
}
