import * as dom from "@codingame/monaco-vscode-api/vscode/vs/base/browser/dom";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import * as languages from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages";
import { IMarkdownRendererOptions } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { ICommentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/comments/browser/commentService.service";
import { ICommentThreadWidget } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/comments/common/commentThreadWidget";
import { IColorTheme } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService";
import { IRange } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/core/range";
import { ICellRange } from "@codingame/monaco-vscode-9a6d8b6c-ad4c-5ea3-9558-f43d6dc4c0ad-common/vscode/vs/workbench/contrib/notebook/common/notebookRange";
import { FontInfo } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/config/fontInfo";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IKeybindingService } from "@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybinding.service";
import { LayoutableEditor } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/comments/browser/simpleCommentEditor";
export declare const COMMENTEDITOR_DECORATION_KEY = "commenteditordecoration";
export declare class CommentThreadWidget<T extends IRange | ICellRange = IRange> extends Disposable implements ICommentThreadWidget {
    readonly container: HTMLElement;
    readonly _parentEditor: LayoutableEditor;
    private _owner;
    private _parentResourceUri;
    private _contextKeyService;
    private _scopedInstantiationService;
    private _commentThread;
    private _pendingComment;
    private _pendingEdits;
    private _markdownOptions;
    private _commentOptions;
    private _containerDelegate;
    private readonly commentService;
    private readonly configurationService;
    private readonly _keybindingService;
    private _header;
    private _body;
    private _commentReply?;
    private _additionalActions?;
    private _commentMenus;
    private _commentThreadDisposables;
    private _threadIsEmpty;
    private _styleElement;
    private _commentThreadContextValue;
    private _focusedContextKey;
    private _onDidResize;
    onDidResize: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<dom.Dimension>;
    private _commentThreadState;
    get commentThread(): languages.CommentThread<T>;
    constructor(container: HTMLElement, _parentEditor: LayoutableEditor, _owner: string, _parentResourceUri: URI, _contextKeyService: IContextKeyService, _scopedInstantiationService: IInstantiationService, _commentThread: languages.CommentThread<T>, _pendingComment: languages.PendingComment | undefined, _pendingEdits: {
        [key: number]: languages.PendingComment;
    } | undefined, _markdownOptions: IMarkdownRendererOptions, _commentOptions: languages.CommentOptions | undefined, _containerDelegate: {
        actionRunner: (() => void) | null;
        collapse: () => Promise<boolean>;
    }, commentService: ICommentService, configurationService: IConfigurationService, _keybindingService: IKeybindingService);
    get hasUnsubmittedComments(): boolean;
    private _setAriaLabel;
    private updateCurrentThread;
    private currentThreadListeners;
    updateCommentThread(commentThread: languages.CommentThread<T>): Promise<void>;
    display(lineHeight: number, focus: boolean): Promise<void>;
    private _refresh;
    dispose(): void;
    private _bindCommentThreadListeners;
    private _createCommentForm;
    private _createAdditionalActions;
    getCommentCoords(commentUniqueId: number): {
        thread: dom.IDomNodePagePosition;
        comment: dom.IDomNodePagePosition;
    } | undefined;
    getPendingEdits(): {
        [key: number]: languages.PendingComment;
    };
    getPendingComment(): languages.PendingComment | undefined;
    setPendingComment(pending: languages.PendingComment): void;
    getDimensions(): dom.Dimension;
    layout(widthInPixel?: number): void;
    ensureFocusIntoNewEditingComment(): void;
    focusCommentEditor(): void;
    focus(commentUniqueId: number | undefined): void;
    submitComment(): Promise<void>;
    collapse(): Promise<void>;
    applyTheme(theme: IColorTheme, fontInfo: FontInfo): void;
}
