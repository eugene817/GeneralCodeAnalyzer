
import { CommentThreadState } from '@codingame/monaco-vscode-api/vscode/vs/editor/common/languages';
import { peekViewTitleBackground } from '@codingame/monaco-vscode-api/vscode/vs/editor/contrib/peekView/browser/peekView';
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { registerColor, transparent } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colorUtils';
import { contrastBorder, disabledForeground } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/baseColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/chartsColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/editorColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/inputColors';
import { listFocusOutline } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/listColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/menuColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/minimapColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/miscColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/quickpickColors';
import '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/colors/searchColors';

const resolvedCommentViewIcon = registerColor('commentsView.resolvedIcon', { dark: disabledForeground, light: disabledForeground, hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(5040, 'Icon color for resolved comments.')));
const unresolvedCommentViewIcon = registerColor('commentsView.unresolvedIcon', { dark: listFocusOutline, light: listFocusOutline, hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(5041, 'Icon color for unresolved comments.')));
registerColor('editorCommentsWidget.replyInputBackground', peekViewTitleBackground, ( localize(5042, 'Background color for comment reply input box.')));
const resolvedCommentBorder = registerColor('editorCommentsWidget.resolvedBorder', { dark: resolvedCommentViewIcon, light: resolvedCommentViewIcon, hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(5043, 'Color of borders and arrow for resolved comments.')));
const unresolvedCommentBorder = registerColor('editorCommentsWidget.unresolvedBorder', { dark: unresolvedCommentViewIcon, light: unresolvedCommentViewIcon, hcDark: contrastBorder, hcLight: contrastBorder }, ( localize(5044, 'Color of borders and arrow for unresolved comments.')));
registerColor('editorCommentsWidget.rangeBackground', ( transparent(unresolvedCommentBorder, .1)), ( localize(5045, 'Color of background for comment ranges.')));
registerColor('editorCommentsWidget.rangeActiveBackground', ( transparent(unresolvedCommentBorder, .1)), ( localize(
    5046,
    'Color of background for currently selected or hovered comment range.'
)));
const commentThreadStateBorderColors = ( new Map([
    [CommentThreadState.Unresolved, unresolvedCommentBorder],
    [CommentThreadState.Resolved, resolvedCommentBorder],
]));
const commentThreadStateIconColors = ( new Map([
    [CommentThreadState.Unresolved, unresolvedCommentViewIcon],
    [CommentThreadState.Resolved, resolvedCommentViewIcon],
]));
const commentThreadStateColorVar = '--comment-thread-state-color';
const commentViewThreadStateColorVar = '--comment-view-thread-state-color';
const commentThreadStateBackgroundColorVar = '--comment-thread-state-background-color';
function getCommentThreadStateColor(state, theme, map) {
    const colorId = (state !== undefined) ? map.get(state) : undefined;
    return (colorId !== undefined) ? theme.getColor(colorId) : undefined;
}
function getCommentThreadStateBorderColor(state, theme) {
    return getCommentThreadStateColor(state, theme, commentThreadStateBorderColors);
}
function getCommentThreadStateIconColor(state, theme) {
    return getCommentThreadStateColor(state, theme, commentThreadStateIconColors);
}

export { commentThreadStateBackgroundColorVar, commentThreadStateColorVar, commentViewThreadStateColorVar, getCommentThreadStateBorderColor, getCommentThreadStateIconColor };
