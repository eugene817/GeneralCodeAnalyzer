
import { SyncDescriptor } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/descriptors';
import { Extensions } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/views';
export { ViewContainerLocation } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/views';
import { MutableDisposable, DisposableStore } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { size, $ } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/dom';
import { ViewPane } from '@codingame/monaco-vscode-65619f8f-0eab-5d8b-855a-43b6353fe527-common/vscode/vs/workbench/browser/parts/views/viewPane';
import { Registry } from '@codingame/monaco-vscode-api/vscode/vs/platform/registry/common/platform';
import { ViewPaneContainer } from '@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/workbench/browser/parts/views/viewPaneContainer';
export { ViewPaneContainer } from '@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/workbench/browser/parts/views/viewPaneContainer';
import { URI } from '@codingame/monaco-vscode-api/vscode/vs/base/common/uri';
import { Codicon } from '@codingame/monaco-vscode-api/vscode/vs/base/common/codicons';
export { RegisteredEditorPriority } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorResolverService';
import { IEditorResolverService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorResolverService.service';
import { EditorInput } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput';
export { EditorInput } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput';
import { Verbosity, EditorExtensions } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor';
export { EditorInputCapabilities } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor';
import { registerAction2, Action2, MenuId } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions';
import { Categories } from '@codingame/monaco-vscode-api/vscode/vs/platform/action/common/actionCommonCategories';
import { ContextKeyExpr } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey';
import { EditorPaneDescriptor } from '@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/workbench/browser/editor';
import { EditorPane } from '@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/workbench/browser/parts/editor/editorPane';
import { ITelemetryService } from '@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetry.service';
import { IStorageService } from '@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service';
import { IThemeService } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation';
import { DomScrollableElement } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/scrollbar/scrollableElement';
export { DomScrollableElement } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/scrollbar/scrollableElement';
import { assertIsDefined, assertAllDefined } from '@codingame/monaco-vscode-api/vscode/vs/base/common/types';
import { ScrollbarVisibility } from '@codingame/monaco-vscode-api/vscode/vs/base/common/scrollable';
export { ConfirmResult } from '@codingame/monaco-vscode-2e69e120-617a-5258-95e0-3b8902f4e014-common/vscode/vs/platform/dialogs/common/dialogs';
export { AbstractResourceEditorInput } from '@codingame/monaco-vscode-86d65fc6-30f9-5dca-9501-e249de688591-common/vscode/vs/workbench/common/editor/resourceEditorInput';
export { AbstractTextResourceEditorInput } from '@codingame/monaco-vscode-86d65fc6-30f9-5dca-9501-e249de688591-common/vscode/vs/workbench/common/editor/textResourceEditorInput';
export { Parts } from '@codingame/monaco-vscode-81f603ca-d6ea-5402-90dd-3014dffc63b4-common/vscode/vs/workbench/services/layout/browser/layoutService';
import { IWorkbenchLayoutService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service';
import { StandaloneServices } from '@codingame/monaco-vscode-api/vscode/vs/editor/standalone/browser/standaloneServices';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
export { SplitView } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/splitview/splitview';
import { withReadyServices } from '@codingame/monaco-vscode-api/services';

class InjectedEditorPane extends EditorPane {
    constructor(id, group) {
        super(id, group, StandaloneServices.get(ITelemetryService), StandaloneServices.get(IThemeService), StandaloneServices.get(IStorageService));
    }
}
class SimpleEditorPane extends InjectedEditorPane {
    constructor() {
        super(...arguments);
        this.inputDisposable = this._register(new MutableDisposable());
    }
    createEditor(parent) {
        this.container = this.initialize();
        this.wrapper = document.createElement('div');
        this.wrapper.append(this.container);
        this.scrollbar = this._register(new DomScrollableElement(this.wrapper, {
            horizontal: ScrollbarVisibility.Auto,
            vertical: ScrollbarVisibility.Auto
        }));
        parent.appendChild(this.scrollbar.getDomNode());
        const observer = new ResizeObserver(() => {
            assertIsDefined(this.scrollbar).scanDomNode();
        });
        observer.observe(this.container);
        this._register({
            dispose() {
                observer.disconnect();
            }
        });
    }
    async setInput(input, editorOptions, context, token) {
        await super.setInput(input, editorOptions, context, token);
        if (token.isCancellationRequested) {
            return;
        }
        this.inputDisposable.value = await this.renderInput?.(input, editorOptions, context, token);
        assertIsDefined(this.scrollbar).scanDomNode();
    }
    layout(dimension) {
        const [wrapper, scrollbar] = assertAllDefined(this.wrapper, this.scrollbar);
        size(wrapper, dimension.width, dimension.height);
        scrollbar.scanDomNode();
    }
    focus() {
        const container = assertIsDefined(this.container);
        container.focus();
    }
    clearInput() {
        this.inputDisposable.clear();
        super.clearInput();
    }
}
class SimpleEditorInput extends EditorInput {
    constructor(resource, closeHandler) {
        super();
        this.closeHandler = closeHandler;
        this.dirty = false;
        this._capabilities = 0;
        this.resource = resource;
    }
    get capabilities() {
        return this._capabilities;
    }
    addCapability(capability) {
        this._capabilities |= capability;
        this._onDidChangeCapabilities.fire();
    }
    removeCapability(capability) {
        this._capabilities &= ~capability;
        this._onDidChangeCapabilities.fire();
    }
    get editorId() {
        return this.typeId;
    }
    setName(name) {
        this.name = name;
        this._onDidChangeLabel.fire();
    }
    setTitle(title) {
        this.title = title;
        this._onDidChangeLabel.fire();
    }
    setDescription(description) {
        this.description = description;
        this._onDidChangeLabel.fire();
    }
    getLabelValue(label, verbosity) {
        if (typeof label === 'string') {
            return label;
        }
        switch (verbosity) {
            case Verbosity.SHORT:
                return label.short;
            case Verbosity.LONG:
                return label.long;
            case Verbosity.MEDIUM:
            default:
                return label.medium;
        }
    }
    getName() {
        return this.name ?? 'Unnamed';
    }
    getTitle(verbosity) {
        return this.getLabelValue(this.title ?? this.getName(), verbosity);
    }
    getDescription(verbosity) {
        return this.getLabelValue(this.description ?? this.getName(), verbosity);
    }
    isDirty() {
        return this.dirty;
    }
    setDirty(dirty) {
        this.dirty = dirty;
        this._onDidChangeDirty.fire();
    }
    toUntyped() {
        if (this.resource == null) {
            return undefined;
        }
        return {
            resource: this.resource
        };
    }
}
function registerEditorPane(typeId, name, ctor,
inputCtors) {
    return Registry.as(EditorExtensions.EditorPane).registerEditorPane(EditorPaneDescriptor.create(ctor, typeId, name), inputCtors.map((ctor) => new SyncDescriptor(ctor)));
}
function registerEditor(globPattern, editorInfo, editorOptions, factory) {
    return withReadyServices((servicesAccessor) => {
        const resolverService = servicesAccessor.get(IEditorResolverService);
        return resolverService.registerEditor(globPattern, editorInfo, editorOptions, factory);
    });
}
function registerEditorSerializer(editorTypeId, ctor) {
    return Registry.as(EditorExtensions.EditorFactory).registerEditorSerializer(editorTypeId, ctor);
}
const viewContainerRegistry = Registry.as(Extensions.ViewContainersRegistry);
const viewRegistry = Registry.as(Extensions.ViewsRegistry);
function registerCustomView(options) {
    const iconUrl = options.icon != null ? URI.parse(options.icon) : undefined;
    const viewContainer = options.viewContainer ??
        viewContainerRegistry.registerViewContainer({
            id: options.id,
            title: { value: options.name, original: options.name },
            order: options.order,
            ctorDescriptor: new SyncDescriptor(ViewPaneContainer, [
                options.id,
                { mergeViewWithContainerWhenSingleView: true }
            ]),
            hideIfEmpty: true,
            icon: iconUrl
        }, options.location, {
            isDefault: options.default
        });
    const views = [
        {
            id: options.id,
            name: {
                value: options.name,
                original: options.name
            },
            ctorDescriptor: new SyncDescriptor(class extends ViewPane {
                renderBody(container) {
                    super.renderBody(container);
                    this.wrapper = document.createElement('div');
                    this.scrollbar = this._register(new DomScrollableElement(this.wrapper, {
                        horizontal: ScrollbarVisibility.Auto,
                        vertical: ScrollbarVisibility.Auto
                    }));
                    this.container = $('.view-pane-content');
                    this.container.style.display = 'flex';
                    this.container.style.alignItems = 'stretch';
                    this._register(options.renderBody(this.container, this.scrollbar));
                    this.wrapper.append(this.container);
                    container.appendChild(this.scrollbar.getDomNode());
                    const observer = new ResizeObserver(() => {
                        assertIsDefined(this.scrollbar).scanDomNode();
                    });
                    observer.observe(this.container);
                    this._register({
                        dispose() {
                            observer.disconnect();
                        }
                    });
                }
                layoutBody(height, width) {
                    const [wrapper, scrollbar] = assertAllDefined(this.wrapper, this.scrollbar);
                    size(wrapper, width, height);
                    scrollbar.scanDomNode();
                }
            }),
            canMoveView: options.canMoveView ?? true,
            canToggleVisibility: options.canToggleVisibility ?? false,
            hideByDefault: options.hideByDefault ?? false,
            collapsed: options.collapsed ?? false,
            order: options.order,
            containerIcon: iconUrl
        }
    ];
    viewRegistry.registerViews(views, viewContainer);
    const disposableCollection = new DisposableStore();
    disposableCollection.add({
        dispose() {
            viewRegistry.deregisterViews(views, viewContainer);
            if (options.viewContainer == null) {
                viewContainerRegistry.deregisterViewContainer(viewContainer);
            }
        }
    });
    for (const action of options.actions ?? []) {
        disposableCollection.add(registerAction2(class extends Action2 {
            constructor() {
                super({
                    id: action.id,
                    title: { value: action.title, original: action.title },
                    category: Categories.View,
                    menu: [
                        {
                            id: MenuId.ViewTitle,
                            when: ContextKeyExpr.equals('view', options.id),
                            group: 'navigation',
                            order: action.order
                        },
                        {
                            id: MenuId.CommandPalette
                        }
                    ],
                    tooltip: action.tooltip,
                    icon: action.icon != null ? Codicon[action.icon] : undefined
                });
                this.run = action.run ?? (async () => { });
            }
        }));
    }
    return disposableCollection;
}
function isPartVisibile(part) {
    return StandaloneServices.get(IWorkbenchLayoutService).isVisible(part, window);
}
function setPartVisibility(part, visible) {
    StandaloneServices.get(IWorkbenchLayoutService).setPartHidden(!visible, part, window);
}
const onDidChangePanelPosition = (listener) => {
    return StandaloneServices.get(IWorkbenchLayoutService).onDidChangePanelPosition(listener);
};
function getPanelPosition() {
    return StandaloneServices.get(IWorkbenchLayoutService).getPanelPosition();
}
const onDidChangeSideBarPosition = (listener) => {
    return StandaloneServices.get(IWorkbenchLayoutService).onDidChangeSideBarPosition(listener);
};
function getSideBarPosition() {
    return StandaloneServices.get(IWorkbenchLayoutService).getSideBarPosition();
}

export { InjectedEditorPane as EditorPane, SimpleEditorInput, SimpleEditorPane, getPanelPosition, getSideBarPosition, isPartVisibile, onDidChangePanelPosition, onDidChangeSideBarPosition, registerCustomView, registerEditor, registerEditorPane, registerEditorSerializer, setPartVisibility, viewContainerRegistry, viewRegistry };
