import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { ITextResourceConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/textResourceConfiguration.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { EditorInputCapabilities, IResourceMergeEditorInput, IRevertOptions, IUntypedEditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput, IEditorCloseHandler } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import { ICustomEditorLabelService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/customEditorLabelService.service";
import { AbstractTextResourceEditorInput } from "@codingame/monaco-vscode-86d65fc6-30f9-5dca-9501-e249de688591-common/vscode/vs/workbench/common/editor/textResourceEditorInput";
import { IMergeEditorInputModel } from "./mergeEditorInputModel.js";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { IFilesConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/filesConfiguration/common/filesConfigurationService.service";
import { ILanguageSupport, ITextFileSaveOptions } from "@codingame/monaco-vscode-aff8bc9b-c6f8-578f-9c8a-f70d14f9c13c-common/vscode/vs/workbench/services/textfile/common/textfiles";
import { ITextFileService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/textfile/common/textfiles.service";
export declare class MergeEditorInputData {
    readonly uri: URI;
    readonly title: string | undefined;
    readonly detail: string | undefined;
    readonly description: string | undefined;
    constructor(uri: URI, title: string | undefined, detail: string | undefined, description: string | undefined);
}
export declare class MergeEditorInput extends AbstractTextResourceEditorInput implements ILanguageSupport {
    readonly base: URI;
    readonly input1: MergeEditorInputData;
    readonly input2: MergeEditorInputData;
    readonly result: URI;
    private readonly _instaService;
    private readonly configurationService;
    static readonly ID = "mergeEditor.Input";
    private _inputModel?;
    closeHandler: IEditorCloseHandler;
    private get useWorkingCopy();
    constructor(base: URI, input1: MergeEditorInputData, input2: MergeEditorInputData, result: URI, _instaService: IInstantiationService, editorService: IEditorService, textFileService: ITextFileService, labelService: ILabelService, fileService: IFileService, configurationService: IConfigurationService, filesConfigurationService: IFilesConfigurationService, textResourceConfigurationService: ITextResourceConfigurationService, customEditorLabelService: ICustomEditorLabelService);
    dispose(): void;
    get typeId(): string;
    get editorId(): string;
    get capabilities(): EditorInputCapabilities;
    getName(): string;
    private readonly mergeEditorModeFactory;
    resolve(): Promise<IMergeEditorInputModel>;
    accept(): Promise<void>;
    save(group: number, options?: ITextFileSaveOptions | undefined): Promise<IUntypedEditorInput | undefined>;
    toUntyped(): IResourceMergeEditorInput;
    matches(otherInput: EditorInput | IUntypedEditorInput): boolean;
    revert(group: number, options?: IRevertOptions): Promise<void>;
    isDirty(): boolean;
    setLanguageId(languageId: string, source?: string): void;
}
