import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IHostService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/host/browser/host.service";
import { ILayoutService } from "@codingame/monaco-vscode-api/vscode/vs/platform/layout/browser/layoutService.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IWindowOpenable, IOpenWindowOptions, IOpenEmptyWindowOptions } from "@codingame/monaco-vscode-api/vscode/vs/platform/window/common/window";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IBrowserWorkbenchEnvironmentService } from "@codingame/monaco-vscode-411e0589-fa79-504b-b32c-80a88847b23a-common/vscode/vs/workbench/services/environment/browser/environmentService.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { BrowserLifecycleService } from "@codingame/monaco-vscode-lifecycle-service-override/vscode/vs/workbench/services/lifecycle/browser/lifecycleService";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { IDialogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service";
import { IWorkspaceContextService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace.service";
import { IUserDataProfilesService } from "@codingame/monaco-vscode-api/vscode/vs/platform/userDataProfile/common/userDataProfile.service";
export declare class BrowserHostService extends Disposable implements IHostService {
    private readonly layoutService;
    private readonly configurationService;
    private readonly fileService;
    private readonly labelService;
    private readonly environmentService;
    private readonly instantiationService;
    private readonly lifecycleService;
    private readonly logService;
    private readonly dialogService;
    private readonly contextService;
    private readonly userDataProfilesService;
    readonly _serviceBrand: undefined;
    private workspaceProvider;
    private shutdownReason;
    constructor(layoutService: ILayoutService, configurationService: IConfigurationService, fileService: IFileService, labelService: ILabelService, environmentService: IBrowserWorkbenchEnvironmentService, instantiationService: IInstantiationService, lifecycleService: BrowserLifecycleService, logService: ILogService, dialogService: IDialogService, contextService: IWorkspaceContextService, userDataProfilesService: IUserDataProfilesService);
    private registerListeners;
    private onBeforeShutdown;
    private updateShutdownReasonFromEvent;
    get onDidChangeFocus(): Event<boolean>;
    get hasFocus(): boolean;
    hadLastFocus(): Promise<boolean>;
    focus(targetWindow: Window): Promise<void>;
    get onDidChangeActiveWindow(): Event<number>;
    get onDidChangeFullScreen(): Event<{
        windowId: number;
        fullscreen: boolean;
    }>;
    openWindow(options?: IOpenEmptyWindowOptions): Promise<void>;
    openWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;
    private doOpenWindow;
    private withServices;
    private preservePayload;
    private getRecentLabel;
    private shouldReuse;
    private doOpenEmptyWindow;
    private doOpen;
    toggleFullScreen(targetWindow: Window): Promise<void>;
    moveTop(targetWindow: Window): Promise<void>;
    getCursorScreenPoint(): Promise<undefined>;
    restart(): Promise<void>;
    reload(): Promise<void>;
    close(): Promise<void>;
    withExpectedShutdown<T>(expectedShutdownTask: () => Promise<T>): Promise<T>;
    private handleExpectedShutdown;
    getScreenshot(): Promise<ArrayBufferLike | undefined>;
    getNativeWindowHandle(_windowId: number): Promise<undefined>;
}
