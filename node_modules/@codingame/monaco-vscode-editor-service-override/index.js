
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { Event } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { ICodeEditorService } from '@codingame/monaco-vscode-api/vscode/vs/editor/browser/services/codeEditorService.service';
import { CodeEditorService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/browser/codeEditorService';
import { IEditorService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service';
import { SyncDescriptor } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/descriptors';
import { TextEditorService } from '@codingame/monaco-vscode-b1e8558d-1726-5299-bc75-e43ee6d1a124-common/vscode/vs/workbench/services/textfile/common/textEditorService';
import { ITextEditorService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/textfile/common/textEditorService.service';
import { GroupOrientation } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService';
import { IEditorGroupsService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { DEFAULT_EDITOR_PART_OPTIONS } from '@codingame/monaco-vscode-api/vscode/vs/workbench/browser/parts/editor/editor';
import { mainWindow } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/window';
import { fakeActiveGroup, MonacoDelegateEditorGroupsService, MonacoEditorService } from '@codingame/monaco-vscode-9efc1f50-c7de-55d6-8b28-bcc88bd49b5a-common/service-override/tools/editor';
export { MonacoEditorService } from '@codingame/monaco-vscode-9efc1f50-c7de-55d6-8b28-bcc88bd49b5a-common/service-override/tools/editor';
import { unsupported } from '@codingame/monaco-vscode-api/tools';
import '@codingame/monaco-vscode-b1e8558d-1726-5299-bc75-e43ee6d1a124-common/vscode/vs/workbench/browser/parts/editor/editor.contribution._autosave';
import '@codingame/monaco-vscode-b1e8558d-1726-5299-bc75-e43ee6d1a124-common/vscode/vs/workbench/contrib/files/browser/files.contribution._fileEditorFactory';
import '@codingame/monaco-vscode-c4e2825a-b5b1-5f0e-b547-068c32e06d50-common/vscode/vs/workbench/contrib/files/browser/fileCommands._save';

class EmptyEditorPart {
    constructor() {
        this.onWillDispose = Event.None;
        this.hasMaximizedGroup = () => false;
        this.windowId = mainWindow.vscodeWindowId;
        this.onDidLayout = Event.None;
        this.onDidScroll = Event.None;
        this.isReady = true;
        this.whenReady = Promise.resolve();
        this.whenRestored = Promise.resolve();
        this.hasRestorableState = false;
        this.centerLayout = unsupported;
        this.isLayoutCentered = unsupported;
        this.enforcePartOptions = unsupported;
        this.onDidChangeActiveGroup = Event.None;
        this.onDidAddGroup = Event.None;
        this.onDidRemoveGroup = Event.None;
        this.onDidMoveGroup = Event.None;
        this.onDidActivateGroup = Event.None;
        this.onDidChangeGroupIndex = Event.None;
        this.onDidChangeGroupLocked = Event.None;
        this.onDidChangeGroupMaximized = Event.None;
        this.activeGroup = fakeActiveGroup;
        this.groups = [fakeActiveGroup];
        this.count = 0;
        this.orientation = GroupOrientation.HORIZONTAL;
        this.getGroups = () => [];
        this.getGroup = () => undefined;
        this.activateGroup = unsupported;
        this.getSize = unsupported;
        this.setSize = unsupported;
        this.arrangeGroups = unsupported;
        this.toggleMaximizeGroup = unsupported;
        this.toggleExpandGroup = unsupported;
        this.applyLayout = unsupported;
        this.getLayout = unsupported;
        this.setGroupOrientation = unsupported;
        this.findGroup = () => undefined;
        this.addGroup = unsupported;
        this.removeGroup = unsupported;
        this.moveGroup = unsupported;
        this.mergeGroup = unsupported;
        this.mergeAllGroups = unsupported;
        this.copyGroup = unsupported;
        this.partOptions = DEFAULT_EDITOR_PART_OPTIONS;
        this.onDidChangeEditorPartOptions = Event.None;
        this.createEditorDropTarget = unsupported;
    }
    get contentDimension() {
        return unsupported();
    }
    get sideGroup() {
        return unsupported();
    }
}
class EmptyEditorGroupsService {
    constructor() {
        this.getScopedInstantiationService = unsupported;
        this.registerContextKeyProvider = unsupported;
        this.saveWorkingSet = unsupported;
        this.getWorkingSets = unsupported;
        this.applyWorkingSet = unsupported;
        this.deleteWorkingSet = unsupported;
        this.onDidCreateAuxiliaryEditorPart = Event.None;
        this.mainPart = new EmptyEditorPart();
        this.activePart = this.mainPart;
        this.parts = [this.mainPart];
        this.getPart = unsupported;
        this.createAuxiliaryEditorPart = unsupported;
        this.onDidChangeGroupMaximized = Event.None;
        this.toggleMaximizeGroup = unsupported;
        this.toggleExpandGroup = unsupported;
        this.partOptions = DEFAULT_EDITOR_PART_OPTIONS;
        this.createEditorDropTarget = unsupported;
        this._serviceBrand = undefined;
        this.getLayout = unsupported;
        this.onDidChangeActiveGroup = Event.None;
        this.onDidAddGroup = Event.None;
        this.onDidRemoveGroup = Event.None;
        this.onDidMoveGroup = Event.None;
        this.onDidActivateGroup = Event.None;
        this.onDidLayout = Event.None;
        this.onDidScroll = Event.None;
        this.onDidChangeGroupIndex = Event.None;
        this.onDidChangeGroupLocked = Event.None;
        this.activeGroup = fakeActiveGroup;
        this.groups = [fakeActiveGroup];
        this.count = 0;
        this.orientation = GroupOrientation.HORIZONTAL;
        this.isReady = false;
        this.whenReady = Promise.resolve();
        this.whenRestored = Promise.resolve();
        this.hasRestorableState = false;
        this.getGroups = () => [];
        this.getGroup = () => undefined;
        this.activateGroup = unsupported;
        this.getSize = unsupported;
        this.setSize = unsupported;
        this.arrangeGroups = unsupported;
        this.applyLayout = unsupported;
        this.centerLayout = unsupported;
        this.isLayoutCentered = () => false;
        this.setGroupOrientation = unsupported;
        this.findGroup = () => undefined;
        this.addGroup = unsupported;
        this.removeGroup = unsupported;
        this.moveGroup = unsupported;
        this.mergeGroup = unsupported;
        this.mergeAllGroups = unsupported;
        this.copyGroup = unsupported;
        this.onDidChangeEditorPartOptions = Event.None;
        this.enforcePartOptions = unsupported;
    }
    get contentDimension() {
        return unsupported();
    }
    get sideGroup() {
        return unsupported();
    }
}
let MonacoEditorGroupsService = class MonacoEditorGroupsService extends MonacoDelegateEditorGroupsService {
    constructor(instantiationService) {
        super(instantiationService.createInstance(EmptyEditorGroupsService), true, instantiationService);
    }
};
MonacoEditorGroupsService = __decorate([
    __param(0, IInstantiationService)
], MonacoEditorGroupsService);
function getServiceOverride(openEditor) {
    return {
        [ICodeEditorService.toString()]: new SyncDescriptor(CodeEditorService, undefined, true),
        [IEditorService.toString()]: new SyncDescriptor(MonacoEditorService, [openEditor, () => false], true),
        [ITextEditorService.toString()]: new SyncDescriptor(TextEditorService, [], false),
        [IEditorGroupsService.toString()]: new SyncDescriptor(MonacoEditorGroupsService)
    };
}

export { getServiceOverride as default };
