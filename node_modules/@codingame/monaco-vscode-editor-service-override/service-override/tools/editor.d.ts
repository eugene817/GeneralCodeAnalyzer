import { type PreferredGroup } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { type EditorInputWithOptions, type IActiveEditorChangeEvent, type IEditorCloseEvent, type IEditorControl, type IEditorPane, type IEditorWillOpenEvent, type IResourceDiffEditorInput, type ITextDiffEditorPane, type IUntitledTextResourceEditorInput, type IUntypedEditorInput, type IVisibleEditorPane } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import type { IEditorOptions, IResourceEditorInput, ITextResourceEditorInput } from "@codingame/monaco-vscode-api/vscode/vs/platform/editor/common/editor";
import type { ICodeEditor, IDiffEditor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorBrowser";
import { type IEditorGroupView } from "@codingame/monaco-vscode-api/vscode/vs/workbench/browser/parts/editor/editor";
import { type IResolvedTextEditorModel } from "@codingame/monaco-vscode-model-service-override/vscode/vs/editor/common/services/resolverService";
import { ITextModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/resolverService.service";
import { type IStandaloneCodeEditor } from "@codingame/monaco-vscode-api/vscode/vs/editor/standalone/browser/standaloneCodeEditor";
import { Disposable, type IDisposable, type IReference } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { EditorService } from "@codingame/monaco-vscode-9efc1f50-c7de-55d6-8b28-bcc88bd49b5a-common/vscode/vs/workbench/services/editor/browser/editorService";
import { type IAuxiliaryEditorPart, type IEditorDropTargetDelegate, type IEditorPart, type IActiveEditorActions, type IEditorGroup, type IEditorWorkingSet, type IEditorGroupContextKeyProvider } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService";
import { IEditorGroupsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IWorkspaceTrustRequestService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspaceTrust.service";
import { IEditorResolverService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorResolverService.service";
import { IUriIdentityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/uriIdentity/common/uriIdentity.service";
import { IWorkspaceContextService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace.service";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { ITextEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/textfile/common/textEditorService.service";
import { IHostService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/host/browser/host.service";
import { Emitter, Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { TextResourceEditorInput } from "@codingame/monaco-vscode-86d65fc6-30f9-5dca-9501-e249de688591-common/vscode/vs/workbench/common/editor/textResourceEditorInput";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import type { IGroupModelChangeEvent } from "@codingame/monaco-vscode-ad89fae6-94f0-5ac2-a185-22dea4b68ee0-common/vscode/vs/workbench/common/editor/editorGroupModel";
import type { EditorLayoutInfo } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/config/editorOptions";
import type { IRectangle } from "@codingame/monaco-vscode-api/vscode/vs/platform/window/common/window";
import type { ContextKeyValue } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey";
import { unsupported } from "@codingame/monaco-vscode-api/tools";
export type OpenEditor = (modelRef: IReference<IResolvedTextEditorModel>, options: IEditorOptions | undefined, sideBySide?: boolean) => Promise<ICodeEditor | undefined>;
declare class EmptyEditorGroup implements IEditorGroup, IEditorGroupView {
    selectedEditors: never[];
    isSelected: () => boolean;
    setSelection: typeof unsupported;
    isTransient: () => boolean;
    windowId: number;
    get groupsView(): never;
    notifyLabelChanged(): void;
    createEditorActions: typeof unsupported;
    onDidFocus: Event<any>;
    onDidOpenEditorFail: Event<any>;
    whenRestored: Promise<void>;
    get titleHeight(): never;
    disposed: boolean;
    setActive: typeof unsupported;
    notifyIndexChanged: typeof unsupported;
    relayout: typeof unsupported;
    dispose: typeof unsupported;
    toJSON: typeof unsupported;
    preferredWidth?: number | undefined;
    preferredHeight?: number | undefined;
    get element(): never;
    minimumWidth: number;
    maximumWidth: number;
    minimumHeight: number;
    maximumHeight: number;
    onDidChange: Event<any>;
    layout: typeof unsupported;
    onDidModelChange: Event<any>;
    onWillDispose: Event<any>;
    onDidActiveEditorChange: Event<any>;
    onWillCloseEditor: Event<any>;
    onDidCloseEditor: Event<any>;
    onWillMoveEditor: Event<any>;
    onWillOpenEditor: Event<any>;
    id: number;
    index: number;
    label: string;
    ariaLabel: string;
    activeEditorPane: undefined;
    activeEditor: null;
    previewEditor: null;
    count: number;
    isEmpty: boolean;
    isLocked: boolean;
    stickyCount: number;
    editors: never[];
    get scopedContextKeyService(): IContextKeyService;
    getEditors: () => never[];
    findEditors: () => never[];
    getEditorByIndex: () => undefined;
    getIndexOfEditor: typeof unsupported;
    openEditor: typeof unsupported;
    openEditors: typeof unsupported;
    isPinned: () => boolean;
    isSticky: () => boolean;
    isActive: () => boolean;
    contains: () => boolean;
    moveEditor: typeof unsupported;
    moveEditors: typeof unsupported;
    copyEditor: typeof unsupported;
    copyEditors: typeof unsupported;
    closeEditor: typeof unsupported;
    closeEditors: typeof unsupported;
    closeAllEditors: typeof unsupported;
    replaceEditors: typeof unsupported;
    pinEditor: () => void;
    stickEditor: () => void;
    unstickEditor: () => void;
    lock: () => void;
    focus(): void;
    isFirst: typeof unsupported;
    isLast: typeof unsupported;
}
export declare const fakeActiveGroup: EmptyEditorGroup;
export declare function wrapOpenEditor(textModelService: ITextModelService, defaultBehavior: IEditorService["openEditor"], fallbackBahavior?: OpenEditor): IEditorService["openEditor"];
export declare class MonacoEditorService extends EditorService {
    private _isEditorPartVisible;
    constructor(_openEditorFallback: OpenEditor | undefined, _isEditorPartVisible: () => boolean, _editorGroupService: IEditorGroupsService, instantiationService: IInstantiationService, fileService: IFileService, configurationService: IConfigurationService, contextService: IWorkspaceContextService, uriIdentityService: IUriIdentityService, editorResolverService: IEditorResolverService, workspaceTrustRequestService: IWorkspaceTrustRequestService, hostService: IHostService, textEditorService: ITextEditorService, textModelService: ITextModelService);
    get activeTextEditorControl(): ICodeEditor | IDiffEditor | undefined;
    openEditor(editor: EditorInput, options?: IEditorOptions, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IUntypedEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IResourceEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: ITextResourceEditorInput | IUntitledTextResourceEditorInput, group?: PreferredGroup): Promise<IEditorPane | undefined>;
    openEditor(editor: IResourceDiffEditorInput, group?: PreferredGroup): Promise<ITextDiffEditorPane | undefined>;
    openEditor(editor: EditorInput | IUntypedEditorInput, optionsOrPreferredGroup?: IEditorOptions | PreferredGroup, preferredGroup?: PreferredGroup): Promise<IEditorPane | undefined>;
}
declare class StandaloneEditorPane implements IVisibleEditorPane {
    readonly editor: IStandaloneCodeEditor;
    input: TextResourceEditorInput;
    group: IEditorGroup;
    constructor(editor: IStandaloneCodeEditor, input: TextResourceEditorInput, group: IEditorGroup);
    onDidChangeControl: Event<any>;
    options: undefined;
    minimumWidth: number;
    maximumWidth: number;
    minimumHeight: number;
    maximumHeight: number;
    onDidChangeSizeConstraints: Event<any>;
    scopedContextKeyService: undefined;
    getControl(): IEditorControl | undefined;
    getViewState(): object | undefined;
    isVisible(): boolean;
    onDidFocus: Event<void>;
    onDidBlur: Event<void>;
    hasFocus(): boolean;
    getId(): string;
    getTitle(): string | undefined;
    focus(): void;
}
declare class StandaloneEditorGroup extends Disposable implements IEditorGroup, IEditorGroupView {
    editor: IStandaloneCodeEditor;
    scopedContextKeyService: IContextKeyService;
    private static idCounter;
    private pane;
    active: boolean;
    constructor(editor: IStandaloneCodeEditor, instantiationService: IInstantiationService, scopedContextKeyService: IContextKeyService);
    selectedEditors: never[];
    isSelected: () => boolean;
    setSelection: typeof unsupported;
    isTransient: () => boolean;
    windowId: number;
    get groupsView(): never;
    notifyLabelChanged(): void;
    createEditorActions(): IActiveEditorActions;
    onDidFocus: Event<void>;
    onDidOpenEditorFail: Event<any>;
    whenRestored: Promise<void>;
    get titleHeight(): never;
    disposed: boolean;
    setActive(isActive: boolean): void;
    notifyIndexChanged: typeof unsupported;
    relayout: typeof unsupported;
    toJSON: typeof unsupported;
    get element(): HTMLElement;
    minimumWidth: number;
    maximumWidth: number;
    minimumHeight: number;
    maximumHeight: number;
    onDidChange: Event<EditorLayoutInfo>;
    layout: () => void;
    _onDidModelChange: Emitter<IGroupModelChangeEvent>;
    onDidModelChange: Event<IGroupModelChangeEvent>;
    onWillDispose: (listener: () => void) => IDisposable;
    _onDidActiveEditorChange: Emitter<IActiveEditorChangeEvent>;
    onDidActiveEditorChange: Event<IActiveEditorChangeEvent>;
    onWillCloseEditor: Event<any>;
    _onDidCloseEditor: Emitter<IEditorCloseEvent>;
    onDidCloseEditor: Event<IEditorCloseEvent>;
    onWillMoveEditor: Event<any>;
    _onWillOpenEditor: Emitter<IEditorWillOpenEvent>;
    onWillOpenEditor: Event<IEditorWillOpenEvent>;
    readonly id: number;
    index: number;
    label: string;
    ariaLabel: string;
    get activeEditorPane(): StandaloneEditorPane | undefined;
    get activeEditor(): TextResourceEditorInput | null;
    previewEditor: null;
    get count(): 1 | 0;
    get isEmpty(): boolean;
    isLocked: boolean;
    stickyCount: number;
    get editors(): TextResourceEditorInput[];
    getEditors: () => TextResourceEditorInput[];
    findEditors: (resource: URI) => TextResourceEditorInput[];
    getEditorByIndex: (index: number) => TextResourceEditorInput | undefined;
    getIndexOfEditor: (editorInput: EditorInput) => 0 | -1;
    openEditor: (editor: EditorInput) => Promise<IEditorPane | undefined>;
    openEditors: (editors: EditorInputWithOptions[]) => Promise<IEditorPane | undefined>;
    isPinned: () => boolean;
    isSticky: () => boolean;
    isActive: () => boolean;
    contains: (candidate: EditorInput | IUntypedEditorInput) => boolean;
    moveEditor: typeof unsupported;
    moveEditors: typeof unsupported;
    copyEditor: typeof unsupported;
    copyEditors: typeof unsupported;
    closeEditor: typeof unsupported;
    closeEditors: typeof unsupported;
    closeAllEditors: typeof unsupported;
    replaceEditors: typeof unsupported;
    pinEditor: () => void;
    stickEditor: () => void;
    unstickEditor: () => void;
    lock: () => void;
    focus(): void;
    isFirst: typeof unsupported;
    isLast: typeof unsupported;
}
export declare class MonacoDelegateEditorGroupsService<D extends IEditorGroupsService> extends Disposable implements IEditorGroupsService {
    protected delegate: D;
    private instantiationService;
    readonly _serviceBrand: undefined;
    additionalGroups: StandaloneEditorGroup[];
    activeGroupOverride: StandaloneEditorGroup | undefined;
    constructor(delegate: D, emptyDelegate: boolean, instantiationService: IInstantiationService);
    getScopedInstantiationService(): IInstantiationService;
    registerContextKeyProvider<T extends ContextKeyValue>(provider: IEditorGroupContextKeyProvider<T>): IDisposable;
    saveWorkingSet(name: string): IEditorWorkingSet;
    getWorkingSets(): IEditorWorkingSet[];
    applyWorkingSet(workingSet: IEditorWorkingSet | "empty"): Promise<boolean>;
    deleteWorkingSet(workingSet: IEditorWorkingSet): void;
    get isReady(): IEditorGroupsService["isReady"];
    get whenReady(): IEditorGroupsService["whenReady"];
    get whenRestored(): IEditorGroupsService["whenRestored"];
    get hasRestorableState(): IEditorGroupsService["hasRestorableState"];
    onDidCreateAuxiliaryEditorPart: Event<IAuxiliaryEditorPart>;
    get parts(): IEditorGroupsService["parts"];
    createAuxiliaryEditorPart(options?: {
        bounds?: Partial<IRectangle> | undefined;
    } | undefined): Promise<IAuxiliaryEditorPart>;
    get mainPart(): IEditorGroupsService["mainPart"];
    onDidChangeGroupMaximized: Event<boolean>;
    getPart(group: number | IEditorGroup): IEditorPart;
    getPart(container: unknown): IEditorPart | undefined;
    toggleMaximizeGroup(group?: number | IEditorGroup | undefined): void;
    toggleExpandGroup(group?: number | IEditorGroup | undefined): void;
    createEditorDropTarget(container: unknown, delegate: IEditorDropTargetDelegate): IDisposable;
    get groups(): IEditorGroup[];
    get activeGroup(): IEditorGroup;
    _onDidChangeActiveGroup: Emitter<IEditorGroup>;
    onDidChangeActiveGroup: Event<IEditorGroup>;
    _onDidAddGroup: Emitter<IEditorGroup>;
    onDidAddGroup: Event<IEditorGroup>;
    _onDidRemoveGroup: Emitter<IEditorGroup>;
    onDidRemoveGroup: Event<IEditorGroup>;
    onDidMoveGroup: Event<IEditorGroup>;
    onDidActivateGroup: Event<IEditorGroup>;
    onDidChangeGroupIndex: Event<IEditorGroup>;
    onDidChangeGroupLocked: Event<IEditorGroup>;
    get sideGroup(): IEditorGroupsService["sideGroup"];
    get count(): IEditorGroupsService["count"];
    get orientation(): IEditorGroupsService["orientation"];
    get partOptions(): IEditorGroupsService["partOptions"];
    getLayout: IEditorGroupsService["getLayout"];
    getGroups: IEditorGroupsService["getGroups"];
    getGroup: IEditorGroupsService["getGroup"];
    activateGroup: IEditorGroupsService["activateGroup"];
    getSize: IEditorGroupsService["getSize"];
    setSize: IEditorGroupsService["setSize"];
    arrangeGroups: IEditorGroupsService["arrangeGroups"];
    applyLayout: IEditorGroupsService["applyLayout"];
    setGroupOrientation: IEditorGroupsService["setGroupOrientation"];
    findGroup: IEditorGroupsService["findGroup"];
    addGroup: IEditorGroupsService["addGroup"];
    removeGroup: IEditorGroupsService["removeGroup"];
    moveGroup: IEditorGroupsService["moveGroup"];
    mergeGroup: IEditorGroupsService["mergeGroup"];
    mergeAllGroups: IEditorGroupsService["mergeAllGroups"];
    copyGroup: IEditorGroupsService["copyGroup"];
    onDidChangeEditorPartOptions: Event<import("@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor").IEditorPartOptionsChangeEvent>;
}
export {};
