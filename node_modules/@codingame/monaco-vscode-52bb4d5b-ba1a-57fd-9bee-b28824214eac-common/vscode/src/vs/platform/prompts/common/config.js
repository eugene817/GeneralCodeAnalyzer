
import { ContextKeyExpr } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey';

var PromptsConfig;
(function (PromptsConfig) {
    PromptsConfig.CONFIG_KEY = 'chat.promptFiles';
    PromptsConfig.LOCATIONS_CONFIG_KEY = 'chat.promptFilesLocations';
    PromptsConfig.DEFAULT_SOURCE_FOLDER = '.github/prompts';
    PromptsConfig.enabled = (configService) => {
        const enabledValue = configService.getValue(PromptsConfig.CONFIG_KEY);
        return asBoolean(enabledValue) ?? false;
    };
    PromptsConfig.enabledCtx = ( ContextKeyExpr.equals(`config.${PromptsConfig.CONFIG_KEY}`, true));
    PromptsConfig.getLocationsValue = (configService) => {
        const configValue = configService.getValue(PromptsConfig.LOCATIONS_CONFIG_KEY);
        if (configValue === undefined || configValue === null || Array.isArray(configValue)) {
            return undefined;
        }
        if (typeof configValue === 'object') {
            const paths = {};
            for (const [path, value] of Object.entries(configValue)) {
                const cleanPath = path.trim();
                const booleanValue = asBoolean(value);
                if ((booleanValue !== undefined) && cleanPath) {
                    paths[cleanPath] = booleanValue;
                }
            }
            return paths;
        }
        return undefined;
    };
    PromptsConfig.promptSourceFolders = (configService) => {
        const value = PromptsConfig.getLocationsValue(configService);
        if (value && (typeof value === 'object')) {
            const paths = [];
            if (value[PromptsConfig.DEFAULT_SOURCE_FOLDER] !== false) {
                paths.push(PromptsConfig.DEFAULT_SOURCE_FOLDER);
            }
            for (const [path, enabled] of Object.entries(value)) {
                if (enabled && path !== PromptsConfig.DEFAULT_SOURCE_FOLDER) {
                    paths.push(path);
                }
            }
            return paths;
        }
        return [];
    };
})(PromptsConfig || (PromptsConfig = {}));
function asBoolean(value) {
    if (typeof value === 'boolean') {
        return value;
    }
    if (typeof value === 'string') {
        const cleanValue = value.trim().toLowerCase();
        if (cleanValue === 'true') {
            return true;
        }
        if (cleanValue === 'false') {
            return false;
        }
        return undefined;
    }
    return undefined;
}

export { PromptsConfig };
