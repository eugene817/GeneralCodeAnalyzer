import { ITitleProperties, ITitleVariable } from "@codingame/monaco-vscode-view-title-bar-service-override/vscode/vs/workbench/browser/parts/titlebar/titlebarPart";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IBrowserWorkbenchEnvironmentService } from "@codingame/monaco-vscode-411e0589-fa79-504b-b32c-80a88847b23a-common/vscode/vs/workbench/services/environment/browser/environmentService.service";
import { IWorkspaceContextService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace.service";
import { IEditorGroupsContainer } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { IProductService } from "@codingame/monaco-vscode-api/vscode/vs/platform/product/common/productService.service";
import { IUserDataProfileService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/userDataProfile/common/userDataProfile.service";
import { IViewsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/views/common/viewsService.service";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { CodeWindow } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/window";
import { IDecorationsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/decorations/common/decorations.service";
import { IAccessibilityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/accessibility/common/accessibility.service";
export declare const defaultWindowTitle: string;
export declare const defaultWindowTitleSeparator: string;
export declare class WindowTitle extends Disposable {
    protected readonly configurationService: IConfigurationService;
    private readonly contextKeyService;
    protected readonly environmentService: IBrowserWorkbenchEnvironmentService;
    private readonly contextService;
    private readonly labelService;
    private readonly userDataProfileService;
    private readonly productService;
    private readonly viewsService;
    private readonly decorationsService;
    private readonly accessibilityService;
    private static readonly NLS_USER_IS_ADMIN;
    private static readonly NLS_EXTENSION_HOST;
    private static readonly TITLE_DIRTY;
    private readonly properties;
    private readonly variables;
    private readonly activeEditorListeners;
    private readonly titleUpdater;
    private readonly onDidChangeEmitter;
    readonly onDidChange: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    get value(): string;
    get workspaceName(): string;
    get fileName(): string | undefined;
    private title;
    private titleIncludesFocusedView;
    private titleIncludesEditorState;
    private readonly editorService;
    private readonly windowId;
    constructor(targetWindow: CodeWindow, editorGroupsContainer: IEditorGroupsContainer | "main", configurationService: IConfigurationService, contextKeyService: IContextKeyService, editorService: IEditorService, environmentService: IBrowserWorkbenchEnvironmentService, contextService: IWorkspaceContextService, labelService: ILabelService, userDataProfileService: IUserDataProfileService, productService: IProductService, viewsService: IViewsService, decorationsService: IDecorationsService, accessibilityService: IAccessibilityService);
    private registerListeners;
    private onConfigurationChanged;
    private checkTitleVariables;
    private onActiveEditorChange;
    private doUpdateTitle;
    private getFullWindowTitle;
    getTitleDecorations(): {
        prefix: string | undefined;
        suffix: string | undefined;
    };
    updateProperties(properties: ITitleProperties): void;
    registerVariables(variables: ITitleVariable[]): void;
    getWindowTitle(): string;
    isCustomTitleFormat(): boolean;
}
