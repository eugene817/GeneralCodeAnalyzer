
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { SyncDescriptor } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/descriptors';
import { IFileService } from '@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service';
import { getLogLevel } from '@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log';
export { ConsoleLogger } from '@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log';
import { ILoggerService, ILogService } from '@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service';
import { FileLoggerService } from './vscode/src/vs/platform/log/common/fileLog.js';
import { LogService } from '@codingame/monaco-vscode-api/vscode/vs/platform/log/common/logService';
import { IEnvironmentService } from '@codingame/monaco-vscode-api/vscode/vs/platform/environment/common/environment.service';
import { windowLogId } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/log/common/logConstants';
import { IWorkbenchEnvironmentService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/environment/common/environmentService.service';
import { toDisposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { DefaultLogLevelsService } from './vscode/src/vs/workbench/contrib/logs/common/defaultLogLevels.js';
import { IDefaultLogLevelsService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/logs/common/defaultLogLevels.service';
import getServiceOverride$1 from '@codingame/monaco-vscode-environment-service-override';
import { logsPath } from '@codingame/monaco-vscode-api/workbench';
import { checkServicesNotInitialized } from '@codingame/monaco-vscode-api/lifecycle';
import { rendererLogLabel } from './override/vs/workbench/browser/web.main.js';
import './vscode/src/vs/workbench/contrib/logs/common/logs.contribution.js';

let _FileLoggerService = class _FileLoggerService extends FileLoggerService {
    constructor(logLevel, fileService, environmentService) {
        super(logLevel ?? getLogLevel(environmentService), logsPath, fileService);
    }
};
_FileLoggerService = __decorate([
    __param(1, IFileService),
    __param(2, IEnvironmentService)
], _FileLoggerService);
const otherLoggers = [];
let _LogService = class _LogService extends LogService {
    constructor(loggerService, environmentService) {
        const logger = loggerService.createLogger(environmentService.logFile, {
            id: windowLogId,
            name: rendererLogLabel
        });
        super(logger, otherLoggers);
    }
};
_LogService = __decorate([
    __param(0, ILoggerService),
    __param(1, IWorkbenchEnvironmentService)
], _LogService);
function getServiceOverride(logLevel) {
    return {
        ...getServiceOverride$1(),
        [ILoggerService.toString()]: new SyncDescriptor(_FileLoggerService, [logLevel], true),
        [ILogService.toString()]: new SyncDescriptor(_LogService, [], true),
        [IDefaultLogLevelsService.toString()]: new SyncDescriptor(DefaultLogLevelsService, [], true)
    };
}
function registerAdditionalLogger(logger) {
    checkServicesNotInitialized();
    otherLoggers.push(logger);
    return toDisposable(() => {
        const idx = otherLoggers.indexOf(logger);
        if (idx >= 0) {
            otherLoggers.splice(idx, 1);
        }
    });
}

export { getServiceOverride as default, registerAdditionalLogger };
