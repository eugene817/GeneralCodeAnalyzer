import { LogLevel } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log";
import { ILoggerService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { IWorkbenchEnvironmentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/environment/common/environmentService.service";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { IJSONEditingService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/configuration/common/jsonEditing.service";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IDefaultLogLevelsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/logs/common/defaultLogLevels.service";
interface ParsedArgvLogLevels {
    default?: LogLevel;
    extensions?: [
        string,
        LogLevel
    ][];
}
export type DefaultLogLevels = Required<Readonly<ParsedArgvLogLevels>>;
export declare class DefaultLogLevelsService extends Disposable implements IDefaultLogLevelsService {
    private readonly environmentService;
    private readonly fileService;
    private readonly jsonEditingService;
    private readonly logService;
    private readonly loggerService;
    _serviceBrand: undefined;
    private _onDidChangeDefaultLogLevels;
    readonly onDidChangeDefaultLogLevels: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    constructor(environmentService: IWorkbenchEnvironmentService, fileService: IFileService, jsonEditingService: IJSONEditingService, logService: ILogService, loggerService: ILoggerService);
    getDefaultLogLevels(): Promise<DefaultLogLevels>;
    getDefaultLogLevel(extensionId?: string): Promise<LogLevel>;
    setDefaultLogLevel(defaultLogLevel: LogLevel, extensionId?: string): Promise<void>;
    private _getDefaultLogLevel;
    private _writeLogLevelsToArgv;
    private _parseLogLevelsFromArgv;
    private _readLogLevelsFromArgv;
    private _getDefaultLogLevelFromEnv;
    private _getExtensionsDefaultLogLevelsFromEnv;
}
export {};
