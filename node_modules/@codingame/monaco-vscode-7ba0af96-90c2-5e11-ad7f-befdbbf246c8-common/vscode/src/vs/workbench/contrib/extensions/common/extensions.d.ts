import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { ILocalExtension, IGalleryExtension, IExtensionIdentifier, IDeprecationInfo, InstallOptions } from "@codingame/monaco-vscode-api/vscode/vs/platform/extensionManagement/common/extensionManagement";
import { EnablementState, IExtensionManagementServer, IResourceExtension } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/extensionManagement/common/extensionManagement";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { Disposable, IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IExtensionManifest, ExtensionType } from "@codingame/monaco-vscode-api/vscode/vs/platform/extensions/common/extensions";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IView, IViewPaneContainer } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/views";
import { RawContextKey } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey";
import { MenuId } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { Severity } from "@codingame/monaco-vscode-api/vscode/vs/platform/notification/common/notification";
import { IExtensionsWorkbenchService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/extensions/common/extensions.service";
export declare const VIEWLET_ID = "workbench.view.extensions";
export declare const EXTENSIONS_CATEGORY: import("@codingame/monaco-vscode-api/vscode/vs/nls").ILocalizedString;
export interface IExtensionsViewPaneContainer extends IViewPaneContainer {
    readonly searchValue: string | undefined;
    search(text: string): void;
    refresh(): Promise<void>;
}
export interface IWorkspaceRecommendedExtensionsView extends IView {
    installWorkspaceRecommendations(): Promise<void>;
}
export declare enum ExtensionState {
    Installing = 0,
    Installed = 1,
    Uninstalling = 2,
    Uninstalled = 3
}
export declare enum ExtensionRuntimeActionType {
    ReloadWindow = "reloadWindow",
    RestartExtensions = "restartExtensions",
    DownloadUpdate = "downloadUpdate",
    ApplyUpdate = "applyUpdate",
    QuitAndInstall = "quitAndInstall"
}
export type ExtensionRuntimeState = {
    action: ExtensionRuntimeActionType;
    reason: string;
};
export interface IExtension {
    readonly type: ExtensionType;
    readonly isBuiltin: boolean;
    readonly isWorkspaceScoped: boolean;
    readonly state: ExtensionState;
    readonly name: string;
    readonly displayName: string;
    readonly identifier: IExtensionIdentifier;
    readonly publisher: string;
    readonly publisherDisplayName: string;
    readonly publisherUrl?: URI;
    readonly publisherDomain?: {
        link: string;
        verified: boolean;
    };
    readonly publisherSponsorLink?: URI;
    readonly pinned: boolean;
    readonly version: string;
    readonly latestVersion: string;
    readonly preRelease: boolean;
    readonly isPreReleaseVersion: boolean;
    readonly hasPreReleaseVersion: boolean;
    readonly hasReleaseVersion: boolean;
    readonly description: string;
    readonly url?: string;
    readonly repository?: string;
    readonly supportUrl?: string;
    readonly iconUrl: string;
    readonly iconUrlFallback: string;
    readonly licenseUrl?: string;
    readonly installCount?: number;
    readonly rating?: number;
    readonly ratingCount?: number;
    readonly outdated: boolean;
    readonly outdatedTargetPlatform: boolean;
    readonly runtimeState: ExtensionRuntimeState | undefined;
    readonly enablementState: EnablementState;
    readonly tags: readonly string[];
    readonly categories: readonly string[];
    readonly dependencies: string[];
    readonly extensionPack: string[];
    readonly telemetryData: any;
    readonly preview: boolean;
    getManifest(token: CancellationToken): Promise<IExtensionManifest | null>;
    hasReadme(): boolean;
    getReadme(token: CancellationToken): Promise<string>;
    hasChangelog(): boolean;
    getChangelog(token: CancellationToken): Promise<string>;
    readonly server?: IExtensionManagementServer;
    readonly local?: ILocalExtension;
    gallery?: IGalleryExtension;
    readonly resourceExtension?: IResourceExtension;
    readonly isMalicious: boolean;
    readonly deprecationInfo?: IDeprecationInfo;
}
export interface InstallExtensionOptions extends InstallOptions {
    version?: string;
    justification?: string | {
        reason: string;
        action: string;
    };
    enable?: boolean;
    installEverywhere?: boolean;
}
export interface IExtensionsNotification {
    readonly message: string;
    readonly severity: Severity;
    readonly extensions: IExtension[];
    dismiss(): void;
}
export declare enum ExtensionEditorTab {
    Readme = "readme",
    Features = "features",
    Changelog = "changelog",
    Dependencies = "dependencies",
    ExtensionPack = "extensionPack"
}
export declare const ConfigurationKey = "extensions";
export declare const AutoUpdateConfigurationKey = "extensions.autoUpdate";
export declare const AutoCheckUpdatesConfigurationKey = "extensions.autoCheckUpdates";
export declare const CloseExtensionDetailsOnViewChangeKey = "extensions.closeExtensionDetailsOnViewChange";
export declare const AutoRestartConfigurationKey = "extensions.autoRestart";
export type AutoUpdateConfigurationValue = boolean | "onlyEnabledExtensions" | "onlySelectedExtensions";
export interface IExtensionsConfiguration {
    autoUpdate: boolean;
    autoCheckUpdates: boolean;
    ignoreRecommendations: boolean;
    closeExtensionDetailsOnViewChange: boolean;
}
export interface IExtensionContainer extends IDisposable {
    extension: IExtension | null;
    updateWhenCounterExtensionChanges?: boolean;
    update(): void;
}
export interface IExtensionsViewState {
    onFocus: Event<IExtension>;
    onBlur: Event<IExtension>;
    filters: {
        featureId?: string;
    };
}
export declare class ExtensionContainers extends Disposable {
    private readonly containers;
    constructor(containers: IExtensionContainer[], extensionsWorkbenchService: IExtensionsWorkbenchService);
    set extension(extension: IExtension);
    private update;
}
export declare const WORKSPACE_RECOMMENDATIONS_VIEW_ID = "workbench.views.extensions.workspaceRecommendations";
export declare const OUTDATED_EXTENSIONS_VIEW_ID = "workbench.views.extensions.searchOutdated";
export declare const TOGGLE_IGNORE_EXTENSION_ACTION_ID = "workbench.extensions.action.toggleIgnoreExtension";
export declare const SELECT_INSTALL_VSIX_EXTENSION_COMMAND_ID = "workbench.extensions.action.installVSIX";
export declare const INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID = "workbench.extensions.command.installFromVSIX";
export declare const LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID = "workbench.extensions.action.listWorkspaceUnsupportedExtensions";
export declare const HasOutdatedExtensionsContext: RawContextKey<boolean>;
export declare const CONTEXT_HAS_GALLERY: RawContextKey<boolean>;
export declare const ExtensionResultsListFocused: RawContextKey<boolean>;
export declare const THEME_ACTIONS_GROUP = "_theme_";
export declare const INSTALL_ACTIONS_GROUP = "0_install";
export declare const UPDATE_ACTIONS_GROUP = "0_update";
export declare const extensionsSearchActionsMenu: MenuId;
export interface IExtensionArg {
    id: string;
    version: string;
    location: URI | undefined;
}
