import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { ColorScheme } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/theme";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { IWorkbenchColorTheme, ThemeSettingTarget, IWorkbenchThemeChangeEvent, IWorkbenchFileIconTheme, IWorkbenchProductIconTheme } from "@codingame/monaco-vscode-9d0168a3-519b-57f3-9bcc-89efc41f951a-common/vscode/vs/workbench/services/themes/common/workbenchThemeService";
export declare const IWorkbenchThemeService: import("@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation").ServiceIdentifier<IWorkbenchThemeService>;
export interface IWorkbenchThemeService extends IThemeService {
    readonly _serviceBrand: undefined;
    setColorTheme(themeId: string | undefined | IWorkbenchColorTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchColorTheme | null>;
    getColorTheme(): IWorkbenchColorTheme;
    getColorThemes(): Promise<IWorkbenchColorTheme[]>;
    getMarketplaceColorThemes(publisher: string, name: string, version: string): Promise<IWorkbenchColorTheme[]>;
    onDidColorThemeChange: Event<IWorkbenchThemeChangeEvent>;
    getPreferredColorScheme(): ColorScheme | undefined;
    setFileIconTheme(iconThemeId: string | undefined | IWorkbenchFileIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchFileIconTheme>;
    getFileIconTheme(): IWorkbenchFileIconTheme;
    getFileIconThemes(): Promise<IWorkbenchFileIconTheme[]>;
    getMarketplaceFileIconThemes(publisher: string, name: string, version: string): Promise<IWorkbenchFileIconTheme[]>;
    onDidFileIconThemeChange: Event<IWorkbenchFileIconTheme>;
    setProductIconTheme(iconThemeId: string | undefined | IWorkbenchProductIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchProductIconTheme>;
    getProductIconTheme(): IWorkbenchProductIconTheme;
    getProductIconThemes(): Promise<IWorkbenchProductIconTheme[]>;
    getMarketplaceProductIconThemes(publisher: string, name: string, version: string): Promise<IWorkbenchProductIconTheme[]>;
    onDidProductIconThemeChange: Event<IWorkbenchProductIconTheme>;
}
