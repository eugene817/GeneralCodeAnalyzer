import { IMenu } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { IMenuService } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions.service";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IAction, Separator } from "@codingame/monaco-vscode-api/vscode/vs/base/common/actions";
import { Dimension } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/dom";
import { IKeybindingService } from "@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybinding.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { Disposable, DisposableStore } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IRecentlyOpened } from "@codingame/monaco-vscode-7559b0be-bfa5-5fe6-b731-1973fe9fffa1-common/vscode/vs/platform/workspaces/common/workspaces";
import { IWorkspacesService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspaces/common/workspaces.service";
import { RunOnceScheduler } from "@codingame/monaco-vscode-api/vscode/vs/base/common/async";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { IUpdateService } from "@codingame/monaco-vscode-api/vscode/vs/platform/update/common/update.service";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { INotificationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/notification/common/notification.service";
import { IPreferencesService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/preferences/common/preferences.service";
import { IWorkbenchEnvironmentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/environment/common/environmentService.service";
import { IAccessibilityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/accessibility/common/accessibility.service";
import { IHostService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/host/browser/host.service";
import { ICommandService } from "@codingame/monaco-vscode-api/vscode/vs/platform/commands/common/commands.service";
import { ITelemetryService } from "@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetry.service";
export type IOpenRecentAction = IAction & {
    uri: URI;
    remoteAuthority?: string;
};
export declare abstract class MenubarControl extends Disposable {
    protected readonly menuService: IMenuService;
    protected readonly workspacesService: IWorkspacesService;
    protected readonly contextKeyService: IContextKeyService;
    protected readonly keybindingService: IKeybindingService;
    protected readonly configurationService: IConfigurationService;
    protected readonly labelService: ILabelService;
    protected readonly updateService: IUpdateService;
    protected readonly storageService: IStorageService;
    protected readonly notificationService: INotificationService;
    protected readonly preferencesService: IPreferencesService;
    protected readonly environmentService: IWorkbenchEnvironmentService;
    protected readonly accessibilityService: IAccessibilityService;
    protected readonly hostService: IHostService;
    protected readonly commandService: ICommandService;
    protected keys: string[];
    protected mainMenu: IMenu;
    protected menus: {
        [index: string]: IMenu | undefined;
    };
    protected topLevelTitles: {
        [menu: string]: string;
    };
    protected readonly mainMenuDisposables: DisposableStore;
    protected recentlyOpened: IRecentlyOpened;
    protected menuUpdater: RunOnceScheduler;
    protected static readonly MAX_MENU_RECENT_ENTRIES = 10;
    constructor(menuService: IMenuService, workspacesService: IWorkspacesService, contextKeyService: IContextKeyService, keybindingService: IKeybindingService, configurationService: IConfigurationService, labelService: ILabelService, updateService: IUpdateService, storageService: IStorageService, notificationService: INotificationService, preferencesService: IPreferencesService, environmentService: IWorkbenchEnvironmentService, accessibilityService: IAccessibilityService, hostService: IHostService, commandService: ICommandService);
    protected abstract doUpdateMenubar(firstTime: boolean): void;
    protected registerListeners(): void;
    protected setupMainMenu(): void;
    protected updateMenubar(): void;
    protected calculateActionLabel(action: {
        id: string;
        label: string;
    }): string;
    protected onUpdateStateChange(): void;
    protected onUpdateKeybindings(): void;
    protected getOpenRecentActions(): (Separator | IOpenRecentAction)[];
    protected onDidChangeWindowFocus(hasFocus: boolean): void;
    private onConfigurationUpdated;
    private get menubarHidden();
    protected onDidChangeRecentlyOpened(): void;
    private createOpenRecentMenuAction;
    private notifyUserOfCustomMenubarAccessibility;
}
export declare class CustomMenubarControl extends MenubarControl {
    private readonly telemetryService;
    private menubar;
    private container;
    private alwaysOnMnemonics;
    private focusInsideMenubar;
    private pendingFirstTimeUpdate;
    private visible;
    private actionRunner;
    private readonly webNavigationMenu;
    private readonly _onVisibilityChange;
    private readonly _onFocusStateChange;
    constructor(menuService: IMenuService, workspacesService: IWorkspacesService, contextKeyService: IContextKeyService, keybindingService: IKeybindingService, configurationService: IConfigurationService, labelService: ILabelService, updateService: IUpdateService, storageService: IStorageService, notificationService: INotificationService, preferencesService: IPreferencesService, environmentService: IWorkbenchEnvironmentService, accessibilityService: IAccessibilityService, telemetryService: ITelemetryService, hostService: IHostService, commandService: ICommandService);
    protected doUpdateMenubar(firstTime: boolean): void;
    private getUpdateAction;
    private get currentMenubarVisibility();
    private get currentDisableMenuBarAltFocus();
    private insertActionsBefore;
    private get currentEnableMenuBarMnemonics();
    private get currentCompactMenuMode();
    private onDidVisibilityChange;
    private toActionsArray;
    private readonly reinstallDisposables;
    private readonly updateActionsDisposables;
    private setupCustomMenubar;
    private getWebNavigationActions;
    private getMenuBarOptions;
    protected onDidChangeWindowFocus(hasFocus: boolean): void;
    protected onUpdateStateChange(): void;
    protected onDidChangeRecentlyOpened(): void;
    protected onUpdateKeybindings(): void;
    protected registerListeners(): void;
    get onVisibilityChange(): Event<boolean>;
    get onFocusStateChange(): Event<boolean>;
    getMenubarItemsDimensions(): Dimension;
    create(parent: HTMLElement): HTMLElement;
    layout(dimension: Dimension): void;
    toggleFocus(): void;
}
