import { Component } from "@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/workbench/common/component";
import { IColorTheme } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { Dimension, IDimension, IDomPosition } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/dom";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { ISerializableView, IViewSize } from "@codingame/monaco-vscode-6980eeab-47bb-5a48-8e15-32caf0785565-common/vscode/vs/base/browser/ui/grid/grid";
import { Event, Emitter } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IWorkbenchLayoutService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service";
import { IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
export interface IPartOptions {
    readonly hasTitle?: boolean;
    readonly borderWidth?: () => number;
}
export interface ILayoutContentResult {
    readonly headerSize: IDimension;
    readonly titleSize: IDimension;
    readonly contentSize: IDimension;
    readonly footerSize: IDimension;
}
export declare abstract class Part extends Component implements ISerializableView {
    private options;
    protected readonly layoutService: IWorkbenchLayoutService;
    private _dimension;
    get dimension(): Dimension | undefined;
    private _contentPosition;
    get contentPosition(): IDomPosition | undefined;
    protected _onDidVisibilityChange: Emitter<boolean>;
    readonly onDidVisibilityChange: Event<boolean>;
    private parent;
    private headerArea;
    private titleArea;
    private contentArea;
    private footerArea;
    private partLayout;
    constructor(id: string, options: IPartOptions, themeService: IThemeService, storageService: IStorageService, layoutService: IWorkbenchLayoutService);
    protected onThemeChange(theme: IColorTheme): void;
    create(parent: HTMLElement, options?: object): void;
    getContainer(): HTMLElement | undefined;
    protected createTitleArea(parent: HTMLElement, options?: object): HTMLElement | undefined;
    protected getTitleArea(): HTMLElement | undefined;
    protected createContentArea(parent: HTMLElement, options?: object): HTMLElement | undefined;
    protected getContentArea(): HTMLElement | undefined;
    protected setHeaderArea(headerContainer: HTMLElement): void;
    protected setFooterArea(footerContainer: HTMLElement): void;
    protected removeHeaderArea(): void;
    protected removeFooterArea(): void;
    private relayout;
    protected layoutContents(width: number, height: number): ILayoutContentResult;
    protected _onDidChange: Emitter<IViewSize | undefined>;
    get onDidChange(): Event<IViewSize | undefined>;
    element: HTMLElement;
    abstract minimumWidth: number;
    abstract maximumWidth: number;
    abstract minimumHeight: number;
    abstract maximumHeight: number;
    layout(width: number, height: number, top: number, left: number): void;
    setVisible(visible: boolean): void;
    abstract toJSON(): object;
}
export interface IMultiWindowPart {
    readonly element: HTMLElement;
}
export declare abstract class MultiWindowParts<T extends IMultiWindowPart> extends Component {
    protected readonly _parts: Set<T>;
    get parts(): T[];
    abstract readonly mainPart: T;
    registerPart(part: T): IDisposable;
    protected unregisterPart(part: T): void;
    getPart(container: HTMLElement): T;
    protected getPartByDocument(document: Document): T;
    get activePart(): T;
}
