import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IEnvironmentService } from "@codingame/monaco-vscode-api/vscode/vs/platform/environment/common/environment.service";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { IProductService } from "@codingame/monaco-vscode-api/vscode/vs/platform/product/common/productService.service";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { IUserDataManifest } from "@codingame/monaco-vscode-api/vscode/vs/platform/userDataSync/common/userDataSync";
import { IUserDataSyncLogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/userDataSync/common/userDataSync.service";
import { IUserDataSyncStoreService } from "@codingame/monaco-vscode-api/vscode/vs/platform/userDataSync/common/userDataSync.service";
import { IUserDataSyncMachinesService } from "@codingame/monaco-vscode-api/vscode/vs/platform/userDataSync/common/userDataSyncMachines.service";
export interface IMachineData {
    id: string;
    name: string;
    disabled?: boolean;
    platform?: string;
}
export interface IMachinesData {
    version: number;
    machines: IMachineData[];
}
export type IUserDataSyncMachine = Readonly<IMachineData> & {
    readonly isCurrent: boolean;
};
export declare function isWebPlatform(platform: string): boolean;
export declare class UserDataSyncMachinesService extends Disposable implements IUserDataSyncMachinesService {
    private readonly storageService;
    private readonly userDataSyncStoreService;
    private readonly logService;
    private readonly productService;
    private static readonly VERSION;
    private static readonly RESOURCE;
    _serviceBrand: any;
    private readonly _onDidChange;
    readonly onDidChange: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private readonly currentMachineIdPromise;
    private userData;
    constructor(environmentService: IEnvironmentService, fileService: IFileService, storageService: IStorageService, userDataSyncStoreService: IUserDataSyncStoreService, logService: IUserDataSyncLogService, productService: IProductService);
    getMachines(manifest?: IUserDataManifest): Promise<IUserDataSyncMachine[]>;
    addCurrentMachine(manifest?: IUserDataManifest): Promise<void>;
    removeCurrentMachine(manifest?: IUserDataManifest): Promise<void>;
    renameMachine(machineId: string, name: string, manifest?: IUserDataManifest): Promise<void>;
    setEnablements(enablements: [
        string,
        boolean
    ][]): Promise<void>;
    private computeCurrentMachineName;
    private readMachinesData;
    private writeMachinesData;
    private readUserData;
    private parse;
}
