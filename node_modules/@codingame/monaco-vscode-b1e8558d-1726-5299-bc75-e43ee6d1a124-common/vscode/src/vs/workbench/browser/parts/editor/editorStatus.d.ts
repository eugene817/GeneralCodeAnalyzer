import { Action } from "@codingame/monaco-vscode-api/vscode/vs/base/common/actions";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { ICommandService } from "@codingame/monaco-vscode-api/vscode/vs/platform/commands/common/commands.service";
import { IExtensionGalleryService } from "@codingame/monaco-vscode-api/vscode/vs/platform/extensionManagement/common/extensionManagement.service";
import { IWorkbenchContribution } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/contributions";
import { Action2 } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { ServicesAccessor } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/editorExtensions";
import { IEditorGroupsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorGroupsService.service";
export declare class EditorStatusContribution extends Disposable implements IWorkbenchContribution {
    private readonly editorGroupService;
    static readonly ID = "workbench.contrib.editorStatus";
    constructor(editorGroupService: IEditorGroupsService);
    private createEditorStatus;
}
export declare class ShowLanguageExtensionsAction extends Action {
    private fileExtension;
    private readonly commandService;
    static readonly ID = "workbench.action.showLanguageExtensions";
    constructor(fileExtension: string, commandService: ICommandService, galleryService: IExtensionGalleryService);
    run(): Promise<void>;
}
export declare class ChangeLanguageAction extends Action2 {
    static readonly ID = "workbench.action.editor.changeLanguageMode";
    constructor();
    run(accessor: ServicesAccessor, languageMode?: string): Promise<void>;
    private configureFileAssociation;
}
export declare class ChangeEOLAction extends Action2 {
    constructor();
    run(accessor: ServicesAccessor): Promise<void>;
}
export declare class ChangeEncodingAction extends Action2 {
    constructor();
    run(accessor: ServicesAccessor): Promise<void>;
}
