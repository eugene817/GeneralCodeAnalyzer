import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { Event, Emitter } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { ConfigurationModel, ConfigurationParseOptions, UserSettings } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configurationModels";
import { IConfigurationCache } from "@codingame/monaco-vscode-b1249c5b-1339-5278-b002-746f08105c6d-common/vscode/vs/workbench/services/configuration/common/configuration";
import { IStoredWorkspaceFolder } from "@codingame/monaco-vscode-7559b0be-bfa5-5fe6-b731-1973fe9fffa1-common/vscode/vs/platform/workspaces/common/workspaces";
import { WorkbenchState, IWorkspaceFolder, IWorkspaceIdentifier } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace";
import { IRemoteAgentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/remote/common/remoteAgentService.service";
import { IUriIdentityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/uriIdentity/common/uriIdentity.service";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { IStringDictionary } from "@codingame/monaco-vscode-api/vscode/vs/base/common/collections";
import { IBrowserWorkbenchEnvironmentService } from "@codingame/monaco-vscode-411e0589-fa79-504b-b32c-80a88847b23a-common/vscode/vs/workbench/services/environment/browser/environmentService.service";
import { DefaultConfiguration as BaseDefaultConfiguration } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configurations";
import { IJSONEditingService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/configuration/common/jsonEditing.service";
import { IUserDataProfilesService } from "@codingame/monaco-vscode-api/vscode/vs/platform/userDataProfile/common/userDataProfile.service";
export declare class DefaultConfiguration extends BaseDefaultConfiguration {
    private readonly configurationCache;
    static readonly DEFAULT_OVERRIDES_CACHE_EXISTS_KEY = "DefaultOverridesCacheExists";
    private readonly configurationRegistry;
    private cachedConfigurationDefaultsOverrides;
    private readonly cacheKey;
    private updateCache;
    constructor(configurationCache: IConfigurationCache, environmentService: IBrowserWorkbenchEnvironmentService, logService: ILogService);
    protected getConfigurationDefaultOverrides(): IStringDictionary<any>;
    initialize(): Promise<ConfigurationModel>;
    reload(): ConfigurationModel;
    hasCachedConfigurationDefaultsOverrides(): boolean;
    private initiaizeCachedConfigurationDefaultsOverridesPromise;
    private initializeCachedConfigurationDefaultsOverrides;
    protected onDidUpdateConfiguration(properties: string[], defaultsOverrides?: boolean): void;
    private updateCachedConfigurationDefaultsOverrides;
}
export declare class ApplicationConfiguration extends UserSettings {
    private readonly _onDidChangeConfiguration;
    readonly onDidChangeConfiguration: Event<ConfigurationModel>;
    private readonly reloadConfigurationScheduler;
    constructor(userDataProfilesService: IUserDataProfilesService, fileService: IFileService, uriIdentityService: IUriIdentityService, logService: ILogService);
    initialize(): Promise<ConfigurationModel>;
    loadConfiguration(): Promise<ConfigurationModel>;
}
export declare class UserConfiguration extends Disposable {
    private settingsResource;
    private tasksResource;
    private configurationParseOptions;
    private readonly fileService;
    private readonly uriIdentityService;
    private readonly logService;
    private readonly _onDidChangeConfiguration;
    readonly onDidChangeConfiguration: Event<ConfigurationModel>;
    private readonly userConfiguration;
    private readonly userConfigurationChangeDisposable;
    private readonly reloadConfigurationScheduler;
    get hasTasksLoaded(): boolean;
    constructor(settingsResource: URI, tasksResource: URI | undefined, configurationParseOptions: ConfigurationParseOptions, fileService: IFileService, uriIdentityService: IUriIdentityService, logService: ILogService);
    reset(settingsResource: URI, tasksResource: URI | undefined, configurationParseOptions: ConfigurationParseOptions): Promise<ConfigurationModel>;
    private doReset;
    initialize(): Promise<ConfigurationModel>;
    reload(settingsConfiguration?: ConfigurationModel): Promise<ConfigurationModel>;
    reparse(parseOptions?: Partial<ConfigurationParseOptions>): ConfigurationModel;
    getRestrictedSettings(): string[];
}
export declare class RemoteUserConfiguration extends Disposable {
    private readonly _cachedConfiguration;
    private readonly _fileService;
    private _userConfiguration;
    private _userConfigurationInitializationPromise;
    private readonly _onDidChangeConfiguration;
    readonly onDidChangeConfiguration: Event<ConfigurationModel>;
    private readonly _onDidInitialize;
    readonly onDidInitialize: Event<ConfigurationModel>;
    constructor(remoteAuthority: string, configurationCache: IConfigurationCache, fileService: IFileService, uriIdentityService: IUriIdentityService, remoteAgentService: IRemoteAgentService, logService: ILogService);
    initialize(): Promise<ConfigurationModel>;
    reload(): Promise<ConfigurationModel>;
    reparse(): ConfigurationModel;
    getRestrictedSettings(): string[];
    private onDidUserConfigurationChange;
    private updateCache;
}
export declare class WorkspaceConfiguration extends Disposable {
    private readonly configurationCache;
    private readonly fileService;
    private readonly uriIdentityService;
    private readonly logService;
    private readonly _cachedConfiguration;
    private _workspaceConfiguration;
    private readonly _workspaceConfigurationDisposables;
    private _workspaceIdentifier;
    private _isWorkspaceTrusted;
    private readonly _onDidUpdateConfiguration;
    readonly onDidUpdateConfiguration: Event<boolean>;
    private _initialized;
    get initialized(): boolean;
    constructor(configurationCache: IConfigurationCache, fileService: IFileService, uriIdentityService: IUriIdentityService, logService: ILogService);
    initialize(workspaceIdentifier: IWorkspaceIdentifier, workspaceTrusted: boolean): Promise<void>;
    reload(): Promise<void>;
    getFolders(): IStoredWorkspaceFolder[];
    setFolders(folders: IStoredWorkspaceFolder[], jsonEditingService: IJSONEditingService): Promise<void>;
    isTransient(): boolean;
    getConfiguration(): ConfigurationModel;
    updateWorkspaceTrust(trusted: boolean): ConfigurationModel;
    reparseWorkspaceSettings(): ConfigurationModel;
    getRestrictedSettings(): string[];
    private waitAndInitialize;
    private doInitialize;
    private isUntrusted;
    private onDidWorkspaceConfigurationChange;
    private updateCache;
}
export declare class FolderConfiguration extends Disposable {
    readonly workspaceFolder: IWorkspaceFolder;
    private readonly workbenchState;
    private workspaceTrusted;
    private readonly configurationCache;
    protected readonly _onDidChange: Emitter<void>;
    readonly onDidChange: Event<void>;
    private folderConfiguration;
    private readonly scopes;
    private readonly configurationFolder;
    private cachedFolderConfiguration;
    constructor(useCache: boolean, workspaceFolder: IWorkspaceFolder, configFolderRelativePath: string, workbenchState: WorkbenchState, workspaceTrusted: boolean, fileService: IFileService, uriIdentityService: IUriIdentityService, logService: ILogService, configurationCache: IConfigurationCache);
    loadConfiguration(): Promise<ConfigurationModel>;
    updateWorkspaceTrust(trusted: boolean): ConfigurationModel;
    reparse(): ConfigurationModel;
    getRestrictedSettings(): string[];
    private isUntrusted;
    private onDidFolderConfigurationChange;
    private createFileServiceBasedConfiguration;
    private updateCache;
}
