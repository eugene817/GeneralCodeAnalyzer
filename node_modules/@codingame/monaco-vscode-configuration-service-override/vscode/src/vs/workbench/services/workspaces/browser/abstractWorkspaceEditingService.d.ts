import { IWorkspaceEditingService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/workspaces/common/workspaceEditing.service";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IWorkspaceIdentifier } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace";
import { IJSONEditingService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/configuration/common/jsonEditing.service";
import { IWorkspaceFolderCreationData, IEnterWorkspaceResult } from "@codingame/monaco-vscode-7559b0be-bfa5-5fe6-b731-1973fe9fffa1-common/vscode/vs/platform/workspaces/common/workspaces";
import { IWorkspacesService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspaces/common/workspaces.service";
import { WorkspaceService } from "../../configuration/browser/configurationService.js";
import { ICommandService } from "@codingame/monaco-vscode-api/vscode/vs/platform/commands/common/commands.service";
import { INotificationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/notification/common/notification.service";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { IWorkbenchEnvironmentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/environment/common/environmentService.service";
import { IFileDialogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service";
import { IDialogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service";
import { ITextFileService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/textfile/common/textfiles.service";
import { IHostService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/host/browser/host.service";
import { IUriIdentityService } from "@codingame/monaco-vscode-api/vscode/vs/platform/uriIdentity/common/uriIdentity.service";
import { IWorkspaceTrustManagementService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspaceTrust.service";
import { IWorkbenchConfigurationService } from "@codingame/monaco-vscode-422642f2-7e3a-5c1c-9e1e-1d3ef1817346-common/vscode/vs/workbench/services/configuration/common/configuration.service";
import { IUserDataProfilesService } from "@codingame/monaco-vscode-api/vscode/vs/platform/userDataProfile/common/userDataProfile.service";
import { IUserDataProfileService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/userDataProfile/common/userDataProfile.service";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
export declare abstract class AbstractWorkspaceEditingService extends Disposable implements IWorkspaceEditingService {
    private readonly jsonEditingService;
    protected readonly contextService: WorkspaceService;
    protected readonly configurationService: IWorkbenchConfigurationService;
    private readonly notificationService;
    private readonly commandService;
    private readonly fileService;
    private readonly textFileService;
    protected readonly workspacesService: IWorkspacesService;
    protected readonly environmentService: IWorkbenchEnvironmentService;
    private readonly fileDialogService;
    protected readonly dialogService: IDialogService;
    protected readonly hostService: IHostService;
    protected readonly uriIdentityService: IUriIdentityService;
    private readonly workspaceTrustManagementService;
    private readonly userDataProfilesService;
    private readonly userDataProfileService;
    readonly _serviceBrand: undefined;
    constructor(jsonEditingService: IJSONEditingService, contextService: WorkspaceService, configurationService: IWorkbenchConfigurationService, notificationService: INotificationService, commandService: ICommandService, fileService: IFileService, textFileService: ITextFileService, workspacesService: IWorkspacesService, environmentService: IWorkbenchEnvironmentService, fileDialogService: IFileDialogService, dialogService: IDialogService, hostService: IHostService, uriIdentityService: IUriIdentityService, workspaceTrustManagementService: IWorkspaceTrustManagementService, userDataProfilesService: IUserDataProfilesService, userDataProfileService: IUserDataProfileService);
    pickNewWorkspacePath(): Promise<URI | undefined>;
    private getNewWorkspaceName;
    updateFolders(index: number, deleteCount?: number, foldersToAddCandidates?: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;
    private doUpdateFolders;
    addFolders(foldersToAddCandidates: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void>;
    private doAddFolders;
    removeFolders(foldersToRemove: URI[], donotNotifyError?: boolean): Promise<void>;
    private includesSingleFolderWorkspace;
    createAndEnterWorkspace(folders: IWorkspaceFolderCreationData[], path?: URI): Promise<void>;
    saveAndEnterWorkspace(workspaceUri: URI): Promise<void>;
    isValidTargetWorkspacePath(workspaceUri: URI): Promise<boolean>;
    protected saveWorkspaceAs(workspace: IWorkspaceIdentifier, targetConfigPathURI: URI): Promise<void>;
    protected saveWorkspace(workspace: IWorkspaceIdentifier): Promise<void>;
    private handleWorkspaceConfigurationEditingError;
    private onInvalidWorkspaceConfigurationFileError;
    private askToOpenWorkspaceConfigurationFile;
    abstract enterWorkspace(workspaceUri: URI): Promise<void>;
    protected doEnterWorkspace(workspaceUri: URI): Promise<IEnterWorkspaceResult | undefined>;
    private migrateWorkspaceSettings;
    copyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void>;
    private doCopyWorkspaceSettings;
    private trustWorkspaceConfiguration;
    protected getCurrentWorkspaceIdentifier(): IWorkspaceIdentifier | undefined;
}
