
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { Disposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { Position } from '@codingame/monaco-vscode-api/vscode/vs/editor/common/core/position';
import { ILanguageService } from '@codingame/monaco-vscode-api/vscode/vs/editor/common/languages/language.service';
import { IModelService } from '@codingame/monaco-vscode-api/vscode/vs/editor/common/services/model.service';
import { ConfigurationTarget } from '@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration';
import { IConfigurationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service';

let TextResourceConfigurationService = class TextResourceConfigurationService extends Disposable {
    constructor(configurationService, modelService, languageService) {
        super();
        this.configurationService = configurationService;
        this.modelService = modelService;
        this.languageService = languageService;
        this._onDidChangeConfiguration = this._register(( new Emitter()));
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
        this._register(this.configurationService.onDidChangeConfiguration(e => this._onDidChangeConfiguration.fire(this.toResourceConfigurationChangeEvent(e))));
    }
    getValue(resource, arg2, arg3) {
        if (typeof arg3 === 'string') {
            return this._getValue(resource, Position.isIPosition(arg2) ? arg2 : null, arg3);
        }
        return this._getValue(resource, null, typeof arg2 === 'string' ? arg2 : undefined);
    }
    updateValue(resource, key, value, configurationTarget) {
        const language = this.getLanguage(resource, null);
        const configurationValue = this.configurationService.inspect(key, { resource, overrideIdentifier: language });
        if (configurationTarget === undefined) {
            configurationTarget = this.deriveConfigurationTarget(configurationValue, language);
        }
        const overrideIdentifier = language && configurationValue.overrideIdentifiers?.includes(language) ? language : undefined;
        return this.configurationService.updateValue(key, value, { resource, overrideIdentifier }, configurationTarget);
    }
    deriveConfigurationTarget(configurationValue, language) {
        if (language) {
            if (configurationValue.memory?.override !== undefined) {
                return ConfigurationTarget.MEMORY;
            }
            if (configurationValue.workspaceFolder?.override !== undefined) {
                return ConfigurationTarget.WORKSPACE_FOLDER;
            }
            if (configurationValue.workspace?.override !== undefined) {
                return ConfigurationTarget.WORKSPACE;
            }
            if (configurationValue.userRemote?.override !== undefined) {
                return ConfigurationTarget.USER_REMOTE;
            }
            if (configurationValue.userLocal?.override !== undefined) {
                return ConfigurationTarget.USER_LOCAL;
            }
        }
        if (configurationValue.memory?.value !== undefined) {
            return ConfigurationTarget.MEMORY;
        }
        if (configurationValue.workspaceFolder?.value !== undefined) {
            return ConfigurationTarget.WORKSPACE_FOLDER;
        }
        if (configurationValue.workspace?.value !== undefined) {
            return ConfigurationTarget.WORKSPACE;
        }
        if (configurationValue.userRemote?.value !== undefined) {
            return ConfigurationTarget.USER_REMOTE;
        }
        return ConfigurationTarget.USER_LOCAL;
    }
    _getValue(resource, position, section) {
        const language = resource ? this.getLanguage(resource, position) : undefined;
        if (typeof section === 'undefined') {
            return this.configurationService.getValue({ resource, overrideIdentifier: language });
        }
        return this.configurationService.getValue(section, { resource, overrideIdentifier: language });
    }
    inspect(resource, position, section) {
        const language = resource ? this.getLanguage(resource, position) : undefined;
        return this.configurationService.inspect(section, { resource, overrideIdentifier: language });
    }
    getLanguage(resource, position) {
        const model = this.modelService.getModel(resource);
        if (model) {
            return position ? model.getLanguageIdAtPosition(position.lineNumber, position.column) : model.getLanguageId();
        }
        return this.languageService.guessLanguageIdByFilepathOrFirstLine(resource);
    }
    toResourceConfigurationChangeEvent(configurationChangeEvent) {
        return {
            affectedKeys: configurationChangeEvent.affectedKeys,
            affectsConfiguration: (resource, configuration) => {
                const overrideIdentifier = resource ? this.getLanguage(resource, null) : undefined;
                if (configurationChangeEvent.affectsConfiguration(configuration, { resource, overrideIdentifier })) {
                    return true;
                }
                if (overrideIdentifier) {
                    return ( configurationChangeEvent.affectedKeys.has(`[${overrideIdentifier}]`));
                }
                return false;
            }
        };
    }
};
TextResourceConfigurationService = ( __decorate([
    ( __param(0, IConfigurationService)),
    ( __param(1, IModelService)),
    ( __param(2, ILanguageService))
], TextResourceConfigurationService));

export { TextResourceConfigurationService };
