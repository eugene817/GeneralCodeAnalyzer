import type { IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import type { IEditorOverrideServices } from "@codingame/monaco-vscode-api/vscode/vs/editor/standalone/browser/standaloneServices";
import { ConfigurationScope, type IConfigurationDefaults, type IConfigurationNode, type IConfigurationRegistry } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configurationRegistry";
import type { IFileWriteOptions } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files";
import type { IAnyWorkspaceIdentifier, IEmptyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace";
import type { IStoredWorkspace, IWorkspaceFolderCreationData } from "@codingame/monaco-vscode-7559b0be-bfa5-5fe6-b731-1973fe9fffa1-common/vscode/vs/platform/workspaces/common/workspaces";
import type { IColorCustomizations, IThemeScopedColorCustomizations } from "@codingame/monaco-vscode-9d0168a3-519b-57f3-9bcc-89efc41f951a-common/vscode/vs/workbench/services/themes/common/workbenchThemeService";
declare const defaultUserConfigurationFile: URI;
/**
 * Should be called only BEFORE the service are initialized to initialize the file on the filesystem before the configuration service initializes
 */
declare function initUserConfiguration(configurationJson: string, options?: Partial<IFileWriteOptions>, file?: URI): Promise<void>;
/**
 * Can be called at any time after the services are initialized to update the user configuration
 */
declare function updateUserConfiguration(configurationJson: string): Promise<void>;
declare function getUserConfiguration(): Promise<string>;
declare function onUserConfigurationChange(callback: () => void): IDisposable;
declare const configurationRegistry: IConfigurationRegistry;
export declare function reinitializeWorkspace(workspace: IAnyWorkspaceIdentifier): Promise<void>;
declare function getServiceOverride(): IEditorOverrideServices;
/**
 * @deprecated Provide workspace via the services `initialize` function `configuration.workspaceProvider` parameter
 */
declare function getServiceOverride(defaultWorkspace?: URI | IAnyWorkspaceIdentifier): IEditorOverrideServices;
export default getServiceOverride;
export { ConfigurationScope, configurationRegistry, defaultUserConfigurationFile, getUserConfiguration, initUserConfiguration, onUserConfigurationChange, updateUserConfiguration };
export type { IAnyWorkspaceIdentifier, IColorCustomizations, IConfigurationDefaults, IConfigurationNode, IEmptyWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, IStoredWorkspace, IThemeScopedColorCustomizations, IWorkspaceFolderCreationData, IWorkspaceIdentifier };
