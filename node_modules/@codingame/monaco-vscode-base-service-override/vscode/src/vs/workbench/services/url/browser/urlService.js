
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { URI } from '@codingame/monaco-vscode-api/vscode/vs/base/common/uri';
import '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/extensions';
import { AbstractURLService } from '../../../../platform/url/common/urlService.js';
import { IBrowserWorkbenchEnvironmentService } from '@codingame/monaco-vscode-411e0589-fa79-504b-b32c-80a88847b23a-common/vscode/vs/workbench/services/environment/browser/environmentService.service';
import { IOpenerService } from '@codingame/monaco-vscode-api/vscode/vs/platform/opener/common/opener.service';
import { matchesScheme } from '@codingame/monaco-vscode-api/vscode/vs/base/common/network';
import { IProductService } from '@codingame/monaco-vscode-api/vscode/vs/platform/product/common/productService.service';

class BrowserURLOpener {
    constructor(urlService, productService) {
        this.urlService = urlService;
        this.productService = productService;
    }
    async open(resource, options) {
        if (options?.openExternal) {
            return false;
        }
        if (!matchesScheme(resource, this.productService.urlProtocol)) {
            return false;
        }
        if (typeof resource === 'string') {
            resource = ( URI.parse(resource));
        }
        return this.urlService.open(resource, { trusted: true });
    }
}
let BrowserURLService = class BrowserURLService extends AbstractURLService {
    constructor(environmentService, openerService, productService) {
        super();
        this.provider = environmentService.options?.urlCallbackProvider;
        if (this.provider) {
            this._register(this.provider.onCallback(uri => this.open(uri, { trusted: true })));
        }
        this._register(openerService.registerOpener(( new BrowserURLOpener(this, productService))));
    }
    create(options) {
        if (this.provider) {
            return this.provider.create(options);
        }
        return ( URI.parse('unsupported://'));
    }
};
BrowserURLService = ( __decorate([
    ( __param(0, IBrowserWorkbenchEnvironmentService)),
    ( __param(1, IOpenerService)),
    ( __param(2, IProductService))
], BrowserURLService));

export { BrowserURLService };
