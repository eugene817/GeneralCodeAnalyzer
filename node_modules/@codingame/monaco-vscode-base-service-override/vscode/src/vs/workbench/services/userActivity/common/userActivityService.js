
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { RunOnceScheduler, runWhenGlobalIdle, disposableTimeout } from '@codingame/monaco-vscode-api/vscode/vs/base/common/async';
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { Disposable, DisposableStore, toDisposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/extensions';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import { userActivityRegistry } from './userActivityRegistry.js';

const MARK_INACTIVE_DEBOUNCE = 10000;
let UserActivityService = class UserActivityService extends Disposable {
    constructor(instantiationService) {
        super();
        this.markInactive = this._register(( new RunOnceScheduler(() => {
            this.isActive = false;
            this.changeEmitter.fire(false);
        }, MARK_INACTIVE_DEBOUNCE)));
        this.changeEmitter = this._register(( new Emitter()));
        this.active = 0;
        this.isActive = true;
        this.onDidChangeIsActive = this.changeEmitter.event;
        this._register(runWhenGlobalIdle(() => userActivityRegistry.take(this, instantiationService)));
    }
    markActive(opts) {
        if (opts?.whenHeldFor) {
            const store = ( new DisposableStore());
            store.add(disposableTimeout(() => store.add(this.markActive()), opts.whenHeldFor));
            return store;
        }
        if (++this.active === 1) {
            this.isActive = true;
            this.changeEmitter.fire(true);
            this.markInactive.cancel();
        }
        return toDisposable(() => {
            if (--this.active === 0) {
                this.markInactive.schedule();
            }
        });
    }
};
UserActivityService = ( __decorate([
    ( __param(0, IInstantiationService))
], UserActivityService));

export { UserActivityService };
