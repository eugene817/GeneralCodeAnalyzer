
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { IConfigurationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service';
import { RequestChannelClient } from '../../../../platform/request/common/requestIpc.js';
import { IRemoteAgentService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/remote/common/remoteAgentService.service';
import { CommandsRegistry } from '@codingame/monaco-vscode-api/vscode/vs/platform/commands/common/commands';
import { AbstractRequestService } from '@codingame/monaco-vscode-api/vscode/vs/platform/request/common/request';
import { request } from '../../../../base/parts/request/common/requestImpl.js';
import { ILoggerService } from '@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service';
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { LogService } from '@codingame/monaco-vscode-api/vscode/vs/platform/log/common/logService';
import { windowLogGroup } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/log/common/logConstants';

let BrowserRequestService = class BrowserRequestService extends AbstractRequestService {
    constructor(remoteAgentService, configurationService, loggerService) {
        const logger = loggerService.createLogger(`network`, { name: ( localize(12090, "Network")), group: windowLogGroup });
        const logService = ( new LogService(logger));
        super(logService);
        this.remoteAgentService = remoteAgentService;
        this.configurationService = configurationService;
        this._register(logger);
        this._register(logService);
    }
    async request(options, token) {
        try {
            if (!options.proxyAuthorization) {
                options.proxyAuthorization = this.configurationService.inspect('http.proxyAuthorization').userLocalValue;
            }
            const context = await this.logAndRequest(options, () => request(options, token, () => navigator.onLine));
            const connection = this.remoteAgentService.getConnection();
            if (connection && context.res.statusCode === 405) {
                return this._makeRemoteRequest(connection, options, token);
            }
            return context;
        }
        catch (error) {
            const connection = this.remoteAgentService.getConnection();
            if (connection) {
                return this._makeRemoteRequest(connection, options, token);
            }
            throw error;
        }
    }
    async resolveProxy(url) {
        return undefined;
    }
    async lookupAuthorization(authInfo) {
        return undefined;
    }
    async lookupKerberosAuthorization(url) {
        return undefined;
    }
    async loadCertificates() {
        return [];
    }
    _makeRemoteRequest(connection, options, token) {
        return connection.withChannel('request', channel => ( new RequestChannelClient(channel)).request(options, token));
    }
};
BrowserRequestService = ( __decorate([
    ( __param(0, IRemoteAgentService)),
    ( __param(1, IConfigurationService)),
    ( __param(2, ILoggerService))
], BrowserRequestService));
CommandsRegistry.registerCommand('_workbench.fetchJSON', async function (accessor, url, method) {
    const result = await fetch(url, { method, headers: { Accept: 'application/json' } });
    if (result.ok) {
        return result.json();
    }
    else {
        throw ( new Error(result.statusText));
    }
});

export { BrowserRequestService };
