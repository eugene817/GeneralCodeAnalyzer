import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IChannel, IServerChannel } from "@codingame/monaco-vscode-bd6ad8b7-9db3-51a8-9895-0046508c029d-common/vscode/vs/base/parts/ipc/common/ipc";
import { IRequestContext, IRequestOptions } from "@codingame/monaco-vscode-039b5553-0838-562a-97c2-30d6e54a7b42-common/vscode/vs/base/parts/request/common/request";
import { AuthInfo, Credentials } from "@codingame/monaco-vscode-api/vscode/vs/platform/request/common/request";
import { IRequestService } from "@codingame/monaco-vscode-api/vscode/vs/platform/request/common/request.service";
export declare class RequestChannel implements IServerChannel {
    private readonly service;
    constructor(service: IRequestService);
    listen(context: any, event: string): Event<any>;
    call(context: any, command: string, args?: any, token?: CancellationToken): Promise<any>;
}
export declare class RequestChannelClient implements IRequestService {
    private readonly channel;
    readonly _serviceBrand: undefined;
    constructor(channel: IChannel);
    request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext>;
    resolveProxy(url: string): Promise<string | undefined>;
    lookupAuthorization(authInfo: AuthInfo): Promise<Credentials | undefined>;
    lookupKerberosAuthorization(url: string): Promise<string | undefined>;
    loadCertificates(): Promise<string[]>;
}
