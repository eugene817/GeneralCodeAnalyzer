import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import Severity from "@codingame/monaco-vscode-api/vscode/vs/base/common/severity";
import { ITextModel } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/model";
import { Command } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languages";
import { LanguageSelector } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/languageSelector";
import { IAccessibilityInformation } from "@codingame/monaco-vscode-api/vscode/vs/platform/accessibility/common/accessibility";
import { ILanguageStatusService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/languageStatus/common/languageStatusService.service";
export interface ILanguageStatus {
    readonly id: string;
    readonly name: string;
    readonly selector: LanguageSelector;
    readonly severity: Severity;
    readonly label: string | {
        value: string;
        shortValue: string;
    };
    readonly detail: string;
    readonly busy: boolean;
    readonly source: string;
    readonly command: Command | undefined;
    readonly accessibilityInfo: IAccessibilityInformation | undefined;
}
export interface ILanguageStatusProvider {
    provideLanguageStatus(langId: string, token: CancellationToken): Promise<ILanguageStatus | undefined>;
}
export declare class LanguageStatusServiceImpl implements ILanguageStatusService {
    _serviceBrand: undefined;
    private readonly _provider;
    readonly onDidChange: Event<any>;
    addStatus(status: ILanguageStatus): IDisposable;
    getLanguageStatus(model: ITextModel): ILanguageStatus[];
}
