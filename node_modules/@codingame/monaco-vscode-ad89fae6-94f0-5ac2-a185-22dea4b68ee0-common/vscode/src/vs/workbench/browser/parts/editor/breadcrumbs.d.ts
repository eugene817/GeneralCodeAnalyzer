import { BreadcrumbsWidget } from "../../../../base/browser/ui/breadcrumbs/breadcrumbsWidget.js";
import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import * as glob from "@codingame/monaco-vscode-api/vscode/vs/base/common/glob";
import { IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IConfigurationOverrides } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IBreadcrumbsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/browser/parts/editor/breadcrumbs.service";
export declare class BreadcrumbsService implements IBreadcrumbsService {
    readonly _serviceBrand: undefined;
    private readonly _map;
    register(group: number, widget: BreadcrumbsWidget): IDisposable;
    getWidget(group: number): BreadcrumbsWidget | undefined;
}
export declare abstract class BreadcrumbsConfig<T> {
    abstract get name(): string;
    abstract get onDidChange(): Event<void>;
    abstract getValue(overrides?: IConfigurationOverrides): T;
    abstract updateValue(value: T, overrides?: IConfigurationOverrides): Promise<void>;
    abstract dispose(): void;
    private constructor();
    static readonly IsEnabled: {
        bindTo(service: IConfigurationService): BreadcrumbsConfig<boolean>;
    };
    static readonly UseQuickPick: {
        bindTo(service: IConfigurationService): BreadcrumbsConfig<boolean>;
    };
    static readonly FilePath: {
        bindTo(service: IConfigurationService): BreadcrumbsConfig<"off" | "on" | "last">;
    };
    static readonly SymbolPath: {
        bindTo(service: IConfigurationService): BreadcrumbsConfig<"off" | "on" | "last">;
    };
    static readonly SymbolSortOrder: {
        bindTo(service: IConfigurationService): BreadcrumbsConfig<"name" | "type" | "position">;
    };
    static readonly Icons: {
        bindTo(service: IConfigurationService): BreadcrumbsConfig<boolean>;
    };
    static readonly TitleScrollbarSizing: {
        bindTo(service: IConfigurationService): BreadcrumbsConfig<Required<NonNullable<"default" | "large" | undefined>>>;
    };
    static readonly FileExcludes: {
        bindTo(service: IConfigurationService): BreadcrumbsConfig<glob.IExpression>;
    };
    private static _stub;
}
