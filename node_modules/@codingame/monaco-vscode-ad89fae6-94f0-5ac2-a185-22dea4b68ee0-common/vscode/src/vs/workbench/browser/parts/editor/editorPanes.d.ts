import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IEditorOpenContext, IVisibleEditorPane } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import { IDomNodePagePosition } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/dom";
import { IWorkbenchLayoutService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service";
import { EditorPane } from "@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/workbench/browser/parts/editor/editorPane";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IEditorProgressService } from "@codingame/monaco-vscode-api/vscode/vs/platform/progress/common/progress.service";
import { IEditorGroupView, IInternalEditorOpenOptions } from "@codingame/monaco-vscode-api/vscode/vs/workbench/browser/parts/editor/editor";
import { IWorkspaceTrustManagementService } from "@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspaceTrust.service";
import { IEditorOptions } from "@codingame/monaco-vscode-api/vscode/vs/platform/editor/common/editor";
import { ILogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service";
import { IDialogService } from "@codingame/monaco-vscode-api/vscode/vs/platform/dialogs/common/dialogs.service";
import { IBoundarySashes } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/sash/sash";
import { IHostService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/host/browser/host.service";
export interface IOpenEditorResult {
    readonly pane?: EditorPane;
    readonly changed?: boolean;
    readonly error?: Error;
    readonly cancelled?: boolean;
}
export declare class EditorPanes extends Disposable {
    private readonly editorGroupParent;
    private readonly editorPanesParent;
    private readonly groupView;
    private readonly layoutService;
    private readonly instantiationService;
    private readonly editorProgressService;
    private readonly workspaceTrustService;
    private readonly logService;
    private readonly dialogService;
    private readonly hostService;
    private readonly _onDidFocus;
    readonly onDidFocus: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    private _onDidChangeSizeConstraints;
    readonly onDidChangeSizeConstraints: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<{
        width: number;
        height: number;
    } | undefined>;
    get minimumWidth(): number;
    get minimumHeight(): number;
    get maximumWidth(): number;
    get maximumHeight(): number;
    private _activeEditorPane;
    get activeEditorPane(): IVisibleEditorPane | null;
    private readonly editorPanes;
    private readonly mapEditorPaneToPendingSetInput;
    private readonly activeEditorPaneDisposables;
    private pagePosition;
    private boundarySashes;
    private readonly editorOperation;
    private readonly editorPanesRegistry;
    constructor(editorGroupParent: HTMLElement, editorPanesParent: HTMLElement, groupView: IEditorGroupView, layoutService: IWorkbenchLayoutService, instantiationService: IInstantiationService, editorProgressService: IEditorProgressService, workspaceTrustService: IWorkspaceTrustManagementService, logService: ILogService, dialogService: IDialogService, hostService: IHostService);
    private registerListeners;
    private onDidChangeWorkspaceTrust;
    openEditor(editor: EditorInput, options: IEditorOptions | undefined, internalOptions: IInternalEditorOpenOptions | undefined, context?: IEditorOpenContext): Promise<IOpenEditorResult>;
    private doShowError;
    private doShowErrorDialog;
    private doOpenEditor;
    private shouldRestoreFocus;
    private getEditorPaneDescriptor;
    private doShowEditorPane;
    private doCreateEditorPane;
    private doInstantiateEditorPane;
    private doSetActiveEditorPane;
    private doSetInput;
    private doHideActiveEditorPane;
    closeEditor(editor: EditorInput): void;
    setVisible(visible: boolean): void;
    layout(pagePosition: IDomNodePagePosition): void;
    setBoundarySashes(sashes: IBoundarySashes): void;
    private safeRun;
}
