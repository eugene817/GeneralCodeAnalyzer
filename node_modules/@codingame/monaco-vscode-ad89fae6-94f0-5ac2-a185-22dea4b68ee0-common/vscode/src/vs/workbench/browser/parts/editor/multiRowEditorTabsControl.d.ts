import { Dimension } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/dom";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IEditorGroupsView, IEditorGroupView, IEditorPartsView, IInternalEditorOpenOptions } from "@codingame/monaco-vscode-api/vscode/vs/workbench/browser/parts/editor/editor";
import { IEditorTabsControl } from "@codingame/monaco-vscode-2e69e120-617a-5258-95e0-3b8902f4e014-common/vscode/vs/workbench/browser/parts/editor/editorTabsControl";
import { IEditorPartOptions } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { EditorInput } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor/editorInput";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IEditorTitleControlDimensions } from "./editorTitleControl.js";
import { IReadonlyEditorGroupModel } from "../../../common/editor/editorGroupModel.js";
export declare class MultiRowEditorControl extends Disposable implements IEditorTabsControl {
    private readonly parent;
    private readonly groupsView;
    private readonly groupView;
    private readonly model;
    private readonly instantiationService;
    private readonly stickyEditorTabsControl;
    private readonly unstickyEditorTabsControl;
    private activeControl;
    constructor(parent: HTMLElement, editorPartsView: IEditorPartsView, groupsView: IEditorGroupsView, groupView: IEditorGroupView, model: IReadonlyEditorGroupModel, instantiationService: IInstantiationService);
    private handleTabBarsStateChange;
    private handleTabBarsLayoutChange;
    private didActiveControlChange;
    private getEditorTabsController;
    openEditor(editor: EditorInput, options: IInternalEditorOpenOptions): boolean;
    openEditors(editors: EditorInput[]): boolean;
    private handleOpenedEditors;
    beforeCloseEditor(editor: EditorInput): void;
    closeEditor(editor: EditorInput): void;
    closeEditors(editors: EditorInput[]): void;
    private handleClosedEditors;
    moveEditor(editor: EditorInput, fromIndex: number, targetIndex: number, stickyStateChange: boolean): void;
    pinEditor(editor: EditorInput): void;
    stickEditor(editor: EditorInput): void;
    unstickEditor(editor: EditorInput): void;
    setActive(isActive: boolean): void;
    updateEditorSelections(): void;
    updateEditorLabel(editor: EditorInput): void;
    updateEditorDirty(editor: EditorInput): void;
    updateOptions(oldOptions: IEditorPartOptions, newOptions: IEditorPartOptions): void;
    layout(dimensions: IEditorTitleControlDimensions): Dimension;
    getHeight(): number;
    dispose(): void;
}
