import { IPickerQuickAccessItem, PickerQuickAccessProvider } from "@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/platform/quickinput/browser/pickerQuickAccess";
import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { DisposableStore } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IWorkspaceSymbol } from "@codingame/monaco-vscode-42931eb9-e564-530c-bafc-fa23ab43a070-common/vscode/vs/workbench/contrib/search/common/search";
import { ILabelService } from "@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service";
import { IOpenerService } from "@codingame/monaco-vscode-api/vscode/vs/platform/opener/common/opener.service";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
import { IQuickPickItemWithResource } from "@codingame/monaco-vscode-api/vscode/vs/platform/quickinput/common/quickInput";
import { ICodeEditorService } from "@codingame/monaco-vscode-api/vscode/vs/editor/browser/services/codeEditorService.service";
export interface ISymbolQuickPickItem extends IPickerQuickAccessItem, IQuickPickItemWithResource {
    score?: number;
    symbol?: IWorkspaceSymbol;
}
export declare class SymbolsQuickAccessProvider extends PickerQuickAccessProvider<ISymbolQuickPickItem> {
    private readonly labelService;
    private readonly openerService;
    private readonly editorService;
    private readonly configurationService;
    private readonly codeEditorService;
    static PREFIX: string;
    private static readonly TYPING_SEARCH_DELAY;
    private static TREAT_AS_GLOBAL_SYMBOL_TYPES;
    private delayer;
    get defaultFilterValue(): string | undefined;
    constructor(labelService: ILabelService, openerService: IOpenerService, editorService: IEditorService, configurationService: IConfigurationService, codeEditorService: ICodeEditorService);
    private get configuration();
    protected _getPicks(filter: string, disposables: DisposableStore, token: CancellationToken): Promise<Array<ISymbolQuickPickItem>>;
    getSymbolPicks(filter: string, options: {
        skipLocal?: boolean;
        skipSorting?: boolean;
        delay?: number;
    } | undefined, token: CancellationToken): Promise<Array<ISymbolQuickPickItem>>;
    private doGetSymbolPicks;
    private openSymbol;
    private compareSymbols;
}
