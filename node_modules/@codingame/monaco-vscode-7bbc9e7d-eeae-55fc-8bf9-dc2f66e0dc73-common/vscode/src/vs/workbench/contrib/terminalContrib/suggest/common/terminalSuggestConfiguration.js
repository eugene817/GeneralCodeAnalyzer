
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { TerminalSettingId } from '@codingame/monaco-vscode-api/vscode/vs/platform/terminal/common/terminal';

var TerminalSuggestSettingId;
(function (TerminalSuggestSettingId) {
    TerminalSuggestSettingId["Enabled"] = "terminal.integrated.suggest.enabled";
    TerminalSuggestSettingId["QuickSuggestions"] = "terminal.integrated.suggest.quickSuggestions";
    TerminalSuggestSettingId["SuggestOnTriggerCharacters"] = "terminal.integrated.suggest.suggestOnTriggerCharacters";
    TerminalSuggestSettingId["RunOnEnter"] = "terminal.integrated.suggest.runOnEnter";
    TerminalSuggestSettingId["WindowsExecutableExtensions"] = "terminal.integrated.suggest.windowsExecutableExtensions";
    TerminalSuggestSettingId["Providers"] = "terminal.integrated.suggest.providers";
    TerminalSuggestSettingId["ShowStatusBar"] = "terminal.integrated.suggest.showStatusBar";
    TerminalSuggestSettingId["CdPath"] = "terminal.integrated.suggest.cdPath";
    TerminalSuggestSettingId["InlineSuggestion"] = "terminal.integrated.suggest.inlineSuggestion";
})(TerminalSuggestSettingId || (TerminalSuggestSettingId = {}));
const windowsDefaultExecutableExtensions = [
    'exe',
    'bat',
    'cmd',
    'com',
    'msi',
    'ps1',
    'vbs',
    'js',
    'jar',
    'py',
    'rb',
    'pl',
    'sh',
];
const terminalSuggestConfigSection = 'terminal.integrated.suggest';
const terminalSuggestConfiguration = {
    [TerminalSuggestSettingId.Enabled]: {
        restricted: true,
        markdownDescription: ( localize(
            10284,
            "Enables terminal intellisense suggestions (preview) for supported shells ({0}) when {1} is set to {2}.\n\nIf shell integration is installed manually, {3} needs to be set to {4} before calling the shell integration script.",
            'PowerShell v7+, zsh, bash, fish',
            `\`#${TerminalSettingId.ShellIntegrationEnabled}#\``,
            '`true`',
            '`VSCODE_SUGGEST`',
            '`1`'
        )),
        type: 'boolean',
        default: false,
        tags: ['preview'],
    },
    [TerminalSuggestSettingId.Providers]: {
        restricted: true,
        markdownDescription: ( localize(
            10285,
            "Providers are enabled by default. Omit them by setting the id of the provider to `false`."
        )),
        type: 'object',
        properties: {},
        default: {
            'terminal-suggest': true,
            'pwsh-shell-integration': true,
        },
        tags: ['preview'],
    },
    [TerminalSuggestSettingId.QuickSuggestions]: {
        restricted: true,
        markdownDescription: ( localize(
            10286,
            "Controls whether suggestions should automatically show up while typing. Also be aware of the {0}-setting which controls if suggestions are triggered by special characters.",
            `\`#${TerminalSuggestSettingId.SuggestOnTriggerCharacters}#\``
        )),
        type: 'object',
        properties: {
            commands: {
                description: ( localize(
                    10287,
                    'Enable quick suggestions for commands, the first word in a command line input.'
                )),
                type: 'string',
                enum: ['off', 'on'],
            },
            arguments: {
                description: ( localize(
                    10288,
                    'Enable quick suggestions for arguments, anything after the first word in a command line input.'
                )),
                type: 'string',
                enum: ['off', 'on'],
            },
            unknown: {
                description: ( localize(
                    10289,
                    'Enable quick suggestions when it\'s unclear what the best suggestion is, if this is on files and folders will be suggested as a fallback.'
                )),
                type: 'string',
                enum: ['off', 'on'],
            },
        },
        default: {
            commands: 'on',
            arguments: 'on',
            unknown: 'off',
        },
        tags: ['preview']
    },
    [TerminalSuggestSettingId.SuggestOnTriggerCharacters]: {
        restricted: true,
        markdownDescription: ( localize(
            10290,
            "Controls whether suggestions should automatically show up when typing trigger characters."
        )),
        type: 'boolean',
        default: true,
        tags: ['preview']
    },
    [TerminalSuggestSettingId.RunOnEnter]: {
        restricted: true,
        markdownDescription: ( localize(
            10291,
            "Controls whether suggestions should run immediately when `Enter` (not `Tab`) is used to accept the result."
        )),
        enum: ['ignore', 'never', 'exactMatch', 'exactMatchIgnoreExtension', 'always'],
        markdownEnumDescriptions: [
            ( localize(
            10292,
            "Ignore suggestions and send the enter directly to the shell without completing. This is used as the default value so the suggest widget is as unobtrusive as possible."
        )),
            ( localize(10293, "Never run on `Enter`.")),
            ( localize(10294, "Run on `Enter` when the suggestion is typed in its entirety.")),
            ( localize(
            10295,
            "Run on `Enter` when the suggestion is typed in its entirety or when a file is typed without its extension included."
        )),
            ( localize(10296, "Always run on `Enter`."))
        ],
        default: 'ignore',
        tags: ['preview']
    },
    [TerminalSuggestSettingId.WindowsExecutableExtensions]: {
        restricted: true,
        markdownDescription: ( localize(
            10297,
            "A set of windows command executable extensions that will be included as suggestions in the terminal.\n\nMany executables are included by default, listed below:\n\n{0}.\n\nTo exclude an extension, set it to `false`\n\n. To include one not in the list, add it and set it to `true`.",
            ( windowsDefaultExecutableExtensions.sort().map(extension => `- ${extension}`)).join('\n')
        )),
        type: 'object',
        default: {},
        tags: ['preview']
    },
    [TerminalSuggestSettingId.ShowStatusBar]: {
        restricted: true,
        markdownDescription: ( localize(
            10298,
            "Controls whether the terminal suggestions status bar should be shown."
        )),
        type: 'boolean',
        default: true,
        tags: ['preview']
    },
    [TerminalSuggestSettingId.CdPath]: {
        restricted: true,
        markdownDescription: ( localize(
            10299,
            "Controls whether to enable $CDPATH support which exposes children of the folders in the $CDPATH variable regardless of the current working directory. $CDPATH is expected to be semi colon-separated on Windows and colon-separated on other platforms."
        )),
        type: 'string',
        enum: ['off', 'relative', 'absolute'],
        markdownEnumDescriptions: [
            ( localize(10300, "Disable the feature.")),
            ( localize(10301, "Enable the feature and use relative paths.")),
            ( localize(
            10302,
            "Enable the feature and use absolute paths. This is useful when the shell doesn't natively support `$CDPATH`."
        )),
        ],
        default: 'absolute',
        tags: ['preview']
    },
    [TerminalSuggestSettingId.InlineSuggestion]: {
        restricted: true,
        markdownDescription: ( localize(
            10303,
            "Controls whether the shell's inline suggestion should be detected and how it is scored."
        )),
        type: 'string',
        enum: ['off', 'alwaysOnTopExceptExactMatch', 'alwaysOnTop'],
        markdownEnumDescriptions: [
            ( localize(10304, "Disable the feature.")),
            ( localize(
            10305,
            "Enable the feature and sort the inline suggestion without forcing it to be on top. This means that exact matches will be will be above the inline suggestion."
        )),
            ( localize(10306, "Enable the feature and always put the inline suggestion on top.")),
        ],
        default: 'alwaysOnTop',
        tags: ['preview']
    }
};

export { TerminalSuggestSettingId, terminalSuggestConfigSection, terminalSuggestConfiguration, windowsDefaultExecutableExtensions };
