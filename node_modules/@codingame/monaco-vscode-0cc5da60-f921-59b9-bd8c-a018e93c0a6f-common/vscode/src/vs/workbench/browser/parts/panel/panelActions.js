
import './media/panelpart.css.js';
import { localize, localize2 } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { KeyMod, KeyCode } from '@codingame/monaco-vscode-api/vscode/vs/base/common/keyCodes';
import { Action2, MenuId, registerAction2, MenuRegistry } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions';
import { Categories } from '@codingame/monaco-vscode-api/vscode/vs/platform/action/common/actionCommonCategories';
import { Parts, positionToString, Position, isHorizontal } from '@codingame/monaco-vscode-81f603ca-d6ea-5402-90dd-3014dffc63b4-common/vscode/vs/workbench/services/layout/browser/layoutService';
import { IWorkbenchLayoutService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service';
import { PanelVisibleContext, PanelPositionContext, PanelAlignmentContext, PanelMaximizedContext } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/contextkeys';
import { ContextKeyExpr } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey';
import { Codicon } from '@codingame/monaco-vscode-api/vscode/vs/base/common/codicons';
import { registerIcon } from '@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/iconRegistry';
import { ViewContainerLocation } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/views';
import { IViewDescriptorService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/views.service';
import { IViewsService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/views/common/viewsService.service';
import { IPaneCompositePartService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/panecomposite/browser/panecomposite.service';
import { INotificationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/notification/common/notification.service';
import { KeybindingWeight } from '@codingame/monaco-vscode-api/vscode/vs/platform/keybinding/common/keybindingsRegistry';
import { SwitchCompositeViewAction } from '@codingame/monaco-vscode-d8236b3b-b91a-522d-89f4-94d70a546f6a-common/vscode/vs/workbench/browser/parts/compositeBarActions';

const maximizeIcon = registerIcon('panel-maximize', Codicon.chevronUp, ( localize(3350, 'Icon to maximize a panel.')));
const restoreIcon = registerIcon('panel-restore', Codicon.chevronDown, ( localize(3351, 'Icon to restore a panel.')));
const closeIcon = registerIcon('panel-close', Codicon.close, ( localize(3352, 'Icon to close a panel.')));
const panelIcon = registerIcon('panel-layout-icon', Codicon.layoutPanel, ( localize(3353, 'Icon to toggle the panel off when it is on.')));
const panelOffIcon = registerIcon('panel-layout-icon-off', Codicon.layoutPanelOff, ( localize(3354, 'Icon to toggle the panel on when it is off.')));
class TogglePanelAction extends Action2 {
    static { this.ID = 'workbench.action.togglePanel'; }
    static { this.LABEL = ( localize2(3355, "Toggle Panel Visibility")); }
    constructor() {
        super({
            id: TogglePanelAction.ID,
            title: TogglePanelAction.LABEL,
            toggled: {
                condition: PanelVisibleContext,
                title: ( localize(3356, 'Hide Panel')),
                icon: closeIcon,
                mnemonicTitle: ( localize(3357, "&&Panel")),
            },
            icon: closeIcon,
            f1: true,
            category: Categories.View,
            metadata: {
                description: ( localize(3358, 'Open/Show and Close/Hide Panel')),
            },
            keybinding: { primary: KeyMod.CtrlCmd | KeyCode.KeyJ, weight: KeybindingWeight.WorkbenchContrib },
            menu: [
                {
                    id: MenuId.MenubarAppearanceMenu,
                    group: '2_workbench_layout',
                    order: 5
                }, {
                    id: MenuId.LayoutControlMenuSubmenu,
                    group: '0_workbench_layout',
                    order: 4
                }, {
                    id: MenuId.PanelTitle,
                    group: 'navigation',
                    order: 2
                }
            ]
        });
    }
    async run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        layoutService.setPartHidden(layoutService.isVisible(Parts.PANEL_PART), Parts.PANEL_PART);
    }
}
registerAction2(TogglePanelAction);
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.closePanel',
            title: ( localize2(3356, 'Hide Panel')),
            category: Categories.View,
            precondition: PanelVisibleContext,
            f1: true,
        });
    }
    run(accessor) {
        accessor.get(IWorkbenchLayoutService).setPartHidden(true, Parts.PANEL_PART);
    }
});
registerAction2(class extends Action2 {
    static { this.ID = 'workbench.action.focusPanel'; }
    static { this.LABEL = ( localize(3359, "Focus into Panel")); }
    constructor() {
        super({
            id: 'workbench.action.focusPanel',
            title: ( localize2(3359, "Focus into Panel")),
            category: Categories.View,
            f1: true,
        });
    }
    async run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const paneCompositeService = accessor.get(IPaneCompositePartService);
        if (!layoutService.isVisible(Parts.PANEL_PART)) {
            layoutService.setPartHidden(false, Parts.PANEL_PART);
        }
        const panel = paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel);
        panel?.focus();
    }
});
const PositionPanelActionId = {
    LEFT: 'workbench.action.positionPanelLeft',
    RIGHT: 'workbench.action.positionPanelRight',
    BOTTOM: 'workbench.action.positionPanelBottom',
    TOP: 'workbench.action.positionPanelTop'
};
const AlignPanelActionId = {
    LEFT: 'workbench.action.alignPanelLeft',
    RIGHT: 'workbench.action.alignPanelRight',
    CENTER: 'workbench.action.alignPanelCenter',
    JUSTIFY: 'workbench.action.alignPanelJustify',
};
function createPanelActionConfig(id, title, shortLabel, value, when) {
    return {
        id,
        title,
        shortLabel,
        value,
        when,
    };
}
function createPositionPanelActionConfig(id, title, shortLabel, position) {
    return createPanelActionConfig(id, title, shortLabel, position, ( PanelPositionContext.notEqualsTo(positionToString(position))));
}
function createAlignmentPanelActionConfig(id, title, shortLabel, alignment) {
    return createPanelActionConfig(id, title, shortLabel, alignment, ( PanelAlignmentContext.notEqualsTo(alignment)));
}
const PositionPanelActionConfigs = [
    createPositionPanelActionConfig(PositionPanelActionId.TOP, ( localize2(3360, "Move Panel To Top")), ( localize(3361, "Top")), Position.TOP),
    createPositionPanelActionConfig(PositionPanelActionId.LEFT, ( localize2(3362, "Move Panel Left")), ( localize(3363, "Left")), Position.LEFT),
    createPositionPanelActionConfig(PositionPanelActionId.RIGHT, ( localize2(3364, "Move Panel Right")), ( localize(3365, "Right")), Position.RIGHT),
    createPositionPanelActionConfig(PositionPanelActionId.BOTTOM, ( localize2(3366, "Move Panel To Bottom")), ( localize(3367, "Bottom")), Position.BOTTOM),
];
const AlignPanelActionConfigs = [
    createAlignmentPanelActionConfig(AlignPanelActionId.LEFT, ( localize2(3368, "Set Panel Alignment to Left")), ( localize(3369, "Left")), 'left'),
    createAlignmentPanelActionConfig(AlignPanelActionId.RIGHT, ( localize2(3370, "Set Panel Alignment to Right")), ( localize(3371, "Right")), 'right'),
    createAlignmentPanelActionConfig(AlignPanelActionId.CENTER, ( localize2(3372, "Set Panel Alignment to Center")), ( localize(3373, "Center")), 'center'),
    createAlignmentPanelActionConfig(AlignPanelActionId.JUSTIFY, ( localize2(3374, "Set Panel Alignment to Justify")), ( localize(3375, "Justify")), 'justify'),
];
MenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {
    submenu: MenuId.PanelPositionMenu,
    title: ( localize(3376, "Panel Position")),
    group: '3_workbench_layout_move',
    order: 4
});
PositionPanelActionConfigs.forEach((positionPanelAction, index) => {
    const { id, title, shortLabel, value, when } = positionPanelAction;
    registerAction2(class extends Action2 {
        constructor() {
            super({
                id,
                title,
                category: Categories.View,
                f1: true
            });
        }
        run(accessor) {
            const layoutService = accessor.get(IWorkbenchLayoutService);
            layoutService.setPanelPosition(value === undefined ? Position.BOTTOM : value);
        }
    });
    MenuRegistry.appendMenuItem(MenuId.PanelPositionMenu, {
        command: {
            id,
            title: shortLabel,
            toggled: ( when.negate())
        },
        order: 5 + index
    });
});
MenuRegistry.appendMenuItem(MenuId.MenubarAppearanceMenu, {
    submenu: MenuId.PanelAlignmentMenu,
    title: ( localize(3377, "Align Panel")),
    group: '3_workbench_layout_move',
    order: 5
});
AlignPanelActionConfigs.forEach(alignPanelAction => {
    const { id, title, shortLabel, value, when } = alignPanelAction;
    registerAction2(class extends Action2 {
        constructor() {
            super({
                id,
                title,
                category: Categories.View,
                toggled: ( when.negate()),
                f1: true
            });
        }
        run(accessor) {
            const layoutService = accessor.get(IWorkbenchLayoutService);
            layoutService.setPanelAlignment(value === undefined ? 'center' : value);
        }
    });
    MenuRegistry.appendMenuItem(MenuId.PanelAlignmentMenu, {
        command: {
            id,
            title: shortLabel,
            toggled: ( when.negate())
        },
        order: 5
    });
});
registerAction2(class extends SwitchCompositeViewAction {
    constructor() {
        super({
            id: 'workbench.action.previousPanelView',
            title: ( localize2(3378, "Previous Panel View")),
            category: Categories.View,
            f1: true
        }, ViewContainerLocation.Panel, -1);
    }
});
registerAction2(class extends SwitchCompositeViewAction {
    constructor() {
        super({
            id: 'workbench.action.nextPanelView',
            title: ( localize2(3379, "Next Panel View")),
            category: Categories.View,
            f1: true
        }, ViewContainerLocation.Panel, 1);
    }
});
registerAction2(class extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.toggleMaximizedPanel',
            title: ( localize2(3380, 'Toggle Maximized Panel')),
            tooltip: ( localize(3381, "Maximize Panel Size")),
            category: Categories.View,
            f1: true,
            icon: maximizeIcon,
            precondition: ( ContextKeyExpr.or(( PanelAlignmentContext.isEqualTo('center')), ( ContextKeyExpr.and(( PanelPositionContext.notEqualsTo('bottom')), ( PanelPositionContext.notEqualsTo('top')))))),
            toggled: { condition: PanelMaximizedContext, icon: restoreIcon, tooltip: ( localize(3382, "Restore Panel Size")) },
            menu: [{
                    id: MenuId.PanelTitle,
                    group: 'navigation',
                    order: 1,
                    when: ( ContextKeyExpr.or(( PanelAlignmentContext.isEqualTo('center')), ( ContextKeyExpr.and(( PanelPositionContext.notEqualsTo('bottom')), ( PanelPositionContext.notEqualsTo('top'))))))
                }]
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const notificationService = accessor.get(INotificationService);
        if (layoutService.getPanelAlignment() !== 'center' && isHorizontal(layoutService.getPanelPosition())) {
            notificationService.warn(( localize(3383, "Maximizing the panel is only supported when it is center aligned.")));
            return;
        }
        if (!layoutService.isVisible(Parts.PANEL_PART)) {
            layoutService.setPartHidden(false, Parts.PANEL_PART);
            if (!layoutService.isPanelMaximized()) {
                layoutService.toggleMaximizedPanel();
            }
        }
        else {
            layoutService.toggleMaximizedPanel();
        }
    }
});
MenuRegistry.appendMenuItems([
    {
        id: MenuId.LayoutControlMenu,
        item: {
            group: '2_pane_toggles',
            command: {
                id: TogglePanelAction.ID,
                title: ( localize(3384, "Toggle Panel")),
                icon: panelOffIcon,
                toggled: { condition: PanelVisibleContext, icon: panelIcon }
            },
            when: ( ContextKeyExpr.or(( ContextKeyExpr.equals('config.workbench.layoutControl.type', 'toggles')), ( ContextKeyExpr.equals('config.workbench.layoutControl.type', 'both')))),
            order: 1
        }
    }
]);
class MoveViewsBetweenPanelsAction extends Action2 {
    constructor(source, destination, desc) {
        super(desc);
        this.source = source;
        this.destination = destination;
    }
    run(accessor, ...args) {
        const viewDescriptorService = accessor.get(IViewDescriptorService);
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const viewsService = accessor.get(IViewsService);
        const srcContainers = viewDescriptorService.getViewContainersByLocation(this.source);
        const destContainers = viewDescriptorService.getViewContainersByLocation(this.destination);
        if (srcContainers.length) {
            const activeViewContainer = viewsService.getVisibleViewContainer(this.source);
            srcContainers.forEach(viewContainer => viewDescriptorService.moveViewContainerToLocation(viewContainer, this.destination, undefined, this.desc.id));
            layoutService.setPartHidden(false, this.destination === ViewContainerLocation.Panel ? Parts.PANEL_PART : Parts.AUXILIARYBAR_PART);
            if (activeViewContainer && destContainers.length === 0) {
                viewsService.openViewContainer(activeViewContainer.id, true);
            }
        }
    }
}
class MovePanelToSidePanelAction extends MoveViewsBetweenPanelsAction {
    static { this.ID = 'workbench.action.movePanelToSidePanel'; }
    constructor() {
        super(ViewContainerLocation.Panel, ViewContainerLocation.AuxiliaryBar, {
            id: MovePanelToSidePanelAction.ID,
            title: ( localize2(3385, "Move Panel Views To Secondary Side Bar")),
            category: Categories.View,
            f1: false
        });
    }
}
class MovePanelToSecondarySideBarAction extends MoveViewsBetweenPanelsAction {
    static { this.ID = 'workbench.action.movePanelToSecondarySideBar'; }
    constructor() {
        super(ViewContainerLocation.Panel, ViewContainerLocation.AuxiliaryBar, {
            id: MovePanelToSecondarySideBarAction.ID,
            title: ( localize2(3385, "Move Panel Views To Secondary Side Bar")),
            category: Categories.View,
            f1: true
        });
    }
}
registerAction2(MovePanelToSidePanelAction);
registerAction2(MovePanelToSecondarySideBarAction);
class MoveSidePanelToPanelAction extends MoveViewsBetweenPanelsAction {
    static { this.ID = 'workbench.action.moveSidePanelToPanel'; }
    constructor() {
        super(ViewContainerLocation.AuxiliaryBar, ViewContainerLocation.Panel, {
            id: MoveSidePanelToPanelAction.ID,
            title: ( localize2(3386, "Move Secondary Side Bar Views To Panel")),
            category: Categories.View,
            f1: false
        });
    }
}
class MoveSecondarySideBarToPanelAction extends MoveViewsBetweenPanelsAction {
    static { this.ID = 'workbench.action.moveSecondarySideBarToPanel'; }
    constructor() {
        super(ViewContainerLocation.AuxiliaryBar, ViewContainerLocation.Panel, {
            id: MoveSecondarySideBarToPanelAction.ID,
            title: ( localize2(3386, "Move Secondary Side Bar Views To Panel")),
            category: Categories.View,
            f1: true
        });
    }
}
registerAction2(MoveSidePanelToPanelAction);
registerAction2(MoveSecondarySideBarToPanelAction);

export { MovePanelToSecondarySideBarAction, MoveSecondarySideBarToPanelAction, TogglePanelAction, closeIcon };
