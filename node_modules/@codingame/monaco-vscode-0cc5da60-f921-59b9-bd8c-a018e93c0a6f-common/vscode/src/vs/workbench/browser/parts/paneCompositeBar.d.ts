import { ActionsOrientation } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/ui/actionbar/actionbar";
import { Parts } from "@codingame/monaco-vscode-81f603ca-d6ea-5402-90dd-3014dffc63b4-common/vscode/vs/workbench/services/layout/browser/layoutService";
import { IWorkbenchLayoutService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/layout/browser/layoutService.service";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IColorTheme } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService";
import { IStorageService } from "@codingame/monaco-vscode-api/vscode/vs/platform/storage/common/storage.service";
import { IExtensionService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/extensions/common/extensions.service";
import { ICompositeBarColors, IActivityHoverOptions } from "@codingame/monaco-vscode-d8236b3b-b91a-522d-89f4-94d70a546f6a-common/vscode/vs/workbench/browser/parts/compositeBarActions";
import { IViewDescriptorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/views.service";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { IWorkbenchEnvironmentService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/environment/common/environmentService.service";
import { ICompositeDragAndDrop } from "@codingame/monaco-vscode-81f603ca-d6ea-5402-90dd-3014dffc63b4-common/vscode/vs/workbench/browser/dnd";
import { IAction } from "@codingame/monaco-vscode-api/vscode/vs/base/common/actions";
import { GestureEvent } from "@codingame/monaco-vscode-api/vscode/vs/base/browser/touch";
import { IPaneCompositePart } from "@codingame/monaco-vscode-6980eeab-47bb-5a48-8e15-32caf0785565-common/vscode/vs/workbench/browser/parts/paneCompositePart";
import { IViewsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/views/common/viewsService.service";
export interface IPaneCompositeBarOptions {
    readonly partContainerClass: string;
    readonly pinnedViewContainersKey: string;
    readonly placeholderViewContainersKey: string;
    readonly viewContainersWorkspaceStateKey: string;
    readonly icon: boolean;
    readonly compact?: boolean;
    readonly iconSize: number;
    readonly recomputeSizes: boolean;
    readonly orientation: ActionsOrientation;
    readonly compositeSize: number;
    readonly overflowActionSize: number;
    readonly preventLoopNavigation?: boolean;
    readonly activityHoverOptions: IActivityHoverOptions;
    readonly fillExtraContextMenuActions: (actions: IAction[], e?: MouseEvent | GestureEvent) => void;
    readonly colors: (theme: IColorTheme) => ICompositeBarColors;
}
export declare class PaneCompositeBar extends Disposable {
    protected readonly options: IPaneCompositeBarOptions;
    protected readonly part: Parts;
    private readonly paneCompositePart;
    protected readonly instantiationService: IInstantiationService;
    private readonly storageService;
    private readonly extensionService;
    private readonly viewDescriptorService;
    private readonly viewService;
    protected readonly contextKeyService: IContextKeyService;
    private readonly environmentService;
    protected readonly layoutService: IWorkbenchLayoutService;
    private readonly viewContainerDisposables;
    private readonly location;
    private readonly compositeBar;
    readonly dndHandler: ICompositeDragAndDrop;
    private readonly compositeActions;
    private hasExtensionsRegistered;
    constructor(options: IPaneCompositeBarOptions, part: Parts, paneCompositePart: IPaneCompositePart, instantiationService: IInstantiationService, storageService: IStorageService, extensionService: IExtensionService, viewDescriptorService: IViewDescriptorService, viewService: IViewsService, contextKeyService: IContextKeyService, environmentService: IWorkbenchEnvironmentService, layoutService: IWorkbenchLayoutService);
    private createCompositeBar;
    private getContextMenuActionsForComposite;
    private createMoveAction;
    private registerListeners;
    private onDidChangeViewContainers;
    private onDidChangeViewContainerLocation;
    private onDidChangeViewContainerVisibility;
    private onDidRegisterExtensions;
    private onDidViewContainerVisible;
    create(parent: HTMLElement): HTMLElement;
    private getCompositeActions;
    private onDidRegisterViewContainers;
    private onDidDeregisterViewContainer;
    private updateCompositeBarActionItem;
    private toCompositeBarActionItemFrom;
    private toCompositeBarActionItem;
    private showOrHideViewContainer;
    private shouldBeHidden;
    private addComposite;
    private hideComposite;
    private removeComposite;
    getPinnedPaneCompositeIds(): string[];
    getVisiblePaneCompositeIds(): string[];
    getPaneCompositeIds(): string[];
    getContextMenuActions(): IAction[];
    focus(index?: number): void;
    layout(width: number, height: number): void;
    private getViewContainer;
    private getViewContainers;
    private updateCompositeBarItemsFromStorage;
    private saveCachedViewContainers;
    private _cachedViewContainers;
    private get cachedViewContainers();
    private storeCachedViewContainersState;
    private getPinnedViewContainers;
    private setPinnedViewContainers;
    private _pinnedViewContainersValue;
    private get pinnedViewContainersValue();
    private set pinnedViewContainersValue(value);
    private getStoredPinnedViewContainersValue;
    private setStoredPinnedViewContainersValue;
    private getPlaceholderViewContainers;
    private setPlaceholderViewContainers;
    private _placeholderViewContainersValue;
    private get placeholderViewContainersValue();
    private set placeholderViewContainersValue(value);
    private getStoredPlaceholderViewContainersValue;
    private setStoredPlaceholderViewContainersValue;
    private getViewContainersWorkspaceState;
    private setViewContainersWorkspaceState;
    private _viewContainersWorkspaceStateValue;
    private get viewContainersWorkspaceStateValue();
    private set viewContainersWorkspaceStateValue(value);
    private getStoredViewContainersWorkspaceStateValue;
    private setStoredViewContainersWorkspaceStateValue;
}
