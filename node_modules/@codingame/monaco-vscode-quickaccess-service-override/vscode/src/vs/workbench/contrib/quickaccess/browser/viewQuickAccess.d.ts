import { IQuickPickSeparator } from "@codingame/monaco-vscode-api/vscode/vs/platform/quickinput/common/quickInput";
import { IPickerQuickAccessItem, PickerQuickAccessProvider } from "@codingame/monaco-vscode-12c5f9eb-72d3-57ca-babd-5bef7aa9de3b-common/vscode/vs/platform/quickinput/browser/pickerQuickAccess";
import { IViewDescriptorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/views.service";
import { IViewsService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/views/common/viewsService.service";
import { IOutputService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/output/common/output.service";
import { ITerminalGroupService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/terminal/browser/terminal.service";
import { ITerminalService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/terminal/browser/terminal.service";
import { IContextKeyService } from "@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey.service";
import { Action2 } from "@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions";
import { ServicesAccessor } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IPaneCompositePartService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/panecomposite/browser/panecomposite.service";
import { IDebugService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/debug/common/debug.service";
interface IViewQuickPickItem extends IPickerQuickAccessItem {
    containerLabel: string;
}
export declare class ViewQuickAccessProvider extends PickerQuickAccessProvider<IViewQuickPickItem> {
    private readonly viewDescriptorService;
    private readonly viewsService;
    private readonly outputService;
    private readonly terminalService;
    private readonly terminalGroupService;
    private readonly debugService;
    private readonly paneCompositeService;
    private readonly contextKeyService;
    static PREFIX: string;
    constructor(viewDescriptorService: IViewDescriptorService, viewsService: IViewsService, outputService: IOutputService, terminalService: ITerminalService, terminalGroupService: ITerminalGroupService, debugService: IDebugService, paneCompositeService: IPaneCompositePartService, contextKeyService: IContextKeyService);
    protected _getPicks(filter: string): Array<IViewQuickPickItem | IQuickPickSeparator>;
    private doGetViewPickItems;
    private includeViewContainer;
}
export declare class OpenViewPickerAction extends Action2 {
    static readonly ID = "workbench.action.openView";
    constructor();
    run(accessor: ServicesAccessor): Promise<void>;
}
export declare class QuickAccessViewPickerAction extends Action2 {
    static readonly ID = "workbench.action.quickOpenView";
    static readonly KEYBINDING: {
        primary: number;
        mac: {
            primary: number;
        };
        linux: {
            primary: number;
        };
    };
    constructor();
    run(accessor: ServicesAccessor): Promise<void>;
}
export {};
