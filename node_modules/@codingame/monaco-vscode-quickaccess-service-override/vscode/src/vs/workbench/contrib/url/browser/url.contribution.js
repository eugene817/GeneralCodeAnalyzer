
import { URI } from '@codingame/monaco-vscode-api/vscode/vs/base/common/uri';
import { localize2, localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { Action2, registerAction2, MenuRegistry, MenuId } from '@codingame/monaco-vscode-api/vscode/vs/platform/actions/common/actions';
import { CommandsRegistry } from '@codingame/monaco-vscode-api/vscode/vs/platform/commands/common/commands';
import { LifecyclePhase } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/lifecycle/common/lifecycle';
import { IQuickInputService } from '@codingame/monaco-vscode-api/vscode/vs/platform/quickinput/common/quickInput.service';
import { Registry } from '@codingame/monaco-vscode-api/vscode/vs/platform/registry/common/platform';
import { IURLService } from '@codingame/monaco-vscode-api/vscode/vs/platform/url/common/url.service';
import { Extensions, registerWorkbenchContribution2, WorkbenchPhase } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/contributions';
import { ExternalUriResolverContribution } from './externalUriResolver.js';
import { manageTrustedDomainSettingsCommand } from '@codingame/monaco-vscode-9a1a5840-af83-5d07-a156-ba32a36c5c4b-common/vscode/vs/workbench/contrib/url/browser/trustedDomains';
import { TrustedDomainsFileSystemProvider } from './trustedDomainsFileSystemProvider.js';
import { OpenerValidatorContributions } from './trustedDomainsValidator.js';
import { Categories } from '@codingame/monaco-vscode-api/vscode/vs/platform/action/common/actionCommonCategories';
import { Extensions as Extensions$1, ConfigurationScope } from '@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configurationRegistry';
import { workbenchConfigurationNodeBase } from '@codingame/monaco-vscode-api/vscode/vs/workbench/common/configuration';
import '@codingame/monaco-vscode-9a1a5840-af83-5d07-a156-ba32a36c5c4b-common/vscode/vs/workbench/contrib/url/browser/trustedDomainService';
import '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';
import '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/extensions';

class OpenUrlAction extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.url.openUrl',
            title: ( localize2(10810, 'Open URL')),
            category: Categories.Developer,
            f1: true
        });
    }
    async run(accessor) {
        const quickInputService = accessor.get(IQuickInputService);
        const urlService = accessor.get(IURLService);
        return quickInputService.input({ prompt: ( localize(10811, "URL to open")) }).then(input => {
            if (input) {
                const uri = ( URI.parse(input));
                urlService.open(uri, { originalUrl: input });
            }
        });
    }
}
registerAction2(OpenUrlAction);
CommandsRegistry.registerCommand(manageTrustedDomainSettingsCommand);
MenuRegistry.appendMenuItem(MenuId.CommandPalette, {
    command: {
        id: manageTrustedDomainSettingsCommand.id,
        title: manageTrustedDomainSettingsCommand.description.description
    }
});
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(OpenerValidatorContributions, LifecyclePhase.Restored);
registerWorkbenchContribution2(TrustedDomainsFileSystemProvider.ID, TrustedDomainsFileSystemProvider, WorkbenchPhase.BlockRestore
);
registerWorkbenchContribution2(ExternalUriResolverContribution.ID, ExternalUriResolverContribution, WorkbenchPhase.BlockRestore
);
const configurationRegistry = ( Registry.as(Extensions$1.Configuration));
configurationRegistry.registerConfiguration({
    ...workbenchConfigurationNodeBase,
    properties: {
        'workbench.trustedDomains.promptInTrustedWorkspace': {
            scope: ConfigurationScope.APPLICATION,
            type: 'boolean',
            default: false,
            description: ( localize(
                10812,
                "When enabled, trusted domain prompts will appear when opening links in trusted workspaces."
            ))
        }
    }
});
