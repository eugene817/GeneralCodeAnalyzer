import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { ExtensionKind, IExtensionHostDebugParams } from "@codingame/monaco-vscode-api/vscode/vs/platform/environment/common/environment";
import { IPath } from "@codingame/monaco-vscode-api/vscode/vs/platform/window/common/window";
import { IWorkbenchConstructionOptions } from "@codingame/monaco-vscode-9a6d8b6c-ad4c-5ea3-9558-f43d6dc4c0ad-common/vscode/vs/workbench/browser/web.api";
import { IProductService } from "@codingame/monaco-vscode-api/vscode/vs/platform/product/common/productService.service";
import { ITextEditorOptions } from "@codingame/monaco-vscode-api/vscode/vs/platform/editor/common/editor";
import { IBrowserWorkbenchEnvironmentService } from "@codingame/monaco-vscode-411e0589-fa79-504b-b32c-80a88847b23a-common/vscode/vs/workbench/services/environment/browser/environmentService.service";
export declare class BrowserWorkbenchEnvironmentService implements IBrowserWorkbenchEnvironmentService {
    private readonly workspaceId;
    readonly logsHome: URI;
    readonly options: IWorkbenchConstructionOptions;
    private readonly productService;
    readonly _serviceBrand: undefined;
    get remoteAuthority(): string | undefined;
    get expectsResolverExtension(): boolean;
    get isBuilt(): boolean;
    get logLevel(): string | undefined;
    get extensionLogLevel(): [
        string,
        string
    ][] | undefined;
    get profDurationMarkers(): string[] | undefined;
    get windowLogsPath(): URI;
    get logFile(): URI;
    get userRoamingDataHome(): URI;
    get argvResource(): URI;
    get cacheHome(): URI;
    get workspaceStorageHome(): URI;
    get localHistoryHome(): URI;
    get stateResource(): URI;
    get userDataSyncHome(): URI;
    get sync(): "on" | "off" | undefined;
    get keyboardLayoutResource(): URI;
    get untitledWorkspacesHome(): URI;
    get serviceMachineIdResource(): URI;
    get extHostLogsPath(): URI;
    private extensionHostDebugEnvironment;
    get debugExtensionHost(): IExtensionHostDebugParams;
    get isExtensionDevelopment(): boolean;
    get extensionDevelopmentLocationURI(): URI[] | undefined;
    get extensionDevelopmentLocationKind(): ExtensionKind[] | undefined;
    get extensionTestsLocationURI(): URI | undefined;
    get extensionEnabledProposedApi(): string[] | undefined;
    get debugRenderer(): boolean;
    get enableSmokeTestDriver(): boolean | undefined;
    get disableExtensions(): boolean;
    get enableExtensions(): readonly string[] | undefined;
    get webviewExternalEndpoint(): string;
    get extensionTelemetryLogResource(): URI;
    get disableTelemetry(): boolean;
    get verbose(): boolean;
    get logExtensionHostCommunication(): boolean;
    get skipReleaseNotes(): boolean;
    get skipWelcome(): boolean;
    get disableWorkspaceTrust(): boolean;
    get profile(): string | undefined;
    get editSessionId(): string | undefined;
    private payload;
    constructor(workspaceId: string, logsHome: URI, options: IWorkbenchConstructionOptions, productService: IProductService);
    private resolveExtensionHostDebugEnvironment;
    get filesToOpenOrCreate(): IPath<ITextEditorOptions>[] | undefined;
    get filesToDiff(): IPath[] | undefined;
    get filesToMerge(): IPath[] | undefined;
}
