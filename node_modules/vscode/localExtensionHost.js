
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import '@codingame/monaco-vscode-api/missing-services';
import '@codingame/monaco-vscode-api/vscode/vs/workbench/api/common/extHost.common.services';
import { ExtensionHostMain } from '@codingame/monaco-vscode-api/vscode/vs/workbench/api/common/extensionHostMain';
import { BufferedEmitter } from '@codingame/monaco-vscode-bd6ad8b7-9db3-51a8-9895-0046508c029d-common/vscode/vs/base/parts/ipc/common/ipc.net';
import '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { isLoggingOnly } from '@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetryUtils';
import { joinPath } from '@codingame/monaco-vscode-api/vscode/vs/base/common/resources';
import { UIKind } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/extensions/common/extensionHostProtocol';
import { Language, language, isWeb } from '@codingame/monaco-vscode-api/vscode/vs/base/common/platform';
import '@codingame/monaco-vscode-api/vscode/vs/workbench/services/extensions/common/extensionHostKind';
import { IExtHostExtensionService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/api/common/extHostExtensionService';
import { nullExtensionDescription, ExtensionHostStartup } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/extensions/common/extensions';
import { IExtensionService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/services/extensions/common/extensions.service';
import { ITelemetryService } from '@codingame/monaco-vscode-api/vscode/vs/platform/telemetry/common/telemetry.service';
import { WorkbenchState } from '@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace';
import { IWorkspaceContextService } from '@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace.service';
import { ILabelService } from '@codingame/monaco-vscode-api/vscode/vs/platform/label/common/label.service';
import { ILogService, ILoggerService } from '@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service';
import { IBrowserWorkbenchEnvironmentService } from '@codingame/monaco-vscode-411e0589-fa79-504b-b32c-80a88847b23a-common/vscode/vs/workbench/services/environment/browser/environmentService.service';
import { IProductService } from '@codingame/monaco-vscode-api/vscode/vs/platform/product/common/productService.service';
import { IUserDataProfilesService } from '@codingame/monaco-vscode-api/vscode/vs/platform/userDataProfile/common/userDataProfile.service';
import { URI } from '@codingame/monaco-vscode-api/vscode/vs/base/common/uri';
import { Event } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { registerSingleton, InstantiationType } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/extensions';
import { IExtensionStoragePaths, ExtensionStoragePaths } from '@codingame/monaco-vscode-api/vscode/vs/workbench/api/common/extHostStoragePaths';
import { ExtHostExtensionService } from '@codingame/monaco-vscode-api/vscode/vs/workbench/api/worker/extHostExtensionService';
import { ExtensionIdentifierMap } from '@codingame/monaco-vscode-api/vscode/vs/platform/extensions/common/extensions';
import { DeferredPromise } from '@codingame/monaco-vscode-api/vscode/vs/base/common/async';
import { setLocalExtensionHost } from '@codingame/monaco-vscode-extensions-service-override';
import { unsupported } from '@codingame/monaco-vscode-api/tools';
import { registerLocalApiFactory, registerDefaultApiHandler } from '@codingame/monaco-vscode-api/extensions';
import { registerServiceInitializePostParticipant } from '@codingame/monaco-vscode-api/lifecycle';
import { IExtHostTelemetry, ExtHostTelemetry } from '@codingame/monaco-vscode-api/vscode/vs/workbench/api/common/extHostTelemetry';
import { SyncDescriptor } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/descriptors';

const apiFactoryDeferred = new DeferredPromise();
class LocalExtHostExtensionService extends ExtHostExtensionService {
    constructor() {
        super(...arguments);
        this._extApiImpl = new ExtensionIdentifierMap();
    }
    async getApi(extensionId) {
        const [myRegistry, configProvider] = await Promise.all([
            this.getExtensionRegistry(),
            this._extHostConfiguration.getConfigProvider()
        ]);
        const extensionRegistry = { mine: myRegistry, all: this._globalRegistry };
        if (extensionId == null) {
            if (this._defaultApiImpl == null) {
                this._defaultApiImpl = this._apiFactory(nullExtensionDescription, extensionRegistry, configProvider);
            }
            return this._defaultApiImpl;
        }
        const ext = myRegistry.getExtensionDescription(extensionId);
        if (ext == null) {
            throw new Error(`Extension ${extensionId} does not exist or is disabled`);
        }
        let apiImpl = this._extApiImpl.get(ext.identifier);
        if (apiImpl == null) {
            apiImpl = this._apiFactory(ext, extensionRegistry, configProvider);
            this._extApiImpl.set(ext.identifier, apiImpl);
        }
        return apiImpl;
    }
}
registerSingleton(IExtHostExtensionService, LocalExtHostExtensionService, InstantiationType.Eager);
registerSingleton(IExtensionStoragePaths, ExtensionStoragePaths, InstantiationType.Eager);
registerSingleton(IExtHostTelemetry, new SyncDescriptor(ExtHostTelemetry, [true], true));
function createMessagePassingProtocolPair() {
    const emitterA = new BufferedEmitter();
    const emitterB = new BufferedEmitter();
    class SimpleMessagePassingProtocol {
        constructor(emitterIn, emitterOut) {
            this.emitterIn = emitterIn;
            this.emitterOut = emitterOut;
            this.onMessage = this.emitterIn.event;
        }
        send(buffer) {
            this.emitterOut.fire(buffer);
        }
    }
    return [
        new SimpleMessagePassingProtocol(emitterA, emitterB),
        new SimpleMessagePassingProtocol(emitterB, emitterA)
    ];
}
const hostUtil = new (class {
    constructor() {
        this.pid = undefined;
        this.exit = unsupported;
    }
    async exists() {
        return true;
    }
    async realpath(path) {
        return path;
    }
})();
let LocalExtensionHost = class LocalExtensionHost {
    constructor(runningLocation, startup, _initDataProvider, _telemetryService, _contextService, _labelService, _logService, _loggerService, _environmentService, _productService, _userDataProfilesService) {
        this.runningLocation = runningLocation;
        this.startup = startup;
        this._initDataProvider = _initDataProvider;
        this._telemetryService = _telemetryService;
        this._contextService = _contextService;
        this._labelService = _labelService;
        this._logService = _logService;
        this._loggerService = _loggerService;
        this._environmentService = _environmentService;
        this._productService = _productService;
        this._userDataProfilesService = _userDataProfilesService;
        this.remoteAuthority = null;
        this.extensions = null;
        this.pid = null;
        this.onExit = Event.None;
        this._protocolPromise = null;
        this._extensionHostLogsLocation = joinPath(this._environmentService.extHostLogsPath, 'local');
    }
    async start() {
        if (this._protocolPromise == null) {
            this._protocolPromise = this._start();
        }
        return await this._protocolPromise;
    }
    async _start() {
        const [mainThreadMessagePassingProtocol, extHostMessagePassingProtocol] = createMessagePassingProtocolPair();
        const initData = await this._createExtHostInitData();
        const hostMain = new ExtensionHostMain(extHostMessagePassingProtocol, initData, hostUtil, null);
        const localExtHostExtensionService = hostMain.getExtHostExtensionService();
        await apiFactoryDeferred.complete((extensionId) => localExtHostExtensionService.getApi(extensionId));
        return mainThreadMessagePassingProtocol;
    }
    async _createExtHostInitData() {
        const initData = await this._initDataProvider.getInitData();
        this.extensions = initData.extensions;
        const workspace = this._contextService.getWorkspace();
        const nlsBaseUrl = this._productService.extensionsGallery?.nlsBaseUrl;
        let nlsUrlWithDetails;
        if (nlsBaseUrl != null &&
            this._productService.commit != null &&
            !Language.isDefaultVariant()) {
            nlsUrlWithDetails = URI.joinPath(URI.parse(nlsBaseUrl), this._productService.commit, this._productService.version, Language.value());
        }
        return {
            commit: this._productService.commit,
            version: this._productService.version,
            quality: this._productService.quality,
            parentPid: 0,
            environment: {
                isExtensionDevelopmentDebug: this._environmentService.debugRenderer,
                appName: this._productService.nameLong,
                appHost: this._productService.embedderIdentifier ?? (isWeb ? 'web' : 'desktop'),
                appUriScheme: this._productService.urlProtocol,
                appLanguage: language,
                isExtensionTelemetryLoggingOnly: isLoggingOnly(this._productService, this._environmentService),
                extensionDevelopmentLocationURI: this._environmentService.extensionDevelopmentLocationURI,
                extensionTestsLocationURI: this._environmentService.extensionTestsLocationURI,
                globalStorageHome: this._userDataProfilesService.defaultProfile.globalStorageHome,
                workspaceStorageHome: this._environmentService.workspaceStorageHome,
                extensionLogLevel: this._environmentService.extensionLogLevel
            },
            workspace: this._contextService.getWorkbenchState() === WorkbenchState.EMPTY
                ? undefined
                : {
                    configuration: workspace.configuration ?? undefined,
                    id: workspace.id,
                    name: this._labelService.getWorkspaceLabel(workspace),
                    transient: workspace.transient
                },
            consoleForward: {
                includeStack: false,
                logNative: this._environmentService.debugRenderer
            },
            extensions: initData.extensions.toSnapshot(),
            nlsBaseUrl: nlsUrlWithDetails,
            telemetryInfo: {
                sessionId: this._telemetryService.sessionId,
                machineId: this._telemetryService.machineId,
                firstSessionDate: this._telemetryService.firstSessionDate,
                msftInternal: this._telemetryService.msftInternal,
                sqmId: this._telemetryService.sqmId,
                devDeviceId: this._telemetryService.devDeviceId
            },
            logLevel: this._logService.getLevel(),
            loggers: [...this._loggerService.getRegisteredLoggers()],
            logsLocation: this._extensionHostLogsLocation,
            autoStart: this.startup === ExtensionHostStartup.EagerAutoStart,
            remote: {
                authority: this._environmentService.remoteAuthority,
                connectionData: null,
                isRemote: false
            },
            uiKind: isWeb ? UIKind.Web : UIKind.Desktop
        };
    }
    getInspectPort() {
        return undefined;
    }
    enableInspectPort() {
        return Promise.resolve(false);
    }
    dispose() { }
};
LocalExtensionHost = __decorate([
    __param(3, ITelemetryService),
    __param(4, IWorkspaceContextService),
    __param(5, ILabelService),
    __param(6, ILogService),
    __param(7, ILoggerService),
    __param(8, IBrowserWorkbenchEnvironmentService),
    __param(9, IProductService),
    __param(10, IUserDataProfilesService)
], LocalExtensionHost);
async function createLocalApi(extensionId) {
    const apiFactory = await apiFactoryDeferred.p;
    return await apiFactory(extensionId);
}
setLocalExtensionHost(LocalExtensionHost);
registerLocalApiFactory(createLocalApi);
let defaultApi;
registerDefaultApiHandler((api) => {
    defaultApi = api;
});
registerServiceInitializePostParticipant(async (accessor) => {
    accessor.get(IExtensionService);
    defaultApi = await createLocalApi();
});

export { defaultApi };
